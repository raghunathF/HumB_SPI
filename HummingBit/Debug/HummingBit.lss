
HummingBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003728  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000034c  20000074  0000379c  00020074  2**2
                  ALLOC
  3 .stack        00000400  200003c0  00003ae8  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005761f  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e6c  00000000  00000000  00077714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a6ab  00000000  00000000  0007e580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000940  00000000  00000000  00088c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e58  00000000  00000000  0008956b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bc44  00000000  00000000  0008a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018d8d  00000000  00000000  000a6007  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00073697  00000000  00000000  000bed94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001690  00000000  00000000  0013242c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 07 00 20 7d 2f 00 00 79 2f 00 00 79 2f 00 00     ... }/..y/..y/..
	...
      2c:	79 2f 00 00 00 00 00 00 00 00 00 00 79 2f 00 00     y/..........y/..
      3c:	79 2f 00 00 79 2f 00 00 79 2f 00 00 79 2f 00 00     y/..y/..y/..y/..
      4c:	79 2f 00 00 fd 1e 00 00 79 2f 00 00 79 2f 00 00     y/......y/..y/..
      5c:	00 00 00 00 79 2f 00 00 cd 1e 00 00 dd 1e 00 00     ....y/..........
      6c:	ed 1e 00 00 d1 1a 00 00 4d 1e 00 00 5d 1e 00 00     ........M...]...
      7c:	f9 0c 00 00 79 2f 00 00 79 2f 00 00 79 2f 00 00     ....y/..y/..y/..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000074 	.word	0x20000074
      ac:	00000000 	.word	0x00000000
      b0:	00003728 	.word	0x00003728

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000078 	.word	0x20000078
      e0:	00003728 	.word	0x00003728
      e4:	00003728 	.word	0x00003728
      e8:	00000000 	.word	0x00000000

000000ec <spi_init>:
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
      ec:	b5f0      	push	{r4, r5, r6, r7, lr}
      ee:	b08b      	sub	sp, #44	; 0x2c
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
      f0:	0005      	movs	r5, r0

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
      f2:	000c      	movs	r4, r1
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
      f4:	0016      	movs	r6, r2
      f6:	6029      	str	r1, [r5, #0]
		}

		enum status_code retval;
		uint16_t received_data = 0;
		rx_length--;
      f8:	680b      	ldr	r3, [r1, #0]
      fa:	201c      	movs	r0, #28
      fc:	079b      	lsls	r3, r3, #30
      fe:	d501      	bpl.n	104 <spi_init+0x18>
     100:	b00b      	add	sp, #44	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     102:	bdf0      	pop	{r4, r5, r6, r7, pc}
     104:	680b      	ldr	r3, [r1, #0]
     106:	3817      	subs	r0, #23

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     108:	07db      	lsls	r3, r3, #31
	enum status_code retval = STATUS_OK;
     10a:	d4f9      	bmi.n	100 <spi_init+0x14>
     10c:	0008      	movs	r0, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     10e:	4b6f      	ldr	r3, [pc, #444]	; (2cc <spi_init+0x1e0>)
     110:	4798      	blx	r3
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     112:	4a6f      	ldr	r2, [pc, #444]	; (2d0 <spi_init+0x1e4>)
		retval = STATUS_ERR_OVERFLOW;
     114:	6a11      	ldr	r1, [r2, #32]
     116:	1c87      	adds	r7, r0, #2
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     118:	2301      	movs	r3, #1
     11a:	40bb      	lsls	r3, r7
     11c:	430b      	orrs	r3, r1
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     11e:	6213      	str	r3, [r2, #32]
     120:	a909      	add	r1, sp, #36	; 0x24

		retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
     122:	2724      	movs	r7, #36	; 0x24
     124:	5df3      	ldrb	r3, [r6, r7]
     126:	700b      	strb	r3, [r1, #0]
     128:	300e      	adds	r0, #14
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     12a:	b2c3      	uxtb	r3, r0
     12c:	9301      	str	r3, [sp, #4]
     12e:	0018      	movs	r0, r3
     130:	4b68      	ldr	r3, [pc, #416]	; (2d4 <spi_init+0x1e8>)
     132:	4798      	blx	r3
     134:	9801      	ldr	r0, [sp, #4]
     136:	4b68      	ldr	r3, [pc, #416]	; (2d8 <spi_init+0x1ec>)

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     138:	4798      	blx	r3
     13a:	5df0      	ldrb	r0, [r6, r7]
     13c:	2100      	movs	r1, #0
		rx_data[rx_pos++] = received_data;
     13e:	4b67      	ldr	r3, [pc, #412]	; (2dc <spi_init+0x1f0>)
	while (length--) {
     140:	4798      	blx	r3
     142:	7833      	ldrb	r3, [r6, #0]
     144:	2b01      	cmp	r3, #1
     146:	d03f      	beq.n	1c8 <spi_init+0xdc>
		if (module->mode == SPI_MODE_SLAVE) {
     148:	7833      	ldrb	r3, [r6, #0]
     14a:	2b00      	cmp	r3, #0
     14c:	d103      	bne.n	156 <spi_init+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
     14e:	6823      	ldr	r3, [r4, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     150:	2208      	movs	r2, #8
				if (spi_is_ready_to_write(module)) {
     152:	4313      	orrs	r3, r2
     154:	6023      	str	r3, [r4, #0]
     156:	002b      	movs	r3, r5
     158:	330c      	adds	r3, #12
     15a:	0029      	movs	r1, r5
     15c:	3128      	adds	r1, #40	; 0x28
     15e:	2200      	movs	r2, #0
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     160:	c304      	stmia	r3!, {r2}
     162:	428b      	cmp	r3, r1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     164:	d1fc      	bne.n	160 <spi_init+0x74>
			if (spi_is_write_complete(module)) {
     166:	2300      	movs	r3, #0
     168:	62eb      	str	r3, [r5, #44]	; 0x2c
     16a:	62ab      	str	r3, [r5, #40]	; 0x28
     16c:	2400      	movs	r4, #0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     16e:	86ab      	strh	r3, [r5, #52]	; 0x34
			if (!spi_is_ready_to_write(module)) {
     170:	862b      	strh	r3, [r5, #48]	; 0x30
     172:	3336      	adds	r3, #54	; 0x36
     174:	54ec      	strb	r4, [r5, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     176:	3301      	adds	r3, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     178:	54ec      	strb	r4, [r5, r3]
		while (!spi_is_ready_to_write(module)) {
     17a:	3301      	adds	r3, #1
     17c:	54ec      	strb	r4, [r5, r3]
		uint16_t data_to_send = tx_data[tx_pos++];
     17e:	3b35      	subs	r3, #53	; 0x35
     180:	726b      	strb	r3, [r5, #9]
     182:	712c      	strb	r4, [r5, #4]
     184:	6828      	ldr	r0, [r5, #0]
     186:	4b51      	ldr	r3, [pc, #324]	; (2cc <spi_init+0x1e0>)
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     188:	4798      	blx	r3
     18a:	0007      	movs	r7, r0
     18c:	4954      	ldr	r1, [pc, #336]	; (2e0 <spi_init+0x1f4>)
     18e:	4b55      	ldr	r3, [pc, #340]	; (2e4 <spi_init+0x1f8>)
		uint16_t data_to_send = tx_data[tx_pos++];
     190:	4798      	blx	r3
     192:	00bf      	lsls	r7, r7, #2
     194:	4b54      	ldr	r3, [pc, #336]	; (2e8 <spi_init+0x1fc>)
     196:	50fd      	str	r5, [r7, r3]
     198:	682f      	ldr	r7, [r5, #0]
     19a:	ab04      	add	r3, sp, #16
	if (!spi_is_ready_to_write(module)) {
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	701a      	strb	r2, [r3, #0]
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     1a0:	705c      	strb	r4, [r3, #1]
     1a2:	3a7f      	subs	r2, #127	; 0x7f
     1a4:	709a      	strb	r2, [r3, #2]
		if (module->mode == SPI_MODE_SLAVE) {
     1a6:	70dc      	strb	r4, [r3, #3]
     1a8:	7833      	ldrb	r3, [r6, #0]
     1aa:	2b00      	cmp	r3, #0
     1ac:	d102      	bne.n	1b4 <spi_init+0xc8>
     1ae:	2200      	movs	r2, #0
     1b0:	ab04      	add	r3, sp, #16
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     1b2:	709a      	strb	r2, [r3, #2]
     1b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     1b6:	9305      	str	r3, [sp, #20]
     1b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
			rx_data[rx_pos++] = (received_data >> 8);
     1ba:	9306      	str	r3, [sp, #24]
     1bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
     1be:	9307      	str	r3, [sp, #28]
     1c0:	6b73      	ldr	r3, [r6, #52]	; 0x34
     1c2:	9308      	str	r3, [sp, #32]
     1c4:	2400      	movs	r4, #0
     1c6:	e00b      	b.n	1e0 <spi_init+0xf4>
     1c8:	6823      	ldr	r3, [r4, #0]
     1ca:	220c      	movs	r2, #12
     1cc:	4313      	orrs	r3, r2
     1ce:	6023      	str	r3, [r4, #0]
     1d0:	e7ba      	b.n	148 <spi_init+0x5c>
     1d2:	0038      	movs	r0, r7
     1d4:	4b45      	ldr	r3, [pc, #276]	; (2ec <spi_init+0x200>)
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     1d6:	4798      	blx	r3
     1d8:	e00a      	b.n	1f0 <spi_init+0x104>
     1da:	3401      	adds	r4, #1
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
     1dc:	2c04      	cmp	r4, #4
     1de:	d010      	beq.n	202 <spi_init+0x116>
     1e0:	b2e1      	uxtb	r1, r4
		while (rx_length) {
     1e2:	00a3      	lsls	r3, r4, #2
     1e4:	aa02      	add	r2, sp, #8
     1e6:	200c      	movs	r0, #12
     1e8:	1812      	adds	r2, r2, r0
			/* Start timeout period for slave */
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
     1ea:	58d0      	ldr	r0, [r2, r3]
	enum status_code retval = STATUS_OK;
     1ec:	2800      	cmp	r0, #0
		retval = STATUS_ERR_OVERFLOW;
     1ee:	d0f0      	beq.n	1d2 <spi_init+0xe6>
     1f0:	1c43      	adds	r3, r0, #1
     1f2:	d0f2      	beq.n	1da <spi_init+0xee>
     1f4:	a904      	add	r1, sp, #16
     1f6:	7008      	strb	r0, [r1, #0]
     1f8:	0c00      	lsrs	r0, r0, #16
     1fa:	b2c0      	uxtb	r0, r0
     1fc:	4b3c      	ldr	r3, [pc, #240]	; (2f0 <spi_init+0x204>)
	SercomSpi *const spi_module = &(module->hw->SPI);
     1fe:	4798      	blx	r3
		while (!spi_is_write_complete(module)) {
     200:	e7eb      	b.n	1da <spi_init+0xee>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     202:	7833      	ldrb	r3, [r6, #0]
     204:	716b      	strb	r3, [r5, #5]
     206:	7c33      	ldrb	r3, [r6, #16]
     208:	71ab      	strb	r3, [r5, #6]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     20a:	7cb3      	ldrb	r3, [r6, #18]
					break;
				}
			}
			if (!spi_is_ready_to_read(module)) {
     20c:	71eb      	strb	r3, [r5, #7]
     20e:	7d33      	ldrb	r3, [r6, #20]
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
			}
			enum status_code retval;
			uint16_t received_data = 0;
			rx_length--;
     210:	722b      	strb	r3, [r5, #8]
     212:	2200      	movs	r2, #0
     214:	ab02      	add	r3, sp, #8
	if (!spi_is_ready_to_read(module)) {
     216:	80da      	strh	r2, [r3, #6]
     218:	7833      	ldrb	r3, [r6, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     21a:	2b01      	cmp	r3, #1
	enum status_code retval = STATUS_OK;
     21c:	d012      	beq.n	244 <spi_init+0x158>
     21e:	7833      	ldrb	r3, [r6, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     220:	2b00      	cmp	r3, #0
     222:	d126      	bne.n	272 <spi_init+0x186>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     224:	69b0      	ldr	r0, [r6, #24]
		retval = STATUS_ERR_OVERFLOW;
     226:	8bb2      	ldrh	r2, [r6, #28]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     22a:	7ff1      	ldrb	r1, [r6, #31]
     22c:	0409      	lsls	r1, r1, #16
		*rx_data = (uint8_t)spi_module->DATA.reg;
     22e:	7fb4      	ldrb	r4, [r6, #30]
     230:	4321      	orrs	r1, r4

			retval = spi_read(module, &received_data);

			if (retval != STATUS_OK) {
     232:	4319      	orrs	r1, r3
     234:	6279      	str	r1, [r7, #36]	; 0x24
     236:	2320      	movs	r3, #32
				/* Overflow, abort */
				return retval;
			}
			/* Read value will be at least 8-bits long */
			rx_data[rx_pos++] = received_data;
     238:	5cf3      	ldrb	r3, [r6, r3]
     23a:	2b00      	cmp	r3, #0
     23c:	d01b      	beq.n	276 <spi_init+0x18a>
     23e:	2340      	movs	r3, #64	; 0x40

			/* If 9-bit data, write next received byte to the buffer */
			if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     240:	431a      	orrs	r2, r3
     242:	e018      	b.n	276 <spi_init+0x18a>
     244:	6828      	ldr	r0, [r5, #0]
			rx_data[rx_pos++] = received_data;
     246:	4b21      	ldr	r3, [pc, #132]	; (2cc <spi_init+0x1e0>)
		while (rx_length) {
     248:	4798      	blx	r3
     24a:	300e      	adds	r0, #14
	SercomSpi *const spi_module = &(module->hw->SPI);
     24c:	b2c0      	uxtb	r0, r0
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     24e:	4b29      	ldr	r3, [pc, #164]	; (2f4 <spi_init+0x208>)
				if (spi_is_ready_to_read(module)) {
     250:	4798      	blx	r3
     252:	0001      	movs	r1, r0
     254:	ab02      	add	r3, sp, #8
     256:	1d9a      	adds	r2, r3, #6
     258:	69b0      	ldr	r0, [r6, #24]
     25a:	4b27      	ldr	r3, [pc, #156]	; (2f8 <spi_init+0x20c>)
     25c:	4798      	blx	r3
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     25e:	0003      	movs	r3, r0
     260:	2017      	movs	r0, #23
     262:	2b00      	cmp	r3, #0
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     264:	d000      	beq.n	268 <spi_init+0x17c>
     266:	e74b      	b.n	100 <spi_init+0x14>
     268:	ab02      	add	r3, sp, #8
     26a:	3306      	adds	r3, #6
				rx_data[rx_pos++] = (received_data >> 8);
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	733b      	strb	r3, [r7, #12]
     270:	e7d5      	b.n	21e <spi_init+0x132>
     272:	2200      	movs	r2, #0
     274:	2000      	movs	r0, #0
     276:	6873      	ldr	r3, [r6, #4]
     278:	68b1      	ldr	r1, [r6, #8]
     27a:	430b      	orrs	r3, r1
				return STATUS_ERR_TIMEOUT;
     27c:	68f1      	ldr	r1, [r6, #12]
     27e:	430b      	orrs	r3, r1
				return STATUS_ERR_TIMEOUT;
     280:	4303      	orrs	r3, r0
     282:	7c31      	ldrb	r1, [r6, #16]
		return STATUS_ERR_IO;
     284:	430a      	orrs	r2, r1
     286:	7c71      	ldrb	r1, [r6, #17]
				return STATUS_ERR_TIMEOUT;
     288:	2900      	cmp	r1, #0
     28a:	d103      	bne.n	294 <spi_init+0x1a8>
     28c:	491b      	ldr	r1, [pc, #108]	; (2fc <spi_init+0x210>)
     28e:	7889      	ldrb	r1, [r1, #2]
     290:	0789      	lsls	r1, r1, #30
     292:	d501      	bpl.n	298 <spi_init+0x1ac>
     294:	2180      	movs	r1, #128	; 0x80
     296:	430b      	orrs	r3, r1
     298:	7cb1      	ldrb	r1, [r6, #18]
     29a:	2900      	cmp	r1, #0
     29c:	d002      	beq.n	2a4 <spi_init+0x1b8>
     29e:	2180      	movs	r1, #128	; 0x80
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     2a0:	0289      	lsls	r1, r1, #10
     2a2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     2a4:	7cf1      	ldrb	r1, [r6, #19]
     2a6:	2900      	cmp	r1, #0
     2a8:	d002      	beq.n	2b0 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     2aa:	2180      	movs	r1, #128	; 0x80
     2ac:	0089      	lsls	r1, r1, #2
     2ae:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     2b0:	7d31      	ldrb	r1, [r6, #20]
     2b2:	2900      	cmp	r1, #0
     2b4:	d002      	beq.n	2bc <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     2b6:	2180      	movs	r1, #128	; 0x80
     2b8:	0189      	lsls	r1, r1, #6
     2ba:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     2bc:	6839      	ldr	r1, [r7, #0]
     2be:	430b      	orrs	r3, r1
     2c0:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	431a      	orrs	r2, r3
     2c6:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     2c8:	2000      	movs	r0, #0
     2ca:	e719      	b.n	100 <spi_init+0x14>
     2cc:	00000f71 	.word	0x00000f71
     2d0:	40000400 	.word	0x40000400
     2d4:	00002ddd 	.word	0x00002ddd
     2d8:	00002d51 	.word	0x00002d51
     2dc:	00000e65 	.word	0x00000e65
     2e0:	0000035d 	.word	0x0000035d
     2e4:	00001e71 	.word	0x00001e71
     2e8:	2000020c 	.word	0x2000020c
     2ec:	00000eb1 	.word	0x00000eb1
     2f0:	00002ed5 	.word	0x00002ed5
     2f4:	00002df9 	.word	0x00002df9
     2f8:	00000e3d 	.word	0x00000e3d
     2fc:	41002000 	.word	0x41002000

00000300 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     300:	1c93      	adds	r3, r2, #2
     302:	009b      	lsls	r3, r3, #2
     304:	18c3      	adds	r3, r0, r3
     306:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     308:	2136      	movs	r1, #54	; 0x36
     30a:	2301      	movs	r3, #1
     30c:	4093      	lsls	r3, r2
     30e:	001a      	movs	r2, r3
     310:	5c43      	ldrb	r3, [r0, r1]
     312:	4313      	orrs	r3, r2
     314:	5443      	strb	r3, [r0, r1]
}
     316:	4770      	bx	lr

00000318 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
     318:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     31a:	2417      	movs	r4, #23
	if (length == 0) {
     31c:	2b00      	cmp	r3, #0
     31e:	d101      	bne.n	324 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
     320:	0020      	movs	r0, r4
     322:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     324:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     326:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     328:	2d00      	cmp	r5, #0
     32a:	d0f9      	beq.n	320 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     32c:	341c      	adds	r4, #28
     32e:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     330:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     332:	2d05      	cmp	r5, #5
     334:	d0f4      	beq.n	320 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
     336:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
     338:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
     33a:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
     33c:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
     33e:	2205      	movs	r2, #5
     340:	2338      	movs	r3, #56	; 0x38
     342:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_BOTH;
     344:	3b36      	subs	r3, #54	; 0x36
     346:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     348:	6803      	ldr	r3, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     34a:	759a      	strb	r2, [r3, #22]
	if (module->mode == SPI_MODE_SLAVE) {
     34c:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
     34e:	2400      	movs	r4, #0
	if (module->mode == SPI_MODE_SLAVE) {
     350:	2a00      	cmp	r2, #0
     352:	d1e5      	bne.n	320 <spi_transceive_buffer_job+0x8>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     354:	3202      	adds	r2, #2
     356:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     358:	759a      	strb	r2, [r3, #22]
     35a:	e7e1      	b.n	320 <spi_transceive_buffer_job+0x8>

0000035c <_spi_interrupt_handler>:
 */


void _spi_interrupt_handler(
		uint8_t instance)
{
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t buffer_length    = 0;
	static uint8_t buffer_length_wr = 0;
	
	/* Get device instance from the look-up table */
	struct spi_module *module
     35e:	0080      	lsls	r0, r0, #2
     360:	4b8a      	ldr	r3, [pc, #552]	; (58c <STACK_SIZE+0x18c>)
     362:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     364:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     366:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     368:	5ce7      	ldrb	r7, [r4, r3]
     36a:	2236      	movs	r2, #54	; 0x36
     36c:	5ca2      	ldrb	r2, [r4, r2]
     36e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     370:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     372:	7db5      	ldrb	r5, [r6, #22]
     374:	401d      	ands	r5, r3
	
	
	/* Data register empty interrupt */ 
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     376:	07eb      	lsls	r3, r5, #31
     378:	d52d      	bpl.n	3d6 <_spi_interrupt_handler+0x7a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     37a:	7963      	ldrb	r3, [r4, #5]
     37c:	2b01      	cmp	r3, #1
     37e:	d024      	beq.n	3ca <_spi_interrupt_handler+0x6e>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     380:	2b00      	cmp	r3, #0
     382:	d128      	bne.n	3d6 <_spi_interrupt_handler+0x7a>
			(module->dir != SPI_DIRECTION_READ))
     384:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     386:	2b00      	cmp	r3, #0
     388:	d025      	beq.n	3d6 <_spi_interrupt_handler+0x7a>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     38a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     38c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     38e:	7813      	ldrb	r3, [r2, #0]
     390:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     392:	1c50      	adds	r0, r2, #1
     394:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     396:	79a0      	ldrb	r0, [r4, #6]
     398:	2801      	cmp	r0, #1
     39a:	d05f      	beq.n	45c <STACK_SIZE+0x5c>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     39c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     39e:	05db      	lsls	r3, r3, #23
     3a0:	0ddb      	lsrs	r3, r3, #23
     3a2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     3a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     3a6:	3b01      	subs	r3, #1
     3a8:	b29b      	uxth	r3, r3
     3aa:	86a3      	strh	r3, [r4, #52]	; 0x34
			}
			*/
			
			
		     //spi_hw->DATA.reg = sensor_outputs[0] & SERCOM_SPI_DATA_MASK;
			if (module->remaining_tx_buffer_length == 0) 
     3ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     3ae:	b29b      	uxth	r3, r3
     3b0:	2b00      	cmp	r3, #0
     3b2:	d110      	bne.n	3d6 <_spi_interrupt_handler+0x7a>
				
				
				/* Disable the Data Register Empty Interrupt */
				
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     3b4:	3301      	adds	r3, #1
     3b6:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     3b8:	7a63      	ldrb	r3, [r4, #9]
     3ba:	2b01      	cmp	r3, #1
     3bc:	d10b      	bne.n	3d6 <_spi_interrupt_handler+0x7a>
     3be:	79e3      	ldrb	r3, [r4, #7]
     3c0:	2b00      	cmp	r3, #0
     3c2:	d108      	bne.n	3d6 <_spi_interrupt_handler+0x7a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     3c4:	3302      	adds	r3, #2
     3c6:	75b3      	strb	r3, [r6, #22]
     3c8:	e005      	b.n	3d6 <_spi_interrupt_handler+0x7a>
			(module->dir == SPI_DIRECTION_READ)) {
     3ca:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     3cc:	2b00      	cmp	r3, #0
     3ce:	d034      	beq.n	43a <STACK_SIZE+0x3a>
			(module->dir != SPI_DIRECTION_READ))
     3d0:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     3d2:	2b00      	cmp	r3, #0
     3d4:	d1d9      	bne.n	38a <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     3d6:	076b      	lsls	r3, r5, #29
     3d8:	d511      	bpl.n	3fe <_spi_interrupt_handler+0xa2>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3da:	8b73      	ldrh	r3, [r6, #26]
     3dc:	075b      	lsls	r3, r3, #29
     3de:	d547      	bpl.n	470 <STACK_SIZE+0x70>
			if (module->dir != SPI_DIRECTION_WRITE) {
     3e0:	7a63      	ldrb	r3, [r4, #9]
     3e2:	2b01      	cmp	r3, #1
     3e4:	d008      	beq.n	3f8 <_spi_interrupt_handler+0x9c>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     3e6:	221e      	movs	r2, #30
     3e8:	2338      	movs	r3, #56	; 0x38
     3ea:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     3ec:	3b35      	subs	r3, #53	; 0x35
     3ee:	7263      	strb	r3, [r4, #9]
				
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     3f0:	3302      	adds	r3, #2
     3f2:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     3f4:	073b      	lsls	r3, r7, #28
     3f6:	d437      	bmi.n	468 <STACK_SIZE+0x68>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     3f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     3fa:	2304      	movs	r3, #4
     3fc:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     3fe:	07ab      	lsls	r3, r5, #30
     400:	d50b      	bpl.n	41a <STACK_SIZE+0x1a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     402:	7963      	ldrb	r3, [r4, #5]
     404:	2b00      	cmp	r3, #0
     406:	d104      	bne.n	412 <STACK_SIZE+0x12>
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			*/
			/* Clear interrupt flag */
			buffer_length = 0;
     408:	2200      	movs	r2, #0
     40a:	4b61      	ldr	r3, [pc, #388]	; (590 <STACK_SIZE+0x190>)
     40c:	701a      	strb	r2, [r3, #0]
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     40e:	2302      	movs	r3, #2
     410:	7633      	strb	r3, [r6, #24]
			*/

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     412:	7963      	ldrb	r3, [r4, #5]
     414:	2b01      	cmp	r3, #1
     416:	d100      	bne.n	41a <STACK_SIZE+0x1a>
     418:	e094      	b.n	544 <STACK_SIZE+0x144>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     41a:	072b      	lsls	r3, r5, #28
     41c:	d508      	bpl.n	430 <STACK_SIZE+0x30>
			if (module->mode == SPI_MODE_SLAVE) {
     41e:	7963      	ldrb	r3, [r4, #5]
     420:	2b00      	cmp	r3, #0
     422:	d105      	bne.n	430 <STACK_SIZE+0x30>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     424:	3308      	adds	r3, #8
     426:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     428:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     42a:	06bb      	lsls	r3, r7, #26
     42c:	d500      	bpl.n	430 <STACK_SIZE+0x30>
     42e:	e09f      	b.n	570 <STACK_SIZE+0x170>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     430:	b26d      	sxtb	r5, r5
     432:	2d00      	cmp	r5, #0
     434:	da00      	bge.n	438 <STACK_SIZE+0x38>
     436:	e09f      	b.n	578 <STACK_SIZE+0x178>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
		//update_LEDS_single(0x33,0x55);
	}
#  endif
}
     438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     43a:	4b56      	ldr	r3, [pc, #344]	; (594 <STACK_SIZE+0x194>)
     43c:	881b      	ldrh	r3, [r3, #0]
     43e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     440:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     442:	3b01      	subs	r3, #1
     444:	b29b      	uxth	r3, r3
     446:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     448:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     44a:	b29b      	uxth	r3, r3
     44c:	2b00      	cmp	r3, #0
     44e:	d101      	bne.n	454 <STACK_SIZE+0x54>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     450:	3301      	adds	r3, #1
     452:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     454:	7963      	ldrb	r3, [r4, #5]
		if (0
     456:	2b01      	cmp	r3, #1
     458:	d0ba      	beq.n	3d0 <_spi_interrupt_handler+0x74>
     45a:	e791      	b.n	380 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     45c:	7850      	ldrb	r0, [r2, #1]
     45e:	0200      	lsls	r0, r0, #8
     460:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     462:	3202      	adds	r2, #2
     464:	62e2      	str	r2, [r4, #44]	; 0x2c
     466:	e79a      	b.n	39e <_spi_interrupt_handler+0x42>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     468:	0020      	movs	r0, r4
     46a:	69a3      	ldr	r3, [r4, #24]
     46c:	4798      	blx	r3
     46e:	e7c3      	b.n	3f8 <_spi_interrupt_handler+0x9c>
			if (module->dir == SPI_DIRECTION_WRITE) {
     470:	7a63      	ldrb	r3, [r4, #9]
     472:	2b01      	cmp	r3, #1
     474:	d02c      	beq.n	4d0 <STACK_SIZE+0xd0>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     476:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     47a:	05db      	lsls	r3, r3, #23
     47c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     47e:	b2da      	uxtb	r2, r3
     480:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     482:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     484:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     486:	1c51      	adds	r1, r2, #1
     488:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     48a:	79a1      	ldrb	r1, [r4, #6]
     48c:	2901      	cmp	r1, #1
     48e:	d038      	beq.n	502 <STACK_SIZE+0x102>
	module->remaining_rx_buffer_length--;
     490:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     492:	3b01      	subs	r3, #1
     494:	b29b      	uxth	r3, r3
     496:	8623      	strh	r3, [r4, #48]	; 0x30
				buffer_length++;
     498:	4a3d      	ldr	r2, [pc, #244]	; (590 <STACK_SIZE+0x190>)
     49a:	7813      	ldrb	r3, [r2, #0]
     49c:	3301      	adds	r3, #1
     49e:	b2db      	uxtb	r3, r3
     4a0:	7013      	strb	r3, [r2, #0]
				if(buffer_length == 1)
     4a2:	2b01      	cmp	r3, #1
     4a4:	d033      	beq.n	50e <STACK_SIZE+0x10e>
				if (module->remaining_rx_buffer_length == 0) {
     4a6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     4a8:	b29b      	uxth	r3, r3
     4aa:	2b00      	cmp	r3, #0
     4ac:	d1a7      	bne.n	3fe <_spi_interrupt_handler+0xa2>
					module->status = STATUS_OK;
     4ae:	2200      	movs	r2, #0
     4b0:	3338      	adds	r3, #56	; 0x38
     4b2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     4b4:	3b34      	subs	r3, #52	; 0x34
     4b6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     4b8:	7a63      	ldrb	r3, [r4, #9]
     4ba:	2b02      	cmp	r3, #2
     4bc:	d03b      	beq.n	536 <STACK_SIZE+0x136>
					} else if (module->dir == SPI_DIRECTION_READ) {
     4be:	7a63      	ldrb	r3, [r4, #9]
     4c0:	2b00      	cmp	r3, #0
     4c2:	d19c      	bne.n	3fe <_spi_interrupt_handler+0xa2>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     4c4:	07bb      	lsls	r3, r7, #30
     4c6:	d59a      	bpl.n	3fe <_spi_interrupt_handler+0xa2>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     4c8:	0020      	movs	r0, r4
     4ca:	6923      	ldr	r3, [r4, #16]
     4cc:	4798      	blx	r3
     4ce:	e796      	b.n	3fe <_spi_interrupt_handler+0xa2>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     4d0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     4d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     4d6:	3b01      	subs	r3, #1
     4d8:	b29b      	uxth	r3, r3
     4da:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     4dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     4de:	b29b      	uxth	r3, r3
     4e0:	2b00      	cmp	r3, #0
     4e2:	d000      	beq.n	4e6 <STACK_SIZE+0xe6>
     4e4:	e78b      	b.n	3fe <_spi_interrupt_handler+0xa2>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     4e6:	3304      	adds	r3, #4
     4e8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     4ea:	2200      	movs	r2, #0
     4ec:	3334      	adds	r3, #52	; 0x34
     4ee:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     4f0:	3b35      	subs	r3, #53	; 0x35
     4f2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     4f4:	07fb      	lsls	r3, r7, #31
     4f6:	d400      	bmi.n	4fa <STACK_SIZE+0xfa>
     4f8:	e781      	b.n	3fe <_spi_interrupt_handler+0xa2>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     4fa:	0020      	movs	r0, r4
     4fc:	68e3      	ldr	r3, [r4, #12]
     4fe:	4798      	blx	r3
     500:	e77d      	b.n	3fe <_spi_interrupt_handler+0xa2>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     502:	0a1b      	lsrs	r3, r3, #8
     504:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     508:	3301      	adds	r3, #1
     50a:	62a3      	str	r3, [r4, #40]	; 0x28
     50c:	e7c0      	b.n	490 <STACK_SIZE+0x90>
					if ((*(module->rx_buffer_ptr-1) == WR_SPI_INT_SET_ALL || *(module->rx_buffer_ptr-1) == WR_SPI_INT_RECEIVE_ALL)) 
     50e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     510:	1e5a      	subs	r2, r3, #1
     512:	7812      	ldrb	r2, [r2, #0]
     514:	b2d2      	uxtb	r2, r2
     516:	2aca      	cmp	r2, #202	; 0xca
     518:	d004      	beq.n	524 <STACK_SIZE+0x124>
     51a:	3b01      	subs	r3, #1
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	b2db      	uxtb	r3, r3
     520:	2bcc      	cmp	r3, #204	; 0xcc
     522:	d1c0      	bne.n	4a6 <STACK_SIZE+0xa6>
						module->remaining_tx_buffer_length =   LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_tx_buffer_length);
     524:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     526:	330f      	adds	r3, #15
     528:	b29b      	uxth	r3, r3
     52a:	86a3      	strh	r3, [r4, #52]	; 0x34
						module->remaining_rx_buffer_length =  LENGTH_SET_ALL_COMMAND - (INITIAL_LENGTH - module->remaining_rx_buffer_length);
     52c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     52e:	330f      	adds	r3, #15
     530:	b29b      	uxth	r3, r3
     532:	8623      	strh	r3, [r4, #48]	; 0x30
     534:	e7b7      	b.n	4a6 <STACK_SIZE+0xa6>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     536:	077b      	lsls	r3, r7, #29
     538:	d400      	bmi.n	53c <STACK_SIZE+0x13c>
     53a:	e760      	b.n	3fe <_spi_interrupt_handler+0xa2>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     53c:	0020      	movs	r0, r4
     53e:	6963      	ldr	r3, [r4, #20]
     540:	4798      	blx	r3
     542:	e75c      	b.n	3fe <_spi_interrupt_handler+0xa2>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     544:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     546:	2b01      	cmp	r3, #1
     548:	d000      	beq.n	54c <STACK_SIZE+0x14c>
     54a:	e771      	b.n	430 <STACK_SIZE+0x30>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     54c:	79e3      	ldrb	r3, [r4, #7]
     54e:	2b00      	cmp	r3, #0
     550:	d000      	beq.n	554 <STACK_SIZE+0x154>
     552:	e76d      	b.n	430 <STACK_SIZE+0x30>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     554:	3302      	adds	r3, #2
     556:	7533      	strb	r3, [r6, #20]
			module->dir    = SPI_DIRECTION_IDLE;
     558:	3301      	adds	r3, #1
     55a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     55c:	2200      	movs	r2, #0
     55e:	3335      	adds	r3, #53	; 0x35
     560:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     562:	07fb      	lsls	r3, r7, #31
     564:	d400      	bmi.n	568 <STACK_SIZE+0x168>
     566:	e758      	b.n	41a <STACK_SIZE+0x1a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     568:	0020      	movs	r0, r4
     56a:	68e3      	ldr	r3, [r4, #12]
     56c:	4798      	blx	r3
     56e:	e754      	b.n	41a <STACK_SIZE+0x1a>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     570:	0020      	movs	r0, r4
     572:	6a23      	ldr	r3, [r4, #32]
     574:	4798      	blx	r3
     576:	e75b      	b.n	430 <STACK_SIZE+0x30>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     578:	2380      	movs	r3, #128	; 0x80
     57a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     57c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     57e:	067b      	lsls	r3, r7, #25
     580:	d400      	bmi.n	584 <STACK_SIZE+0x184>
     582:	e759      	b.n	438 <STACK_SIZE+0x38>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     584:	6a63      	ldr	r3, [r4, #36]	; 0x24
     586:	0020      	movs	r0, r4
     588:	4798      	blx	r3
}
     58a:	e755      	b.n	438 <STACK_SIZE+0x38>
     58c:	2000020c 	.word	0x2000020c
     590:	20000090 	.word	0x20000090
     594:	200000e8 	.word	0x200000e8

00000598 <spi_main_loop>:
#include "super_servo_control.h"



void spi_main_loop()
{
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	b084      	sub	sp, #16
	
	volatile enum status_code error_code = 0x10;
     59c:	2210      	movs	r2, #16
     59e:	230f      	movs	r3, #15
     5a0:	446b      	add	r3, sp
     5a2:	701a      	strb	r2, [r3, #0]
	//static  uint8_t job_done  = FAILURE;
	uint8_t i    = 0;
	uint8_t rw   = 0;
	uint8_t mode = 0;
	static bool test = true;
	transmit_value[0] = 0x88;
     5a4:	4b48      	ldr	r3, [pc, #288]	; (6c8 <spi_main_loop+0x130>)
     5a6:	3278      	adds	r2, #120	; 0x78
     5a8:	701a      	strb	r2, [r3, #0]
	transmit_value[1] = 0xAA;
     5aa:	3222      	adds	r2, #34	; 0x22
     5ac:	705a      	strb	r2, [r3, #1]
	transmit_value[2] = 0xBB;
     5ae:	3211      	adds	r2, #17
     5b0:	709a      	strb	r2, [r3, #2]
	transmit_value[3] = 0xCC;
     5b2:	3211      	adds	r2, #17
     5b4:	70da      	strb	r2, [r3, #3]
		update_LEDS_single(LED3_NO,0x00);
		delay_cycles_ms(100);
	}
	*/
	
	if(transfer_complete_spi_slave == true)
     5b6:	4b45      	ldr	r3, [pc, #276]	; (6cc <spi_main_loop+0x134>)
     5b8:	781b      	ldrb	r3, [r3, #0]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d013      	beq.n	5e6 <spi_main_loop+0x4e>
		if(count_buffer == 500)
		{
			count_buffer = 0;
		}
		*/
		rw   = received_value[0] & MASK_RW ;
     5be:	4a44      	ldr	r2, [pc, #272]	; (6d0 <spi_main_loop+0x138>)
     5c0:	7813      	ldrb	r3, [r2, #0]
		mode = received_value[0] & MASK_MODE;
     5c2:	7812      	ldrb	r2, [r2, #0]
     5c4:	b2d2      	uxtb	r2, r2
		if(rw == WRITE_SPI)
     5c6:	213f      	movs	r1, #63	; 0x3f
     5c8:	438b      	bics	r3, r1
     5ca:	2bc0      	cmp	r3, #192	; 0xc0
     5cc:	d00d      	beq.n	5ea <spi_main_loop+0x52>
		}
		else if(rw == READ_SPI)
		{
			
		}
		transfer_complete_spi_slave = false;
     5ce:	2200      	movs	r2, #0
     5d0:	4b3e      	ldr	r3, [pc, #248]	; (6cc <spi_main_loop+0x134>)
     5d2:	701a      	strb	r2, [r3, #0]
		error_code = spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     5d4:	2304      	movs	r3, #4
     5d6:	4a3e      	ldr	r2, [pc, #248]	; (6d0 <spi_main_loop+0x138>)
     5d8:	493e      	ldr	r1, [pc, #248]	; (6d4 <spi_main_loop+0x13c>)
     5da:	483f      	ldr	r0, [pc, #252]	; (6d8 <spi_main_loop+0x140>)
     5dc:	4c3f      	ldr	r4, [pc, #252]	; (6dc <spi_main_loop+0x144>)
     5de:	47a0      	blx	r4
     5e0:	230f      	movs	r3, #15
     5e2:	446b      	add	r3, sp
     5e4:	7018      	strb	r0, [r3, #0]
			
	}
	
}		
     5e6:	b004      	add	sp, #16
     5e8:	bd70      	pop	{r4, r5, r6, pc}
		mode = received_value[0] & MASK_MODE;
     5ea:	3b81      	subs	r3, #129	; 0x81
     5ec:	401a      	ands	r2, r3
			switch(mode)
     5ee:	b2d3      	uxtb	r3, r2
     5f0:	2b0b      	cmp	r3, #11
     5f2:	d8ec      	bhi.n	5ce <spi_main_loop+0x36>
     5f4:	0092      	lsls	r2, r2, #2
     5f6:	4b3a      	ldr	r3, [pc, #232]	; (6e0 <spi_main_loop+0x148>)
     5f8:	589b      	ldr	r3, [r3, r2]
     5fa:	469f      	mov	pc, r3
					update_LEDS_single(LED1_NO,received_value[1]);
     5fc:	4b34      	ldr	r3, [pc, #208]	; (6d0 <spi_main_loop+0x138>)
     5fe:	7859      	ldrb	r1, [r3, #1]
     600:	b2c9      	uxtb	r1, r1
     602:	2031      	movs	r0, #49	; 0x31
     604:	4b37      	ldr	r3, [pc, #220]	; (6e4 <spi_main_loop+0x14c>)
     606:	4798      	blx	r3
					break;
     608:	e7e1      	b.n	5ce <spi_main_loop+0x36>
					update_LEDS_single(LED2_NO,received_value[1]);
     60a:	4b31      	ldr	r3, [pc, #196]	; (6d0 <spi_main_loop+0x138>)
     60c:	7859      	ldrb	r1, [r3, #1]
     60e:	b2c9      	uxtb	r1, r1
     610:	2032      	movs	r0, #50	; 0x32
     612:	4b34      	ldr	r3, [pc, #208]	; (6e4 <spi_main_loop+0x14c>)
     614:	4798      	blx	r3
					break;
     616:	e7da      	b.n	5ce <spi_main_loop+0x36>
				    update_ORB_single(RGB1_NO , received_value[1] , received_value[2] , received_value[3]);
     618:	4b2d      	ldr	r3, [pc, #180]	; (6d0 <spi_main_loop+0x138>)
     61a:	7859      	ldrb	r1, [r3, #1]
     61c:	b2c9      	uxtb	r1, r1
     61e:	789a      	ldrb	r2, [r3, #2]
     620:	b2d2      	uxtb	r2, r2
     622:	78db      	ldrb	r3, [r3, #3]
     624:	b2db      	uxtb	r3, r3
     626:	2031      	movs	r0, #49	; 0x31
     628:	4c2f      	ldr	r4, [pc, #188]	; (6e8 <spi_main_loop+0x150>)
     62a:	47a0      	blx	r4
					break;
     62c:	e7cf      	b.n	5ce <spi_main_loop+0x36>
					update_ORB_single(RGB2_NO , received_value[1] , received_value[2] , received_value[3]);
     62e:	4b28      	ldr	r3, [pc, #160]	; (6d0 <spi_main_loop+0x138>)
     630:	7859      	ldrb	r1, [r3, #1]
     632:	b2c9      	uxtb	r1, r1
     634:	789a      	ldrb	r2, [r3, #2]
     636:	b2d2      	uxtb	r2, r2
     638:	78db      	ldrb	r3, [r3, #3]
     63a:	b2db      	uxtb	r3, r3
     63c:	2032      	movs	r0, #50	; 0x32
     63e:	4c2a      	ldr	r4, [pc, #168]	; (6e8 <spi_main_loop+0x150>)
     640:	47a0      	blx	r4
					break;
     642:	e7c4      	b.n	5ce <spi_main_loop+0x36>
					update_super_servo_single(SERVO1_NO,received_value[1]);
     644:	4b22      	ldr	r3, [pc, #136]	; (6d0 <spi_main_loop+0x138>)
     646:	7859      	ldrb	r1, [r3, #1]
     648:	b2c9      	uxtb	r1, r1
     64a:	2031      	movs	r0, #49	; 0x31
     64c:	4b27      	ldr	r3, [pc, #156]	; (6ec <spi_main_loop+0x154>)
     64e:	4798      	blx	r3
					break;
     650:	e7bd      	b.n	5ce <spi_main_loop+0x36>
					update_super_servo_single(SERVO2_NO,received_value[1]);
     652:	4b1f      	ldr	r3, [pc, #124]	; (6d0 <spi_main_loop+0x138>)
     654:	7859      	ldrb	r1, [r3, #1]
     656:	b2c9      	uxtb	r1, r1
     658:	2032      	movs	r0, #50	; 0x32
     65a:	4b24      	ldr	r3, [pc, #144]	; (6ec <spi_main_loop+0x154>)
     65c:	4798      	blx	r3
					break;
     65e:	e7b6      	b.n	5ce <spi_main_loop+0x36>
					update_super_servo_single(SERVO3_NO,received_value[1]);
     660:	4b1b      	ldr	r3, [pc, #108]	; (6d0 <spi_main_loop+0x138>)
     662:	7859      	ldrb	r1, [r3, #1]
     664:	b2c9      	uxtb	r1, r1
     666:	2033      	movs	r0, #51	; 0x33
     668:	4b20      	ldr	r3, [pc, #128]	; (6ec <spi_main_loop+0x154>)
     66a:	4798      	blx	r3
					break;
     66c:	e7af      	b.n	5ce <spi_main_loop+0x36>
					update_super_servo_single(SERVO4_NO,received_value[1]);
     66e:	4b18      	ldr	r3, [pc, #96]	; (6d0 <spi_main_loop+0x138>)
     670:	7859      	ldrb	r1, [r3, #1]
     672:	b2c9      	uxtb	r1, r1
     674:	2034      	movs	r0, #52	; 0x34
     676:	4b1d      	ldr	r3, [pc, #116]	; (6ec <spi_main_loop+0x154>)
     678:	4798      	blx	r3
					break;
     67a:	e7a8      	b.n	5ce <spi_main_loop+0x36>
					update_ORB(received_value[1],received_value[2] ,received_value[3] ,received_value[4] ,received_value[5] ,received_value[6]  );
     67c:	4c14      	ldr	r4, [pc, #80]	; (6d0 <spi_main_loop+0x138>)
     67e:	7860      	ldrb	r0, [r4, #1]
     680:	b2c0      	uxtb	r0, r0
     682:	78a1      	ldrb	r1, [r4, #2]
     684:	b2c9      	uxtb	r1, r1
     686:	78e2      	ldrb	r2, [r4, #3]
     688:	b2d2      	uxtb	r2, r2
     68a:	7923      	ldrb	r3, [r4, #4]
     68c:	b2db      	uxtb	r3, r3
     68e:	7965      	ldrb	r5, [r4, #5]
     690:	79a6      	ldrb	r6, [r4, #6]
     692:	9601      	str	r6, [sp, #4]
     694:	9500      	str	r5, [sp, #0]
     696:	4d16      	ldr	r5, [pc, #88]	; (6f0 <spi_main_loop+0x158>)
     698:	47a8      	blx	r5
					update_LEDS(received_value[7],received_value[8]);
     69a:	79e0      	ldrb	r0, [r4, #7]
     69c:	b2c0      	uxtb	r0, r0
     69e:	7a21      	ldrb	r1, [r4, #8]
     6a0:	b2c9      	uxtb	r1, r1
     6a2:	4b14      	ldr	r3, [pc, #80]	; (6f4 <spi_main_loop+0x15c>)
     6a4:	4798      	blx	r3
					update_super_servo(received_value[11] , received_value[12] , received_value[13], received_value[14]);
     6a6:	7ae0      	ldrb	r0, [r4, #11]
     6a8:	b2c0      	uxtb	r0, r0
     6aa:	7b21      	ldrb	r1, [r4, #12]
     6ac:	b2c9      	uxtb	r1, r1
     6ae:	7b62      	ldrb	r2, [r4, #13]
     6b0:	b2d2      	uxtb	r2, r2
     6b2:	7ba3      	ldrb	r3, [r4, #14]
     6b4:	b2db      	uxtb	r3, r3
     6b6:	4c10      	ldr	r4, [pc, #64]	; (6f8 <spi_main_loop+0x160>)
     6b8:	47a0      	blx	r4
					break;
     6ba:	e788      	b.n	5ce <spi_main_loop+0x36>
					switch_off_LEDS();
     6bc:	4b0f      	ldr	r3, [pc, #60]	; (6fc <spi_main_loop+0x164>)
     6be:	4798      	blx	r3
					switch_off_ORB();
     6c0:	4b0f      	ldr	r3, [pc, #60]	; (700 <spi_main_loop+0x168>)
     6c2:	4798      	blx	r3
					break;
     6c4:	e783      	b.n	5ce <spi_main_loop+0x36>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	200002a8 	.word	0x200002a8
     6cc:	200000df 	.word	0x200000df
     6d0:	20000290 	.word	0x20000290
     6d4:	200002a4 	.word	0x200002a4
     6d8:	200000ec 	.word	0x200000ec
     6dc:	00000319 	.word	0x00000319
     6e0:	00003524 	.word	0x00003524
     6e4:	00000fed 	.word	0x00000fed
     6e8:	000010b9 	.word	0x000010b9
     6ec:	00001485 	.word	0x00001485
     6f0:	0000106d 	.word	0x0000106d
     6f4:	00000fa9 	.word	0x00000fa9
     6f8:	00001385 	.word	0x00001385
     6fc:	00001039 	.word	0x00001039
     700:	0000110d 	.word	0x0000110d

00000704 <spi_slave_callback>:
	spi_enable(&spi_slave_instance);
}

static void spi_slave_callback(struct spi_module *const module)
{
	transfer_complete_spi_slave = true;
     704:	2201      	movs	r2, #1
     706:	4b01      	ldr	r3, [pc, #4]	; (70c <spi_slave_callback+0x8>)
     708:	701a      	strb	r2, [r3, #0]
	//spi_transceive_buffer_job(&spi_slave_instance, transmit_value, received_value,SPI_LENGTH);
}
     70a:	4770      	bx	lr
     70c:	200000df 	.word	0x200000df

00000710 <configure_spi_slave>:
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	b08e      	sub	sp, #56	; 0x38
	config->data_order       = SPI_DATA_ORDER_MSB;
     714:	2400      	movs	r4, #0
     716:	9401      	str	r4, [sp, #4]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     718:	23c0      	movs	r3, #192	; 0xc0
     71a:	039b      	lsls	r3, r3, #14
     71c:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     71e:	466b      	mov	r3, sp
     720:	741c      	strb	r4, [r3, #16]
	config->run_in_standby   = false;
     722:	745c      	strb	r4, [r3, #17]
	config->receiver_enable  = true;
     724:	2501      	movs	r5, #1
     726:	749d      	strb	r5, [r3, #18]
	config->select_slave_low_detect_enable= true;
     728:	74dd      	strb	r5, [r3, #19]
	config->master_slave_select_enable= false;
     72a:	751c      	strb	r4, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
     72c:	2324      	movs	r3, #36	; 0x24
     72e:	466a      	mov	r2, sp
     730:	54d4      	strb	r4, [r2, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     732:	220c      	movs	r2, #12
     734:	2100      	movs	r1, #0
     736:	a806      	add	r0, sp, #24
     738:	4b15      	ldr	r3, [pc, #84]	; (790 <configure_spi_slave+0x80>)
     73a:	4798      	blx	r3
	config_spi_slave.transfer_mode = SPI_TRANSFER_MODE_3;
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	059b      	lsls	r3, r3, #22
     740:	9302      	str	r3, [sp, #8]
	config_spi_slave.mode = SPI_MODE_SLAVE;
     742:	466b      	mov	r3, sp
     744:	701c      	strb	r4, [r3, #0]
	config_spi_slave.mode_specific.slave.preload_enable = true;
     746:	2320      	movs	r3, #32
     748:	466a      	mov	r2, sp
     74a:	54d5      	strb	r5, [r2, r3]
	config_spi_slave.mode_specific.slave.frame_format = SPI_FRAME_FORMAT_SPI_FRAME;
     74c:	9406      	str	r4, [sp, #24]
	config_spi_slave.pinmux_pad0 = SPI_SLAVE_PINMUX_PAD0;
     74e:	4b11      	ldr	r3, [pc, #68]	; (794 <configure_spi_slave+0x84>)
     750:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_slave.pinmux_pad1 = SPI_SLAVE_PINMUX_PAD1;
     752:	4b11      	ldr	r3, [pc, #68]	; (798 <configure_spi_slave+0x88>)
     754:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_slave.pinmux_pad2 = SPI_SLAVE_PINMUX_PAD2;
     756:	4b11      	ldr	r3, [pc, #68]	; (79c <configure_spi_slave+0x8c>)
     758:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_slave.pinmux_pad3 = SPI_SLAVE_PINMUX_PAD3;
     75a:	4b11      	ldr	r3, [pc, #68]	; (7a0 <configure_spi_slave+0x90>)
     75c:	930d      	str	r3, [sp, #52]	; 0x34
	spi_init(&spi_slave_instance,  SLAVE_SPI_MODULE, &config_spi_slave);
     75e:	4e11      	ldr	r6, [pc, #68]	; (7a4 <configure_spi_slave+0x94>)
     760:	4911      	ldr	r1, [pc, #68]	; (7a8 <configure_spi_slave+0x98>)
     762:	0030      	movs	r0, r6
     764:	4b11      	ldr	r3, [pc, #68]	; (7ac <configure_spi_slave+0x9c>)
     766:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     768:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     76a:	0020      	movs	r0, r4
     76c:	4b10      	ldr	r3, [pc, #64]	; (7b0 <configure_spi_slave+0xa0>)
     76e:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     770:	231f      	movs	r3, #31
     772:	4018      	ands	r0, r3
     774:	4085      	lsls	r5, r0
     776:	4b0f      	ldr	r3, [pc, #60]	; (7b4 <configure_spi_slave+0xa4>)
     778:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     77a:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     77c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     77e:	2b00      	cmp	r3, #0
     780:	d1fc      	bne.n	77c <configure_spi_slave+0x6c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     782:	6823      	ldr	r3, [r4, #0]
     784:	2202      	movs	r2, #2
     786:	4313      	orrs	r3, r2
     788:	6023      	str	r3, [r4, #0]
}
     78a:	b00e      	add	sp, #56	; 0x38
     78c:	bd70      	pop	{r4, r5, r6, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	0000342f 	.word	0x0000342f
     794:	00160002 	.word	0x00160002
     798:	00170002 	.word	0x00170002
     79c:	00180002 	.word	0x00180002
     7a0:	00190002 	.word	0x00190002
     7a4:	200000ec 	.word	0x200000ec
     7a8:	42000c00 	.word	0x42000c00
     7ac:	000000ed 	.word	0x000000ed
     7b0:	00001ead 	.word	0x00001ead
     7b4:	e000e100 	.word	0xe000e100

000007b8 <configure_spi_slave_callbacks>:

void configure_spi_slave_callbacks(void)
{
     7b8:	b510      	push	{r4, lr}
	spi_register_callback(&spi_slave_instance, spi_slave_callback,SPI_CALLBACK_BUFFER_TRANSCEIVED);
     7ba:	4c06      	ldr	r4, [pc, #24]	; (7d4 <configure_spi_slave_callbacks+0x1c>)
     7bc:	2202      	movs	r2, #2
     7be:	4906      	ldr	r1, [pc, #24]	; (7d8 <configure_spi_slave_callbacks+0x20>)
     7c0:	0020      	movs	r0, r4
     7c2:	4b06      	ldr	r3, [pc, #24]	; (7dc <configure_spi_slave_callbacks+0x24>)
     7c4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     7c6:	2237      	movs	r2, #55	; 0x37
     7c8:	5ca3      	ldrb	r3, [r4, r2]
     7ca:	2104      	movs	r1, #4
     7cc:	430b      	orrs	r3, r1
     7ce:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_slave_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
     7d0:	bd10      	pop	{r4, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	200000ec 	.word	0x200000ec
     7d8:	00000705 	.word	0x00000705
     7dc:	00000301 	.word	0x00000301

000007e0 <spi_slave_init>:

void spi_slave_init()
{
     7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e2:	b083      	sub	sp, #12
	volatile enum status_code error_code = 0x10;
     7e4:	2210      	movs	r2, #16
     7e6:	466b      	mov	r3, sp
     7e8:	71da      	strb	r2, [r3, #7]
	configure_spi_slave();
     7ea:	4b10      	ldr	r3, [pc, #64]	; (82c <spi_slave_init+0x4c>)
     7ec:	4798      	blx	r3
	configure_spi_slave_callbacks();
     7ee:	4b10      	ldr	r3, [pc, #64]	; (830 <spi_slave_init+0x50>)
     7f0:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     7f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     7f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     7f8:	2200      	movs	r2, #0
     7fa:	4b0e      	ldr	r3, [pc, #56]	; (834 <spi_slave_init+0x54>)
     7fc:	701a      	strb	r2, [r3, #0]
	do
	{
	error_code = spi_transceive_buffer_job(&spi_slave_instance, sensor_outputs, received_value,SPI_LENGTH);
     7fe:	4e0e      	ldr	r6, [pc, #56]	; (838 <spi_slave_init+0x58>)
     800:	4d0e      	ldr	r5, [pc, #56]	; (83c <spi_slave_init+0x5c>)
     802:	4c0f      	ldr	r4, [pc, #60]	; (840 <spi_slave_init+0x60>)
     804:	2304      	movs	r3, #4
     806:	0032      	movs	r2, r6
     808:	0029      	movs	r1, r5
     80a:	0020      	movs	r0, r4
     80c:	4f0d      	ldr	r7, [pc, #52]	; (844 <spi_slave_init+0x64>)
     80e:	47b8      	blx	r7
     810:	466b      	mov	r3, sp
     812:	71d8      	strb	r0, [r3, #7]
     814:	3307      	adds	r3, #7
	} while (error_code != STATUS_OK );
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2b00      	cmp	r3, #0
     81a:	d1f3      	bne.n	804 <spi_slave_init+0x24>
	cpu_irq_enable();
     81c:	2201      	movs	r2, #1
     81e:	4b05      	ldr	r3, [pc, #20]	; (834 <spi_slave_init+0x54>)
     820:	701a      	strb	r2, [r3, #0]
     822:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     826:	b662      	cpsie	i
	//delay_cycles_ms(2000);
}
     828:	b003      	add	sp, #12
     82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     82c:	00000711 	.word	0x00000711
     830:	000007b9 	.word	0x000007b9
     834:	2000000c 	.word	0x2000000c
     838:	20000290 	.word	0x20000290
     83c:	200002a4 	.word	0x200002a4
     840:	200000ec 	.word	0x200000ec
     844:	00000319 	.word	0x00000319

00000848 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     848:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     84a:	2000      	movs	r0, #0
     84c:	4b08      	ldr	r3, [pc, #32]	; (870 <delay_init+0x28>)
     84e:	4798      	blx	r3
     850:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     852:	4c08      	ldr	r4, [pc, #32]	; (874 <delay_init+0x2c>)
     854:	21fa      	movs	r1, #250	; 0xfa
     856:	0089      	lsls	r1, r1, #2
     858:	47a0      	blx	r4
     85a:	4b07      	ldr	r3, [pc, #28]	; (878 <delay_init+0x30>)
     85c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     85e:	4907      	ldr	r1, [pc, #28]	; (87c <delay_init+0x34>)
     860:	0028      	movs	r0, r5
     862:	47a0      	blx	r4
     864:	4b06      	ldr	r3, [pc, #24]	; (880 <delay_init+0x38>)
     866:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     868:	2205      	movs	r2, #5
     86a:	4b06      	ldr	r3, [pc, #24]	; (884 <delay_init+0x3c>)
     86c:	601a      	str	r2, [r3, #0]
}
     86e:	bd70      	pop	{r4, r5, r6, pc}
     870:	00002cc5 	.word	0x00002cc5
     874:	000030d5 	.word	0x000030d5
     878:	20000000 	.word	0x20000000
     87c:	000f4240 	.word	0x000f4240
     880:	20000004 	.word	0x20000004
     884:	e000e010 	.word	0xe000e010

00000888 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     888:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     88a:	2200      	movs	r2, #0
     88c:	2300      	movs	r3, #0
     88e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     890:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     892:	2100      	movs	r1, #0
     894:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     896:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     898:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     89a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     89c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     89e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     8a0:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     8a2:	24c0      	movs	r4, #192	; 0xc0
     8a4:	0164      	lsls	r4, r4, #5
     8a6:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     8a8:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     8aa:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     8ac:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     8ae:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     8b0:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     8b2:	242a      	movs	r4, #42	; 0x2a
     8b4:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     8b6:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     8b8:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     8ba:	3c06      	subs	r4, #6
     8bc:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     8be:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     8c0:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     8c2:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     8c4:	232b      	movs	r3, #43	; 0x2b
     8c6:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     8c8:	3301      	adds	r3, #1
     8ca:	54c1      	strb	r1, [r0, r3]
}
     8cc:	bd10      	pop	{r4, pc}
	...

000008d0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d2:	46d6      	mov	lr, sl
     8d4:	464f      	mov	r7, r9
     8d6:	4646      	mov	r6, r8
     8d8:	b5c0      	push	{r6, r7, lr}
     8da:	b096      	sub	sp, #88	; 0x58
     8dc:	0007      	movs	r7, r0
     8de:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     8e0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8e2:	4ac6      	ldr	r2, [pc, #792]	; (bfc <adc_init+0x32c>)
     8e4:	6a10      	ldr	r0, [r2, #32]
     8e6:	2380      	movs	r3, #128	; 0x80
     8e8:	005b      	lsls	r3, r3, #1
     8ea:	4303      	orrs	r3, r0
     8ec:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8ee:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     8f0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     8f2:	07db      	lsls	r3, r3, #31
     8f4:	d505      	bpl.n	902 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     8f6:	b016      	add	sp, #88	; 0x58
     8f8:	bc1c      	pop	{r2, r3, r4}
     8fa:	4690      	mov	r8, r2
     8fc:	4699      	mov	r9, r3
     8fe:	46a2      	mov	sl, r4
     900:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     902:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     904:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     906:	079b      	lsls	r3, r3, #30
     908:	d4f5      	bmi.n	8f6 <adc_init+0x26>
	module_inst->reference = config->reference;
     90a:	7873      	ldrb	r3, [r6, #1]
     90c:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     90e:	2b00      	cmp	r3, #0
     910:	d104      	bne.n	91c <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     912:	4abb      	ldr	r2, [pc, #748]	; (c00 <adc_init+0x330>)
     914:	6c13      	ldr	r3, [r2, #64]	; 0x40
     916:	2104      	movs	r1, #4
     918:	430b      	orrs	r3, r1
     91a:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     91c:	2300      	movs	r3, #0
     91e:	60bb      	str	r3, [r7, #8]
     920:	60fb      	str	r3, [r7, #12]
     922:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     924:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     926:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     928:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     92a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     92c:	4bb5      	ldr	r3, [pc, #724]	; (c04 <adc_init+0x334>)
     92e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     930:	232a      	movs	r3, #42	; 0x2a
     932:	5cf3      	ldrb	r3, [r6, r3]
     934:	2b00      	cmp	r3, #0
     936:	d105      	bne.n	944 <adc_init+0x74>
     938:	7d33      	ldrb	r3, [r6, #20]
     93a:	2b00      	cmp	r3, #0
     93c:	d102      	bne.n	944 <adc_init+0x74>
		module_inst->software_trigger = true;
     93e:	3301      	adds	r3, #1
     940:	777b      	strb	r3, [r7, #29]
     942:	e001      	b.n	948 <adc_init+0x78>
		module_inst->software_trigger = false;
     944:	2300      	movs	r3, #0
     946:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     948:	683b      	ldr	r3, [r7, #0]
     94a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     94c:	7833      	ldrb	r3, [r6, #0]
     94e:	466a      	mov	r2, sp
     950:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     952:	4669      	mov	r1, sp
     954:	2013      	movs	r0, #19
     956:	4bac      	ldr	r3, [pc, #688]	; (c08 <adc_init+0x338>)
     958:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     95a:	2013      	movs	r0, #19
     95c:	4bab      	ldr	r3, [pc, #684]	; (c0c <adc_init+0x33c>)
     95e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     960:	232c      	movs	r3, #44	; 0x2c
     962:	5cf2      	ldrb	r2, [r6, r3]
     964:	2a00      	cmp	r2, #0
     966:	d054      	beq.n	a12 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     968:	3b01      	subs	r3, #1
     96a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     96c:	7b33      	ldrb	r3, [r6, #12]
     96e:	18eb      	adds	r3, r5, r3
     970:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     972:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     974:	b2c9      	uxtb	r1, r1
     976:	428b      	cmp	r3, r1
     978:	d221      	bcs.n	9be <adc_init+0xee>
     97a:	1952      	adds	r2, r2, r5
     97c:	b2d3      	uxtb	r3, r2
     97e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     980:	4ba3      	ldr	r3, [pc, #652]	; (c10 <adc_init+0x340>)
     982:	469a      	mov	sl, r3
     984:	e003      	b.n	98e <adc_init+0xbe>
			offset++;
     986:	3501      	adds	r5, #1
     988:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     98a:	454d      	cmp	r5, r9
     98c:	d017      	beq.n	9be <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     98e:	240f      	movs	r4, #15
     990:	402c      	ands	r4, r5
     992:	7b33      	ldrb	r3, [r6, #12]
     994:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     996:	2250      	movs	r2, #80	; 0x50
     998:	499e      	ldr	r1, [pc, #632]	; (c14 <adc_init+0x344>)
     99a:	a802      	add	r0, sp, #8
     99c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     99e:	2c09      	cmp	r4, #9
     9a0:	d8f1      	bhi.n	986 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9a2:	00a4      	lsls	r4, r4, #2
     9a4:	ab02      	add	r3, sp, #8
     9a6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9a8:	a901      	add	r1, sp, #4
     9aa:	2300      	movs	r3, #0
     9ac:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9ae:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     9b0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     9b2:	3301      	adds	r3, #1
     9b4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     9b6:	b2c0      	uxtb	r0, r0
     9b8:	4b97      	ldr	r3, [pc, #604]	; (c18 <adc_init+0x348>)
     9ba:	4798      	blx	r3
     9bc:	e7e3      	b.n	986 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     9be:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     9c0:	2250      	movs	r2, #80	; 0x50
     9c2:	4994      	ldr	r1, [pc, #592]	; (c14 <adc_init+0x344>)
     9c4:	a802      	add	r0, sp, #8
     9c6:	4b92      	ldr	r3, [pc, #584]	; (c10 <adc_init+0x340>)
     9c8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     9ca:	2c09      	cmp	r4, #9
     9cc:	d913      	bls.n	9f6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     9ce:	7d73      	ldrb	r3, [r6, #21]
     9d0:	009b      	lsls	r3, r3, #2
     9d2:	b2db      	uxtb	r3, r3
     9d4:	4642      	mov	r2, r8
     9d6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     9d8:	7db3      	ldrb	r3, [r6, #22]
     9da:	01db      	lsls	r3, r3, #7
     9dc:	7872      	ldrb	r2, [r6, #1]
     9de:	4313      	orrs	r3, r2
     9e0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     9e2:	4642      	mov	r2, r8
     9e4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     9e6:	7933      	ldrb	r3, [r6, #4]
     9e8:	2b34      	cmp	r3, #52	; 0x34
     9ea:	d900      	bls.n	9ee <adc_init+0x11e>
     9ec:	e17b      	b.n	ce6 <adc_init+0x416>
     9ee:	009b      	lsls	r3, r3, #2
     9f0:	4a8a      	ldr	r2, [pc, #552]	; (c1c <adc_init+0x34c>)
     9f2:	58d3      	ldr	r3, [r2, r3]
     9f4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9f6:	00a4      	lsls	r4, r4, #2
     9f8:	ab02      	add	r3, sp, #8
     9fa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9fc:	a901      	add	r1, sp, #4
     9fe:	2300      	movs	r3, #0
     a00:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a02:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a04:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a06:	3301      	adds	r3, #1
     a08:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a0a:	b2c0      	uxtb	r0, r0
     a0c:	4b82      	ldr	r3, [pc, #520]	; (c18 <adc_init+0x348>)
     a0e:	4798      	blx	r3
     a10:	e7dd      	b.n	9ce <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     a12:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     a14:	2250      	movs	r2, #80	; 0x50
     a16:	497f      	ldr	r1, [pc, #508]	; (c14 <adc_init+0x344>)
     a18:	a802      	add	r0, sp, #8
     a1a:	4b7d      	ldr	r3, [pc, #500]	; (c10 <adc_init+0x340>)
     a1c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a1e:	2c09      	cmp	r4, #9
     a20:	d915      	bls.n	a4e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     a22:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     a24:	2250      	movs	r2, #80	; 0x50
     a26:	497b      	ldr	r1, [pc, #492]	; (c14 <adc_init+0x344>)
     a28:	a802      	add	r0, sp, #8
     a2a:	4b79      	ldr	r3, [pc, #484]	; (c10 <adc_init+0x340>)
     a2c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a2e:	2c09      	cmp	r4, #9
     a30:	d8cd      	bhi.n	9ce <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a32:	00a4      	lsls	r4, r4, #2
     a34:	ab02      	add	r3, sp, #8
     a36:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a38:	a901      	add	r1, sp, #4
     a3a:	2300      	movs	r3, #0
     a3c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a3e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a40:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a42:	3301      	adds	r3, #1
     a44:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a46:	b2c0      	uxtb	r0, r0
     a48:	4b73      	ldr	r3, [pc, #460]	; (c18 <adc_init+0x348>)
     a4a:	4798      	blx	r3
     a4c:	e7bf      	b.n	9ce <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a4e:	00a4      	lsls	r4, r4, #2
     a50:	ab02      	add	r3, sp, #8
     a52:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a54:	a901      	add	r1, sp, #4
     a56:	2300      	movs	r3, #0
     a58:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a5a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a5c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a5e:	3301      	adds	r3, #1
     a60:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a62:	b2c0      	uxtb	r0, r0
     a64:	4b6c      	ldr	r3, [pc, #432]	; (c18 <adc_init+0x348>)
     a66:	4798      	blx	r3
     a68:	e7db      	b.n	a22 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     a6a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     a6c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     a6e:	2102      	movs	r1, #2
     a70:	e01a      	b.n	aa8 <adc_init+0x1d8>
		adjres = config->divide_result;
     a72:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     a74:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     a76:	2410      	movs	r4, #16
     a78:	e016      	b.n	aa8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     a7a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     a7c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     a7e:	2101      	movs	r1, #1
     a80:	e012      	b.n	aa8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     a82:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     a84:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     a86:	2100      	movs	r1, #0
     a88:	e00e      	b.n	aa8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a8a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     a8c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     a8e:	2100      	movs	r1, #0
     a90:	e00a      	b.n	aa8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a92:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     a94:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     a96:	2100      	movs	r1, #0
     a98:	e006      	b.n	aa8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     a9a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     a9c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     a9e:	2100      	movs	r1, #0
     aa0:	e002      	b.n	aa8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     aa2:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     aa4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     aa6:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     aa8:	0109      	lsls	r1, r1, #4
     aaa:	2270      	movs	r2, #112	; 0x70
     aac:	400a      	ands	r2, r1
     aae:	4313      	orrs	r3, r2
     ab0:	4642      	mov	r2, r8
     ab2:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     ab4:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     ab6:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     ab8:	2b3f      	cmp	r3, #63	; 0x3f
     aba:	d900      	bls.n	abe <adc_init+0x1ee>
     abc:	e71b      	b.n	8f6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     abe:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ac0:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ac2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     ac4:	b25b      	sxtb	r3, r3
     ac6:	2b00      	cmp	r3, #0
     ac8:	dbfb      	blt.n	ac2 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     aca:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     acc:	8872      	ldrh	r2, [r6, #2]
     ace:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     ad0:	2224      	movs	r2, #36	; 0x24
     ad2:	5cb2      	ldrb	r2, [r6, r2]
     ad4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     ad6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     ad8:	7d32      	ldrb	r2, [r6, #20]
     ada:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     adc:	4313      	orrs	r3, r2
     ade:	7cb2      	ldrb	r2, [r6, #18]
     ae0:	0052      	lsls	r2, r2, #1
     ae2:	4313      	orrs	r3, r2
     ae4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     ae6:	4642      	mov	r2, r8
     ae8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     aea:	7e33      	ldrb	r3, [r6, #24]
     aec:	2b00      	cmp	r3, #0
     aee:	d020      	beq.n	b32 <adc_init+0x262>
		switch (resolution) {
     af0:	2c10      	cmp	r4, #16
     af2:	d100      	bne.n	af6 <adc_init+0x226>
     af4:	e0d9      	b.n	caa <adc_init+0x3da>
     af6:	d800      	bhi.n	afa <adc_init+0x22a>
     af8:	e098      	b.n	c2c <adc_init+0x35c>
     afa:	2c20      	cmp	r4, #32
     afc:	d100      	bne.n	b00 <adc_init+0x230>
     afe:	e0b6      	b.n	c6e <adc_init+0x39e>
     b00:	2c30      	cmp	r4, #48	; 0x30
     b02:	d116      	bne.n	b32 <adc_init+0x262>
			if (config->differential_mode &&
     b04:	7cf2      	ldrb	r2, [r6, #19]
     b06:	2a00      	cmp	r2, #0
     b08:	d00a      	beq.n	b20 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     b0a:	69f2      	ldr	r2, [r6, #28]
     b0c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     b0e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b10:	2aff      	cmp	r2, #255	; 0xff
     b12:	d900      	bls.n	b16 <adc_init+0x246>
     b14:	e6ef      	b.n	8f6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     b16:	6a32      	ldr	r2, [r6, #32]
     b18:	3280      	adds	r2, #128	; 0x80
     b1a:	2aff      	cmp	r2, #255	; 0xff
     b1c:	d900      	bls.n	b20 <adc_init+0x250>
     b1e:	e6ea      	b.n	8f6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     b20:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     b22:	69f2      	ldr	r2, [r6, #28]
     b24:	2aff      	cmp	r2, #255	; 0xff
     b26:	dd00      	ble.n	b2a <adc_init+0x25a>
     b28:	e6e5      	b.n	8f6 <adc_init+0x26>
     b2a:	6a32      	ldr	r2, [r6, #32]
     b2c:	2aff      	cmp	r2, #255	; 0xff
     b2e:	dd00      	ble.n	b32 <adc_init+0x262>
     b30:	e6e1      	b.n	8f6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     b32:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b34:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     b36:	b252      	sxtb	r2, r2
     b38:	2a00      	cmp	r2, #0
     b3a:	dbfb      	blt.n	b34 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     b3c:	4642      	mov	r2, r8
     b3e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     b40:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b42:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b44:	b25b      	sxtb	r3, r3
     b46:	2b00      	cmp	r3, #0
     b48:	dbfb      	blt.n	b42 <adc_init+0x272>
	adc_module->WINLT.reg =
     b4a:	8bb3      	ldrh	r3, [r6, #28]
     b4c:	4642      	mov	r2, r8
     b4e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     b50:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b52:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b54:	b25b      	sxtb	r3, r3
     b56:	2b00      	cmp	r3, #0
     b58:	dbfb      	blt.n	b52 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     b5a:	8c33      	ldrh	r3, [r6, #32]
     b5c:	4642      	mov	r2, r8
     b5e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     b60:	232c      	movs	r3, #44	; 0x2c
     b62:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     b64:	2b00      	cmp	r3, #0
     b66:	d005      	beq.n	b74 <adc_init+0x2a4>
		inputs_to_scan--;
     b68:	3b01      	subs	r3, #1
     b6a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     b6c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     b6e:	2b0f      	cmp	r3, #15
     b70:	d900      	bls.n	b74 <adc_init+0x2a4>
     b72:	e6c0      	b.n	8f6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     b74:	222b      	movs	r2, #43	; 0x2b
     b76:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     b78:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     b7a:	290f      	cmp	r1, #15
     b7c:	d900      	bls.n	b80 <adc_init+0x2b0>
     b7e:	e6ba      	b.n	8f6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     b80:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b82:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     b84:	b252      	sxtb	r2, r2
     b86:	2a00      	cmp	r2, #0
     b88:	dbfb      	blt.n	b82 <adc_init+0x2b2>
			config->negative_input |
     b8a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     b8c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     b8e:	4302      	orrs	r2, r0
     b90:	68b0      	ldr	r0, [r6, #8]
     b92:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     b94:	0509      	lsls	r1, r1, #20
			config->negative_input |
     b96:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     b98:	041b      	lsls	r3, r3, #16
			config->negative_input |
     b9a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     b9c:	4642      	mov	r2, r8
     b9e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     ba0:	232a      	movs	r3, #42	; 0x2a
     ba2:	5cf3      	ldrb	r3, [r6, r3]
     ba4:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     ba6:	230f      	movs	r3, #15
     ba8:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     baa:	3315      	adds	r3, #21
     bac:	5cf3      	ldrb	r3, [r6, r3]
     bae:	2b00      	cmp	r3, #0
     bb0:	d012      	beq.n	bd8 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     bb2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     bb4:	4a1a      	ldr	r2, [pc, #104]	; (c20 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     bb6:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     bb8:	4293      	cmp	r3, r2
     bba:	d900      	bls.n	bbe <adc_init+0x2ee>
     bbc:	e69b      	b.n	8f6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     bbe:	4642      	mov	r2, r8
     bc0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     bc2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     bc4:	2380      	movs	r3, #128	; 0x80
     bc6:	011b      	lsls	r3, r3, #4
     bc8:	18d3      	adds	r3, r2, r3
     bca:	4915      	ldr	r1, [pc, #84]	; (c20 <adc_init+0x350>)
     bcc:	b29b      	uxth	r3, r3
     bce:	428b      	cmp	r3, r1
     bd0:	d900      	bls.n	bd4 <adc_init+0x304>
     bd2:	e690      	b.n	8f6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     bd4:	4643      	mov	r3, r8
     bd6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     bd8:	4b12      	ldr	r3, [pc, #72]	; (c24 <adc_init+0x354>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	015b      	lsls	r3, r3, #5
     bde:	22e0      	movs	r2, #224	; 0xe0
     be0:	00d2      	lsls	r2, r2, #3
     be2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     be4:	4a10      	ldr	r2, [pc, #64]	; (c28 <adc_init+0x358>)
     be6:	6851      	ldr	r1, [r2, #4]
     be8:	0149      	lsls	r1, r1, #5
     bea:	6812      	ldr	r2, [r2, #0]
     bec:	0ed2      	lsrs	r2, r2, #27
     bee:	430a      	orrs	r2, r1
     bf0:	b2d2      	uxtb	r2, r2
			) |
     bf2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     bf4:	4642      	mov	r2, r8
     bf6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     bf8:	2000      	movs	r0, #0
     bfa:	e67c      	b.n	8f6 <adc_init+0x26>
     bfc:	40000400 	.word	0x40000400
     c00:	40000800 	.word	0x40000800
     c04:	2000015c 	.word	0x2000015c
     c08:	00002ddd 	.word	0x00002ddd
     c0c:	00002d51 	.word	0x00002d51
     c10:	0000341d 	.word	0x0000341d
     c14:	00003628 	.word	0x00003628
     c18:	00002ed5 	.word	0x00002ed5
     c1c:	00003554 	.word	0x00003554
     c20:	00000fff 	.word	0x00000fff
     c24:	00806024 	.word	0x00806024
     c28:	00806020 	.word	0x00806020
		switch (resolution) {
     c2c:	2c00      	cmp	r4, #0
     c2e:	d000      	beq.n	c32 <adc_init+0x362>
     c30:	e77f      	b.n	b32 <adc_init+0x262>
			if (config->differential_mode &&
     c32:	7cf2      	ldrb	r2, [r6, #19]
     c34:	2a00      	cmp	r2, #0
     c36:	d00f      	beq.n	c58 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     c38:	69f2      	ldr	r2, [r6, #28]
     c3a:	2180      	movs	r1, #128	; 0x80
     c3c:	0109      	lsls	r1, r1, #4
     c3e:	468c      	mov	ip, r1
     c40:	4462      	add	r2, ip
			if (config->differential_mode &&
     c42:	492a      	ldr	r1, [pc, #168]	; (cec <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     c44:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c46:	428a      	cmp	r2, r1
     c48:	d900      	bls.n	c4c <adc_init+0x37c>
     c4a:	e654      	b.n	8f6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     c4c:	6a32      	ldr	r2, [r6, #32]
     c4e:	4462      	add	r2, ip
     c50:	4926      	ldr	r1, [pc, #152]	; (cec <adc_init+0x41c>)
     c52:	428a      	cmp	r2, r1
     c54:	d900      	bls.n	c58 <adc_init+0x388>
     c56:	e64e      	b.n	8f6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     c58:	4a24      	ldr	r2, [pc, #144]	; (cec <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     c5a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     c5c:	69f1      	ldr	r1, [r6, #28]
     c5e:	4291      	cmp	r1, r2
     c60:	dd00      	ble.n	c64 <adc_init+0x394>
     c62:	e648      	b.n	8f6 <adc_init+0x26>
     c64:	6a31      	ldr	r1, [r6, #32]
     c66:	4291      	cmp	r1, r2
     c68:	dd00      	ble.n	c6c <adc_init+0x39c>
     c6a:	e644      	b.n	8f6 <adc_init+0x26>
     c6c:	e761      	b.n	b32 <adc_init+0x262>
			if (config->differential_mode &&
     c6e:	7cf2      	ldrb	r2, [r6, #19]
     c70:	2a00      	cmp	r2, #0
     c72:	d00f      	beq.n	c94 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     c74:	69f2      	ldr	r2, [r6, #28]
     c76:	2180      	movs	r1, #128	; 0x80
     c78:	0089      	lsls	r1, r1, #2
     c7a:	468c      	mov	ip, r1
     c7c:	4462      	add	r2, ip
			if (config->differential_mode &&
     c7e:	491c      	ldr	r1, [pc, #112]	; (cf0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     c80:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c82:	428a      	cmp	r2, r1
     c84:	d900      	bls.n	c88 <adc_init+0x3b8>
     c86:	e636      	b.n	8f6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     c88:	6a32      	ldr	r2, [r6, #32]
     c8a:	4462      	add	r2, ip
     c8c:	4918      	ldr	r1, [pc, #96]	; (cf0 <adc_init+0x420>)
     c8e:	428a      	cmp	r2, r1
     c90:	d900      	bls.n	c94 <adc_init+0x3c4>
     c92:	e630      	b.n	8f6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     c94:	4a16      	ldr	r2, [pc, #88]	; (cf0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     c96:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     c98:	69f1      	ldr	r1, [r6, #28]
     c9a:	4291      	cmp	r1, r2
     c9c:	dd00      	ble.n	ca0 <adc_init+0x3d0>
     c9e:	e62a      	b.n	8f6 <adc_init+0x26>
     ca0:	6a31      	ldr	r1, [r6, #32]
     ca2:	4291      	cmp	r1, r2
     ca4:	dd00      	ble.n	ca8 <adc_init+0x3d8>
     ca6:	e626      	b.n	8f6 <adc_init+0x26>
     ca8:	e743      	b.n	b32 <adc_init+0x262>
			if (config->differential_mode &&
     caa:	7cf2      	ldrb	r2, [r6, #19]
     cac:	2a00      	cmp	r2, #0
     cae:	d00f      	beq.n	cd0 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     cb0:	69f2      	ldr	r2, [r6, #28]
     cb2:	2180      	movs	r1, #128	; 0x80
     cb4:	0209      	lsls	r1, r1, #8
     cb6:	468c      	mov	ip, r1
     cb8:	4462      	add	r2, ip
			if (config->differential_mode &&
     cba:	490e      	ldr	r1, [pc, #56]	; (cf4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     cbc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     cbe:	428a      	cmp	r2, r1
     cc0:	d900      	bls.n	cc4 <adc_init+0x3f4>
     cc2:	e618      	b.n	8f6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     cc4:	6a32      	ldr	r2, [r6, #32]
     cc6:	4462      	add	r2, ip
     cc8:	490a      	ldr	r1, [pc, #40]	; (cf4 <adc_init+0x424>)
     cca:	428a      	cmp	r2, r1
     ccc:	d900      	bls.n	cd0 <adc_init+0x400>
     cce:	e612      	b.n	8f6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     cd0:	4a08      	ldr	r2, [pc, #32]	; (cf4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     cd2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     cd4:	69f1      	ldr	r1, [r6, #28]
     cd6:	4291      	cmp	r1, r2
     cd8:	dd00      	ble.n	cdc <adc_init+0x40c>
     cda:	e60c      	b.n	8f6 <adc_init+0x26>
     cdc:	6a31      	ldr	r1, [r6, #32]
     cde:	4291      	cmp	r1, r2
     ce0:	dd00      	ble.n	ce4 <adc_init+0x414>
     ce2:	e608      	b.n	8f6 <adc_init+0x26>
     ce4:	e725      	b.n	b32 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     ce6:	2017      	movs	r0, #23
     ce8:	e605      	b.n	8f6 <adc_init+0x26>
     cea:	46c0      	nop			; (mov r8, r8)
     cec:	00000fff 	.word	0x00000fff
     cf0:	000003ff 	.word	0x000003ff
     cf4:	0000ffff 	.word	0x0000ffff

00000cf8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     cf8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     cfa:	4b2e      	ldr	r3, [pc, #184]	; (db4 <ADC_Handler+0xbc>)
     cfc:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     cfe:	6823      	ldr	r3, [r4, #0]
     d00:	7e1d      	ldrb	r5, [r3, #24]
     d02:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     d04:	07ea      	lsls	r2, r5, #31
     d06:	d505      	bpl.n	d14 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     d08:	7ee2      	ldrb	r2, [r4, #27]
     d0a:	07d2      	lsls	r2, r2, #31
     d0c:	d502      	bpl.n	d14 <ADC_Handler+0x1c>
     d0e:	7ea2      	ldrb	r2, [r4, #26]
     d10:	07d2      	lsls	r2, r2, #31
     d12:	d416      	bmi.n	d42 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     d14:	076b      	lsls	r3, r5, #29
     d16:	d508      	bpl.n	d2a <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     d18:	2304      	movs	r3, #4
     d1a:	6822      	ldr	r2, [r4, #0]
     d1c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     d1e:	7ee3      	ldrb	r3, [r4, #27]
     d20:	079b      	lsls	r3, r3, #30
     d22:	d502      	bpl.n	d2a <ADC_Handler+0x32>
     d24:	7ea3      	ldrb	r3, [r4, #26]
     d26:	079b      	lsls	r3, r3, #30
     d28:	d43c      	bmi.n	da4 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     d2a:	07ab      	lsls	r3, r5, #30
     d2c:	d508      	bpl.n	d40 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     d2e:	2302      	movs	r3, #2
     d30:	6822      	ldr	r2, [r4, #0]
     d32:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     d34:	7ee3      	ldrb	r3, [r4, #27]
     d36:	075b      	lsls	r3, r3, #29
     d38:	d502      	bpl.n	d40 <ADC_Handler+0x48>
     d3a:	7ea3      	ldrb	r3, [r4, #26]
     d3c:	075b      	lsls	r3, r3, #29
     d3e:	d435      	bmi.n	dac <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     d40:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     d42:	2201      	movs	r2, #1
     d44:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     d46:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d48:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     d4a:	b25b      	sxtb	r3, r3
     d4c:	2b00      	cmp	r3, #0
     d4e:	dbfb      	blt.n	d48 <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     d50:	6961      	ldr	r1, [r4, #20]
     d52:	1c8b      	adds	r3, r1, #2
     d54:	6163      	str	r3, [r4, #20]
     d56:	8b53      	ldrh	r3, [r2, #26]
     d58:	b29b      	uxth	r3, r3
     d5a:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     d5c:	8b23      	ldrh	r3, [r4, #24]
     d5e:	3b01      	subs	r3, #1
     d60:	b29b      	uxth	r3, r3
     d62:	8323      	strh	r3, [r4, #24]
     d64:	2b00      	cmp	r3, #0
     d66:	d011      	beq.n	d8c <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     d68:	7f63      	ldrb	r3, [r4, #29]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d0d2      	beq.n	d14 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d6e:	6822      	ldr	r2, [r4, #0]
     d70:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     d72:	b25b      	sxtb	r3, r3
     d74:	2b00      	cmp	r3, #0
     d76:	dbfb      	blt.n	d70 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     d78:	7b13      	ldrb	r3, [r2, #12]
     d7a:	2102      	movs	r1, #2
     d7c:	430b      	orrs	r3, r1
     d7e:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     d80:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d82:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     d84:	b25b      	sxtb	r3, r3
     d86:	2b00      	cmp	r3, #0
     d88:	dbfb      	blt.n	d82 <ADC_Handler+0x8a>
     d8a:	e7c3      	b.n	d14 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     d8c:	7f23      	ldrb	r3, [r4, #28]
     d8e:	2b05      	cmp	r3, #5
     d90:	d1c0      	bne.n	d14 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     d92:	2300      	movs	r3, #0
     d94:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     d96:	3301      	adds	r3, #1
     d98:	6822      	ldr	r2, [r4, #0]
     d9a:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     d9c:	0020      	movs	r0, r4
     d9e:	68a3      	ldr	r3, [r4, #8]
     da0:	4798      	blx	r3
     da2:	e7b7      	b.n	d14 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     da4:	0020      	movs	r0, r4
     da6:	68e3      	ldr	r3, [r4, #12]
     da8:	4798      	blx	r3
     daa:	e7be      	b.n	d2a <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     dac:	6923      	ldr	r3, [r4, #16]
     dae:	0020      	movs	r0, r4
     db0:	4798      	blx	r3
}
     db2:	e7c5      	b.n	d40 <ADC_Handler+0x48>
     db4:	2000015c 	.word	0x2000015c

00000db8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     db8:	4a04      	ldr	r2, [pc, #16]	; (dcc <_extint_enable+0x14>)
     dba:	7813      	ldrb	r3, [r2, #0]
     dbc:	2102      	movs	r1, #2
     dbe:	430b      	orrs	r3, r1
     dc0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     dc2:	7853      	ldrb	r3, [r2, #1]
     dc4:	b25b      	sxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	dbfb      	blt.n	dc2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     dca:	4770      	bx	lr
     dcc:	40001800 	.word	0x40001800

00000dd0 <_system_extint_init>:
{
     dd0:	b500      	push	{lr}
     dd2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     dd4:	4a12      	ldr	r2, [pc, #72]	; (e20 <_system_extint_init+0x50>)
     dd6:	6993      	ldr	r3, [r2, #24]
     dd8:	2140      	movs	r1, #64	; 0x40
     dda:	430b      	orrs	r3, r1
     ddc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     dde:	a901      	add	r1, sp, #4
     de0:	2300      	movs	r3, #0
     de2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     de4:	2005      	movs	r0, #5
     de6:	4b0f      	ldr	r3, [pc, #60]	; (e24 <_system_extint_init+0x54>)
     de8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     dea:	2005      	movs	r0, #5
     dec:	4b0e      	ldr	r3, [pc, #56]	; (e28 <_system_extint_init+0x58>)
     dee:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     df0:	4a0e      	ldr	r2, [pc, #56]	; (e2c <_system_extint_init+0x5c>)
     df2:	7813      	ldrb	r3, [r2, #0]
     df4:	2101      	movs	r1, #1
     df6:	430b      	orrs	r3, r1
     df8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     dfa:	7853      	ldrb	r3, [r2, #1]
     dfc:	b25b      	sxtb	r3, r3
     dfe:	2b00      	cmp	r3, #0
     e00:	dbfb      	blt.n	dfa <_system_extint_init+0x2a>
     e02:	4b0b      	ldr	r3, [pc, #44]	; (e30 <_system_extint_init+0x60>)
     e04:	0019      	movs	r1, r3
     e06:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     e08:	2200      	movs	r2, #0
     e0a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     e0c:	4299      	cmp	r1, r3
     e0e:	d1fc      	bne.n	e0a <_system_extint_init+0x3a>
     e10:	2210      	movs	r2, #16
     e12:	4b08      	ldr	r3, [pc, #32]	; (e34 <_system_extint_init+0x64>)
     e14:	601a      	str	r2, [r3, #0]
	_extint_enable();
     e16:	4b08      	ldr	r3, [pc, #32]	; (e38 <_system_extint_init+0x68>)
     e18:	4798      	blx	r3
}
     e1a:	b003      	add	sp, #12
     e1c:	bd00      	pop	{pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	40000400 	.word	0x40000400
     e24:	00002ddd 	.word	0x00002ddd
     e28:	00002d51 	.word	0x00002d51
     e2c:	40001800 	.word	0x40001800
     e30:	20000160 	.word	0x20000160
     e34:	e000e100 	.word	0xe000e100
     e38:	00000db9 	.word	0x00000db9

00000e3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e3c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     e3e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e40:	2340      	movs	r3, #64	; 0x40
     e42:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e44:	4281      	cmp	r1, r0
     e46:	d202      	bcs.n	e4e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e48:	0018      	movs	r0, r3
     e4a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e4c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e4e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e50:	1c63      	adds	r3, r4, #1
     e52:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e54:	4288      	cmp	r0, r1
     e56:	d9f9      	bls.n	e4c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e58:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e5a:	2cff      	cmp	r4, #255	; 0xff
     e5c:	d8f4      	bhi.n	e48 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e5e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e60:	2300      	movs	r3, #0
     e62:	e7f1      	b.n	e48 <_sercom_get_sync_baud_val+0xc>

00000e64 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e64:	b510      	push	{r4, lr}
     e66:	b082      	sub	sp, #8
     e68:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e6a:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <sercom_set_gclk_generator+0x40>)
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	2b00      	cmp	r3, #0
     e70:	d007      	beq.n	e82 <sercom_set_gclk_generator+0x1e>
     e72:	2900      	cmp	r1, #0
     e74:	d105      	bne.n	e82 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e76:	4b0b      	ldr	r3, [pc, #44]	; (ea4 <sercom_set_gclk_generator+0x40>)
     e78:	785b      	ldrb	r3, [r3, #1]
     e7a:	4283      	cmp	r3, r0
     e7c:	d010      	beq.n	ea0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e7e:	201d      	movs	r0, #29
     e80:	e00c      	b.n	e9c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     e82:	a901      	add	r1, sp, #4
     e84:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e86:	200d      	movs	r0, #13
     e88:	4b07      	ldr	r3, [pc, #28]	; (ea8 <sercom_set_gclk_generator+0x44>)
     e8a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e8c:	200d      	movs	r0, #13
     e8e:	4b07      	ldr	r3, [pc, #28]	; (eac <sercom_set_gclk_generator+0x48>)
     e90:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     e92:	4b04      	ldr	r3, [pc, #16]	; (ea4 <sercom_set_gclk_generator+0x40>)
     e94:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e96:	2201      	movs	r2, #1
     e98:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     e9a:	2000      	movs	r0, #0
}
     e9c:	b002      	add	sp, #8
     e9e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     ea0:	2000      	movs	r0, #0
     ea2:	e7fb      	b.n	e9c <sercom_set_gclk_generator+0x38>
     ea4:	20000094 	.word	0x20000094
     ea8:	00002ddd 	.word	0x00002ddd
     eac:	00002d51 	.word	0x00002d51

00000eb0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     eb0:	4b20      	ldr	r3, [pc, #128]	; (f34 <_sercom_get_default_pad+0x84>)
     eb2:	4298      	cmp	r0, r3
     eb4:	d017      	beq.n	ee6 <_sercom_get_default_pad+0x36>
     eb6:	4b20      	ldr	r3, [pc, #128]	; (f38 <_sercom_get_default_pad+0x88>)
     eb8:	4298      	cmp	r0, r3
     eba:	d024      	beq.n	f06 <_sercom_get_default_pad+0x56>
     ebc:	4b1f      	ldr	r3, [pc, #124]	; (f3c <_sercom_get_default_pad+0x8c>)
     ebe:	4298      	cmp	r0, r3
     ec0:	d001      	beq.n	ec6 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ec2:	2000      	movs	r0, #0
}
     ec4:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ec6:	2901      	cmp	r1, #1
     ec8:	d007      	beq.n	eda <_sercom_get_default_pad+0x2a>
     eca:	2900      	cmp	r1, #0
     ecc:	d02b      	beq.n	f26 <_sercom_get_default_pad+0x76>
     ece:	2902      	cmp	r1, #2
     ed0:	d005      	beq.n	ede <_sercom_get_default_pad+0x2e>
     ed2:	2903      	cmp	r1, #3
     ed4:	d005      	beq.n	ee2 <_sercom_get_default_pad+0x32>
	return 0;
     ed6:	2000      	movs	r0, #0
     ed8:	e7f4      	b.n	ec4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eda:	4819      	ldr	r0, [pc, #100]	; (f40 <_sercom_get_default_pad+0x90>)
     edc:	e7f2      	b.n	ec4 <_sercom_get_default_pad+0x14>
     ede:	4819      	ldr	r0, [pc, #100]	; (f44 <_sercom_get_default_pad+0x94>)
     ee0:	e7f0      	b.n	ec4 <_sercom_get_default_pad+0x14>
     ee2:	4819      	ldr	r0, [pc, #100]	; (f48 <_sercom_get_default_pad+0x98>)
     ee4:	e7ee      	b.n	ec4 <_sercom_get_default_pad+0x14>
     ee6:	2901      	cmp	r1, #1
     ee8:	d007      	beq.n	efa <_sercom_get_default_pad+0x4a>
     eea:	2900      	cmp	r1, #0
     eec:	d01d      	beq.n	f2a <_sercom_get_default_pad+0x7a>
     eee:	2902      	cmp	r1, #2
     ef0:	d005      	beq.n	efe <_sercom_get_default_pad+0x4e>
     ef2:	2903      	cmp	r1, #3
     ef4:	d005      	beq.n	f02 <_sercom_get_default_pad+0x52>
	return 0;
     ef6:	2000      	movs	r0, #0
     ef8:	e7e4      	b.n	ec4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     efa:	4814      	ldr	r0, [pc, #80]	; (f4c <_sercom_get_default_pad+0x9c>)
     efc:	e7e2      	b.n	ec4 <_sercom_get_default_pad+0x14>
     efe:	4814      	ldr	r0, [pc, #80]	; (f50 <_sercom_get_default_pad+0xa0>)
     f00:	e7e0      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f02:	4814      	ldr	r0, [pc, #80]	; (f54 <_sercom_get_default_pad+0xa4>)
     f04:	e7de      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f06:	2901      	cmp	r1, #1
     f08:	d007      	beq.n	f1a <_sercom_get_default_pad+0x6a>
     f0a:	2900      	cmp	r1, #0
     f0c:	d00f      	beq.n	f2e <_sercom_get_default_pad+0x7e>
     f0e:	2902      	cmp	r1, #2
     f10:	d005      	beq.n	f1e <_sercom_get_default_pad+0x6e>
     f12:	2903      	cmp	r1, #3
     f14:	d005      	beq.n	f22 <_sercom_get_default_pad+0x72>
	return 0;
     f16:	2000      	movs	r0, #0
     f18:	e7d4      	b.n	ec4 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f1a:	480f      	ldr	r0, [pc, #60]	; (f58 <_sercom_get_default_pad+0xa8>)
     f1c:	e7d2      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f1e:	480f      	ldr	r0, [pc, #60]	; (f5c <_sercom_get_default_pad+0xac>)
     f20:	e7d0      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f22:	480f      	ldr	r0, [pc, #60]	; (f60 <_sercom_get_default_pad+0xb0>)
     f24:	e7ce      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f26:	480f      	ldr	r0, [pc, #60]	; (f64 <_sercom_get_default_pad+0xb4>)
     f28:	e7cc      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f2a:	480f      	ldr	r0, [pc, #60]	; (f68 <_sercom_get_default_pad+0xb8>)
     f2c:	e7ca      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f2e:	480f      	ldr	r0, [pc, #60]	; (f6c <_sercom_get_default_pad+0xbc>)
     f30:	e7c8      	b.n	ec4 <_sercom_get_default_pad+0x14>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	42000c00 	.word	0x42000c00
     f38:	42001000 	.word	0x42001000
     f3c:	42000800 	.word	0x42000800
     f40:	00050003 	.word	0x00050003
     f44:	00060003 	.word	0x00060003
     f48:	00070003 	.word	0x00070003
     f4c:	00170002 	.word	0x00170002
     f50:	001e0003 	.word	0x001e0003
     f54:	001f0003 	.word	0x001f0003
     f58:	00170003 	.word	0x00170003
     f5c:	00100003 	.word	0x00100003
     f60:	00190003 	.word	0x00190003
     f64:	00040003 	.word	0x00040003
     f68:	00160002 	.word	0x00160002
     f6c:	00160003 	.word	0x00160003

00000f70 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f70:	b530      	push	{r4, r5, lr}
     f72:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f74:	aa01      	add	r2, sp, #4
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <_sercom_get_sercom_inst_index+0x34>)
     f78:	cb32      	ldmia	r3!, {r1, r4, r5}
     f7a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f7c:	0003      	movs	r3, r0
     f7e:	9a01      	ldr	r2, [sp, #4]
     f80:	4282      	cmp	r2, r0
     f82:	d00c      	beq.n	f9e <_sercom_get_sercom_inst_index+0x2e>
     f84:	9a02      	ldr	r2, [sp, #8]
     f86:	4282      	cmp	r2, r0
     f88:	d007      	beq.n	f9a <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f8a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f8c:	9a03      	ldr	r2, [sp, #12]
     f8e:	429a      	cmp	r2, r3
     f90:	d001      	beq.n	f96 <_sercom_get_sercom_inst_index+0x26>
}
     f92:	b005      	add	sp, #20
     f94:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f96:	3002      	adds	r0, #2
     f98:	e002      	b.n	fa0 <_sercom_get_sercom_inst_index+0x30>
     f9a:	2001      	movs	r0, #1
     f9c:	e000      	b.n	fa0 <_sercom_get_sercom_inst_index+0x30>
     f9e:	2000      	movs	r0, #0
			return i;
     fa0:	b2c0      	uxtb	r0, r0
     fa2:	e7f6      	b.n	f92 <_sercom_get_sercom_inst_index+0x22>
     fa4:	00003678 	.word	0x00003678

00000fa8 <update_LEDS>:
#include <asf.h>
#include "LED.h"
#include "LED_control.h"

void update_LEDS(uint8_t led1, uint8_t led2)
{
     fa8:	b510      	push	{r4, lr}
	if(led1 == 0xff)
     faa:	28ff      	cmp	r0, #255	; 0xff
     fac:	d010      	beq.n	fd0 <update_LEDS+0x28>
	{
		led1 = 0xfe;
	}
	if(led2 == 0xff)
     fae:	29ff      	cmp	r1, #255	; 0xff
     fb0:	d010      	beq.n	fd4 <update_LEDS+0x2c>
	{
		led2 = 0xfe;
	}
	
	temp_compare_led_array_2[0] = 255 -led1;//Led1
     fb2:	4b09      	ldr	r3, [pc, #36]	; (fd8 <update_LEDS+0x30>)
     fb4:	43c0      	mvns	r0, r0
     fb6:	7018      	strb	r0, [r3, #0]
	temp_compare_led_array_2[1] = 255 -led2;//led2
     fb8:	43c9      	mvns	r1, r1
     fba:	7059      	strb	r1, [r3, #1]
	initializing_LED_pin_array();
     fbc:	4b07      	ldr	r3, [pc, #28]	; (fdc <update_LEDS+0x34>)
     fbe:	4798      	blx	r3
	increasing_LED_sort_tag();
     fc0:	4b07      	ldr	r3, [pc, #28]	; (fe0 <update_LEDS+0x38>)
     fc2:	4798      	blx	r3
	LED_transfer_temp();
     fc4:	4b07      	ldr	r3, [pc, #28]	; (fe4 <update_LEDS+0x3c>)
     fc6:	4798      	blx	r3
	update_compare_led_array = true;
     fc8:	2201      	movs	r2, #1
     fca:	4b07      	ldr	r3, [pc, #28]	; (fe8 <update_LEDS+0x40>)
     fcc:	701a      	strb	r2, [r3, #0]
}
     fce:	bd10      	pop	{r4, pc}
		led1 = 0xfe;
     fd0:	3801      	subs	r0, #1
     fd2:	e7ec      	b.n	fae <update_LEDS+0x6>
		led2 = 0xfe;
     fd4:	3901      	subs	r1, #1
     fd6:	e7ec      	b.n	fb2 <update_LEDS+0xa>
     fd8:	20000238 	.word	0x20000238
     fdc:	00002215 	.word	0x00002215
     fe0:	0000224d 	.word	0x0000224d
     fe4:	00002279 	.word	0x00002279
     fe8:	200000b2 	.word	0x200000b2

00000fec <update_LEDS_single>:

void update_LEDS_single(uint8_t port_no, uint8_t led)
{
     fec:	b510      	push	{r4, lr}
	if(led == 0xff)
     fee:	29ff      	cmp	r1, #255	; 0xff
     ff0:	d00d      	beq.n	100e <update_LEDS_single+0x22>
	{
		led = 0xfe;
	}
	switch (port_no)
     ff2:	2831      	cmp	r0, #49	; 0x31
     ff4:	d00d      	beq.n	1012 <update_LEDS_single+0x26>
     ff6:	2832      	cmp	r0, #50	; 0x32
     ff8:	d00f      	beq.n	101a <update_LEDS_single+0x2e>
					temp_compare_led_array_2[1] = 255  -led;//Led2
					break;
		default:
					break;
	}
	initializing_LED_pin_array();
     ffa:	4b0a      	ldr	r3, [pc, #40]	; (1024 <update_LEDS_single+0x38>)
     ffc:	4798      	blx	r3
	increasing_LED_sort_tag();
     ffe:	4b0a      	ldr	r3, [pc, #40]	; (1028 <update_LEDS_single+0x3c>)
    1000:	4798      	blx	r3
	LED_transfer_temp();
    1002:	4b0a      	ldr	r3, [pc, #40]	; (102c <update_LEDS_single+0x40>)
    1004:	4798      	blx	r3
	update_compare_led_array = true;
    1006:	2201      	movs	r2, #1
    1008:	4b09      	ldr	r3, [pc, #36]	; (1030 <update_LEDS_single+0x44>)
    100a:	701a      	strb	r2, [r3, #0]
}
    100c:	bd10      	pop	{r4, pc}
		led = 0xfe;
    100e:	3901      	subs	r1, #1
    1010:	e7ef      	b.n	ff2 <update_LEDS_single+0x6>
					temp_compare_led_array_2[0] = 255 - led;//Led1
    1012:	43c9      	mvns	r1, r1
    1014:	4b07      	ldr	r3, [pc, #28]	; (1034 <update_LEDS_single+0x48>)
    1016:	7019      	strb	r1, [r3, #0]
					break;
    1018:	e7ef      	b.n	ffa <update_LEDS_single+0xe>
					temp_compare_led_array_2[1] = 255  -led;//Led2
    101a:	43c9      	mvns	r1, r1
    101c:	4b05      	ldr	r3, [pc, #20]	; (1034 <update_LEDS_single+0x48>)
    101e:	7059      	strb	r1, [r3, #1]
					break;
    1020:	e7eb      	b.n	ffa <update_LEDS_single+0xe>
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	00002215 	.word	0x00002215
    1028:	0000224d 	.word	0x0000224d
    102c:	00002279 	.word	0x00002279
    1030:	200000b2 	.word	0x200000b2
    1034:	20000238 	.word	0x20000238

00001038 <switch_off_LEDS>:


void switch_off_LEDS()
{
    1038:	b510      	push	{r4, lr}
	temp_compare_led_array_2[0] = 10; //Led1
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <switch_off_LEDS+0x20>)
    103c:	220a      	movs	r2, #10
    103e:	701a      	strb	r2, [r3, #0]
	temp_compare_led_array_2[1] = 80; //Led2
    1040:	3246      	adds	r2, #70	; 0x46
    1042:	705a      	strb	r2, [r3, #1]
	initializing_LED_pin_array();
    1044:	4b05      	ldr	r3, [pc, #20]	; (105c <switch_off_LEDS+0x24>)
    1046:	4798      	blx	r3
	increasing_LED_sort_tag();
    1048:	4b05      	ldr	r3, [pc, #20]	; (1060 <switch_off_LEDS+0x28>)
    104a:	4798      	blx	r3
	LED_transfer_temp();
    104c:	4b05      	ldr	r3, [pc, #20]	; (1064 <switch_off_LEDS+0x2c>)
    104e:	4798      	blx	r3
	update_compare_led_array = true;
    1050:	2201      	movs	r2, #1
    1052:	4b05      	ldr	r3, [pc, #20]	; (1068 <switch_off_LEDS+0x30>)
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	bd10      	pop	{r4, pc}
    1058:	20000238 	.word	0x20000238
    105c:	00002215 	.word	0x00002215
    1060:	0000224d 	.word	0x0000224d
    1064:	00002279 	.word	0x00002279
    1068:	200000b2 	.word	0x200000b2

0000106c <update_ORB>:
#include <asf.h>
#include "ORB_control.h"
#include "ORB.h"

void update_ORB(uint8_t r1 ,uint8_t g1 ,uint8_t b1 ,uint8_t r2 ,uint8_t b2 ,uint8_t g2  )
{
    106c:	b570      	push	{r4, r5, r6, lr}
    106e:	ac04      	add	r4, sp, #16
    1070:	7826      	ldrb	r6, [r4, #0]
    1072:	ac05      	add	r4, sp, #20
    1074:	7825      	ldrb	r5, [r4, #0]
 	temp_compare_array_2[0] = 255-r1;//Left -- R
    1076:	4c0b      	ldr	r4, [pc, #44]	; (10a4 <update_ORB+0x38>)
    1078:	43c0      	mvns	r0, r0
    107a:	7020      	strb	r0, [r4, #0]
 	temp_compare_array_2[1] = 255-g1;//Left  -- G
    107c:	43c9      	mvns	r1, r1
    107e:	7061      	strb	r1, [r4, #1]
 	temp_compare_array_2[2] = 255-b1;//Left  -- B
    1080:	43d2      	mvns	r2, r2
    1082:	70a2      	strb	r2, [r4, #2]
 	temp_compare_array_2[3] = 255-r2;//Right -- R
    1084:	43db      	mvns	r3, r3
    1086:	70e3      	strb	r3, [r4, #3]
 	temp_compare_array_2[4] = 255-b2;//Right  -- G
    1088:	43f6      	mvns	r6, r6
    108a:	7126      	strb	r6, [r4, #4]
 	temp_compare_array_2[5] = 255-g2;//Right -- B
    108c:	43ed      	mvns	r5, r5
    108e:	7165      	strb	r5, [r4, #5]
	initializing_pin_array();
    1090:	4b05      	ldr	r3, [pc, #20]	; (10a8 <update_ORB+0x3c>)
    1092:	4798      	blx	r3
	increasing_sort_tag();
    1094:	4b05      	ldr	r3, [pc, #20]	; (10ac <update_ORB+0x40>)
    1096:	4798      	blx	r3
	transfer_temp();
    1098:	4b05      	ldr	r3, [pc, #20]	; (10b0 <update_ORB+0x44>)
    109a:	4798      	blx	r3
	update_compare_array = true;
    109c:	2201      	movs	r2, #1
    109e:	4b05      	ldr	r3, [pc, #20]	; (10b4 <update_ORB+0x48>)
    10a0:	701a      	strb	r2, [r3, #0]
}
    10a2:	bd70      	pop	{r4, r5, r6, pc}
    10a4:	20000288 	.word	0x20000288
    10a8:	00002895 	.word	0x00002895
    10ac:	000026c1 	.word	0x000026c1
    10b0:	0000259d 	.word	0x0000259d
    10b4:	200000b6 	.word	0x200000b6

000010b8 <update_ORB_single>:


void update_ORB_single(uint8_t port_no , uint8_t r , uint8_t g , uint8_t b)
{
    10b8:	b510      	push	{r4, lr}
	if(port_no == '1') //ASCII 1
    10ba:	2831      	cmp	r0, #49	; 0x31
    10bc:	d00b      	beq.n	10d6 <update_ORB_single+0x1e>
	{
		temp_compare_array_2[0] = 255-r;//Left -- R
		temp_compare_array_2[1] = 255-g;//Left  -- G
		temp_compare_array_2[2] = 255-b;//Left  -- B
	}
	else if(port_no == '2')//ASCII 2
    10be:	2832      	cmp	r0, #50	; 0x32
    10c0:	d011      	beq.n	10e6 <update_ORB_single+0x2e>
	{
		temp_compare_array_2[3] = 255-r;//Right -- R
		temp_compare_array_2[4] = 255-b;//Right  -- G
		temp_compare_array_2[5] = 255-g;//Right -- B
	}
	initializing_pin_array();
    10c2:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <update_ORB_single+0x40>)
    10c4:	4798      	blx	r3
	increasing_sort_tag();
    10c6:	4b0d      	ldr	r3, [pc, #52]	; (10fc <update_ORB_single+0x44>)
    10c8:	4798      	blx	r3
	transfer_temp();
    10ca:	4b0d      	ldr	r3, [pc, #52]	; (1100 <update_ORB_single+0x48>)
    10cc:	4798      	blx	r3
	update_compare_array = true;
    10ce:	2201      	movs	r2, #1
    10d0:	4b0c      	ldr	r3, [pc, #48]	; (1104 <update_ORB_single+0x4c>)
    10d2:	701a      	strb	r2, [r3, #0]
	
}
    10d4:	bd10      	pop	{r4, pc}
		temp_compare_array_2[0] = 255-r;//Left -- R
    10d6:	480c      	ldr	r0, [pc, #48]	; (1108 <update_ORB_single+0x50>)
    10d8:	43c9      	mvns	r1, r1
    10da:	7001      	strb	r1, [r0, #0]
		temp_compare_array_2[1] = 255-g;//Left  -- G
    10dc:	43d2      	mvns	r2, r2
    10de:	7042      	strb	r2, [r0, #1]
		temp_compare_array_2[2] = 255-b;//Left  -- B
    10e0:	43db      	mvns	r3, r3
    10e2:	7083      	strb	r3, [r0, #2]
    10e4:	e7ed      	b.n	10c2 <update_ORB_single+0xa>
		temp_compare_array_2[3] = 255-r;//Right -- R
    10e6:	4808      	ldr	r0, [pc, #32]	; (1108 <update_ORB_single+0x50>)
    10e8:	43c9      	mvns	r1, r1
    10ea:	70c1      	strb	r1, [r0, #3]
		temp_compare_array_2[4] = 255-b;//Right  -- G
    10ec:	43db      	mvns	r3, r3
    10ee:	7103      	strb	r3, [r0, #4]
		temp_compare_array_2[5] = 255-g;//Right -- B
    10f0:	43d2      	mvns	r2, r2
    10f2:	7142      	strb	r2, [r0, #5]
    10f4:	e7e5      	b.n	10c2 <update_ORB_single+0xa>
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	00002895 	.word	0x00002895
    10fc:	000026c1 	.word	0x000026c1
    1100:	0000259d 	.word	0x0000259d
    1104:	200000b6 	.word	0x200000b6
    1108:	20000288 	.word	0x20000288

0000110c <switch_off_ORB>:

void switch_off_ORB()
{
    110c:	b510      	push	{r4, lr}
	temp_compare_array_2[0] = 255;//Left -- R
    110e:	4b09      	ldr	r3, [pc, #36]	; (1134 <switch_off_ORB+0x28>)
    1110:	22ff      	movs	r2, #255	; 0xff
    1112:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    1114:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 255;//Left  -- B
    1116:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 255;//Right -- R
    1118:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 255;//Right  -- G
    111a:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 255;//Right -- B
    111c:	715a      	strb	r2, [r3, #5]
	initializing_pin_array();
    111e:	4b06      	ldr	r3, [pc, #24]	; (1138 <switch_off_ORB+0x2c>)
    1120:	4798      	blx	r3
	increasing_sort_tag();
    1122:	4b06      	ldr	r3, [pc, #24]	; (113c <switch_off_ORB+0x30>)
    1124:	4798      	blx	r3
	transfer_temp();
    1126:	4b06      	ldr	r3, [pc, #24]	; (1140 <switch_off_ORB+0x34>)
    1128:	4798      	blx	r3
	update_compare_array = true;
    112a:	2201      	movs	r2, #1
    112c:	4b05      	ldr	r3, [pc, #20]	; (1144 <switch_off_ORB+0x38>)
    112e:	701a      	strb	r2, [r3, #0]
    1130:	bd10      	pop	{r4, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	20000288 	.word	0x20000288
    1138:	00002895 	.word	0x00002895
    113c:	000026c1 	.word	0x000026c1
    1140:	0000259d 	.word	0x0000259d
    1144:	200000b6 	.word	0x200000b6

00001148 <read_all_sensors>:
	output_single_adc = adc_start_read_result(sensor_analog_inputs[sensor_no]);
	return output_single_adc;
}

void read_all_sensors()
{
    1148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114a:	2400      	movs	r4, #0
	static volatile uint8_t sensor_output_temp[500];
	
	uint8_t i =0;
	for(i= 0; i< NO_SENSORS; i++)
	{
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    114c:	4f05      	ldr	r7, [pc, #20]	; (1164 <read_all_sensors+0x1c>)
    114e:	4e06      	ldr	r6, [pc, #24]	; (1168 <read_all_sensors+0x20>)
		sensor_outputs[i]      = temp_sensor_outputs[i] ;
    1150:	4d06      	ldr	r5, [pc, #24]	; (116c <read_all_sensors+0x24>)
		temp_sensor_outputs[i] = adc_start_read_result(sensor_analog_inputs[i]);
    1152:	5de0      	ldrb	r0, [r4, r7]
    1154:	47b0      	blx	r6
    1156:	b2c0      	uxtb	r0, r0
		sensor_outputs[i]      = temp_sensor_outputs[i] ;
    1158:	5528      	strb	r0, [r5, r4]
    115a:	3401      	adds	r4, #1
	for(i= 0; i< NO_SENSORS; i++)
    115c:	2c04      	cmp	r4, #4
    115e:	d1f8      	bne.n	1152 <read_all_sensors+0xa>
	sensor_output_temp[test_count] = sensor_outputs[0];
	test_count++;
	*/
	//global_sensor_value = &output_multiple_adc;
	//return output_multiple_adc;
}
    1160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	00003684 	.word	0x00003684
    1168:	000011fd 	.word	0x000011fd
    116c:	200002a4 	.word	0x200002a4

00001170 <configure_adc>:
struct adc_module adc_instance;
uint16_t* adc_result = NULL;


void configure_adc()
{
    1170:	b510      	push	{r4, lr}
    1172:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	adc_get_config_defaults(&conf_adc);
    1174:	4668      	mov	r0, sp
    1176:	4b1a      	ldr	r3, [pc, #104]	; (11e0 <configure_adc+0x70>)
    1178:	4798      	blx	r3
	adc_result = malloc(sizeof(uint16_t));
    117a:	2002      	movs	r0, #2
    117c:	4b19      	ldr	r3, [pc, #100]	; (11e4 <configure_adc+0x74>)
    117e:	4798      	blx	r3
    1180:	4b19      	ldr	r3, [pc, #100]	; (11e8 <configure_adc+0x78>)
    1182:	6018      	str	r0, [r3, #0]
	//conf_adc.clock_source = GCLK_GENERATOR_1;
	conf_adc.reference			= ADC_REFCTRL_REFSEL_INTVCC0;
    1184:	2301      	movs	r3, #1
    1186:	466a      	mov	r2, sp
    1188:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler	= ADC_CLOCK_PRESCALER_DIV512;
    118a:	22e0      	movs	r2, #224	; 0xe0
    118c:	00d2      	lsls	r2, r2, #3
    118e:	4669      	mov	r1, sp
    1190:	804a      	strh	r2, [r1, #2]
	conf_adc.positive_input		= 6;
    1192:	2206      	movs	r2, #6
    1194:	730a      	strb	r2, [r1, #12]
	conf_adc.negative_input		= ADC_NEGATIVE_INPUT_GND;
    1196:	22c0      	movs	r2, #192	; 0xc0
    1198:	0152      	lsls	r2, r2, #5
    119a:	81ca      	strh	r2, [r1, #14]
	conf_adc.resolution			= ADC_RESOLUTION_8BIT;
    119c:	2230      	movs	r2, #48	; 0x30
    119e:	710a      	strb	r2, [r1, #4]
	conf_adc.left_adjust		= true;
    11a0:	466a      	mov	r2, sp
    11a2:	748b      	strb	r3, [r1, #18]
	//conf_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
	//conf_adc.divide_result      = ADC_DIVIDE_RESULT_16;
	//conf_adc.freerunning        = true;
	adc_init(&adc_instance, ADC, &conf_adc);
    11a4:	4c11      	ldr	r4, [pc, #68]	; (11ec <configure_adc+0x7c>)
    11a6:	4912      	ldr	r1, [pc, #72]	; (11f0 <configure_adc+0x80>)
    11a8:	0020      	movs	r0, r4
    11aa:	4b12      	ldr	r3, [pc, #72]	; (11f4 <configure_adc+0x84>)
    11ac:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    11ae:	6822      	ldr	r2, [r4, #0]
    11b0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    11b2:	b25b      	sxtb	r3, r3
    11b4:	2b00      	cmp	r3, #0
    11b6:	dbfb      	blt.n	11b0 <configure_adc+0x40>
    11b8:	2180      	movs	r1, #128	; 0x80
    11ba:	0209      	lsls	r1, r1, #8
    11bc:	4b0e      	ldr	r3, [pc, #56]	; (11f8 <configure_adc+0x88>)
    11be:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    11c0:	230f      	movs	r3, #15
    11c2:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    11c4:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    11c6:	7813      	ldrb	r3, [r2, #0]
    11c8:	2102      	movs	r1, #2
    11ca:	430b      	orrs	r3, r1
    11cc:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    11ce:	4b07      	ldr	r3, [pc, #28]	; (11ec <configure_adc+0x7c>)
    11d0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    11d2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    11d4:	b25b      	sxtb	r3, r3
    11d6:	2b00      	cmp	r3, #0
    11d8:	dbfb      	blt.n	11d2 <configure_adc+0x62>
	adc_enable(&adc_instance);
}
    11da:	b00c      	add	sp, #48	; 0x30
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00000889 	.word	0x00000889
    11e4:	00003409 	.word	0x00003409
    11e8:	20000098 	.word	0x20000098
    11ec:	200001a0 	.word	0x200001a0
    11f0:	42002000 	.word	0x42002000
    11f4:	000008d1 	.word	0x000008d1
    11f8:	e000e100 	.word	0xe000e100

000011fc <adc_start_read_result>:


uint16_t adc_start_read_result(const enum adc_positive_input analogPin)
{
    11fc:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    11fe:	4b2d      	ldr	r3, [pc, #180]	; (12b4 <adc_start_read_result+0xb8>)
    1200:	6819      	ldr	r1, [r3, #0]
    1202:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1204:	b25b      	sxtb	r3, r3
    1206:	2b00      	cmp	r3, #0
    1208:	dbfb      	blt.n	1202 <adc_start_read_result+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    120a:	690b      	ldr	r3, [r1, #16]
    120c:	221f      	movs	r2, #31
    120e:	4393      	bics	r3, r2
    1210:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    1212:	6108      	str	r0, [r1, #16]
    1214:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1216:	b25b      	sxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	dbfb      	blt.n	1214 <adc_start_read_result+0x18>
    121c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    121e:	b25b      	sxtb	r3, r3
    1220:	2b00      	cmp	r3, #0
    1222:	dbfb      	blt.n	121c <adc_start_read_result+0x20>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1224:	7b0b      	ldrb	r3, [r1, #12]
    1226:	2202      	movs	r2, #2
    1228:	4313      	orrs	r3, r2
    122a:	730b      	strb	r3, [r1, #12]
    122c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    122e:	b25b      	sxtb	r3, r3
    1230:	2b00      	cmp	r3, #0
    1232:	dbfb      	blt.n	122c <adc_start_read_result+0x30>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1234:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    1236:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    1238:	2402      	movs	r4, #2
    123a:	e001      	b.n	1240 <adc_start_read_result+0x44>
	
	uint16_t temp = 0;
	adc_set_positive_input(&adc_instance, analogPin );
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    123c:	4210      	tst	r0, r2
    123e:	d10a      	bne.n	1256 <adc_start_read_result+0x5a>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1240:	7e0b      	ldrb	r3, [r1, #24]
    1242:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1244:	0002      	movs	r2, r0
    1246:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    1248:	421d      	tst	r5, r3
    124a:	d000      	beq.n	124e <adc_start_read_result+0x52>
		status_flags |= ADC_STATUS_WINDOW;
    124c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    124e:	421c      	tst	r4, r3
    1250:	d0f4      	beq.n	123c <adc_start_read_result+0x40>
		status_flags |= ADC_STATUS_OVERRUN;
    1252:	432a      	orrs	r2, r5
    1254:	e7f2      	b.n	123c <adc_start_read_result+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1256:	7e0a      	ldrb	r2, [r1, #24]
    1258:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    125a:	2301      	movs	r3, #1
    125c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    125e:	0750      	lsls	r0, r2, #29
    1260:	d501      	bpl.n	1266 <adc_start_read_result+0x6a>
		status_flags |= ADC_STATUS_WINDOW;
    1262:	2002      	movs	r0, #2
    1264:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    1266:	0792      	lsls	r2, r2, #30
    1268:	d501      	bpl.n	126e <adc_start_read_result+0x72>
		status_flags |= ADC_STATUS_OVERRUN;
    126a:	2204      	movs	r2, #4
    126c:	4313      	orrs	r3, r2
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    126e:	07db      	lsls	r3, r3, #31
    1270:	d403      	bmi.n	127a <adc_start_read_result+0x7e>
	
	adc_read(&adc_instance, adc_result);
	temp = *adc_result;
    1272:	4b11      	ldr	r3, [pc, #68]	; (12b8 <adc_start_read_result+0xbc>)
    1274:	681b      	ldr	r3, [r3, #0]

 	return temp;
    1276:	8818      	ldrh	r0, [r3, #0]
}
    1278:	bd30      	pop	{r4, r5, pc}
    127a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    127c:	b25b      	sxtb	r3, r3
    127e:	2b00      	cmp	r3, #0
    1280:	dbfb      	blt.n	127a <adc_start_read_result+0x7e>
	adc_read(&adc_instance, adc_result);
    1282:	4b0d      	ldr	r3, [pc, #52]	; (12b8 <adc_start_read_result+0xbc>)
    1284:	681b      	ldr	r3, [r3, #0]
	*result = adc_module->RESULT.reg;
    1286:	8b4a      	ldrh	r2, [r1, #26]
    1288:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <adc_start_read_result+0xb8>)
    128c:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
    128e:	2301      	movs	r3, #1
    1290:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    1292:	7e0a      	ldrb	r2, [r1, #24]
    1294:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1296:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    1298:	0750      	lsls	r0, r2, #29
    129a:	d501      	bpl.n	12a0 <adc_start_read_result+0xa4>
		status_flags |= ADC_STATUS_WINDOW;
    129c:	2002      	movs	r0, #2
    129e:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    12a0:	0792      	lsls	r2, r2, #30
    12a2:	d501      	bpl.n	12a8 <adc_start_read_result+0xac>
		status_flags |= ADC_STATUS_OVERRUN;
    12a4:	2204      	movs	r2, #4
    12a6:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    12a8:	075b      	lsls	r3, r3, #29
    12aa:	d5e2      	bpl.n	1272 <adc_start_read_result+0x76>
	adc_module->INTFLAG.reg = int_flags;
    12ac:	2302      	movs	r3, #2
    12ae:	760b      	strb	r3, [r1, #24]
    12b0:	e7df      	b.n	1272 <adc_start_read_result+0x76>
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	200001a0 	.word	0x200001a0
    12b8:	20000098 	.word	0x20000098

000012bc <sensor_init>:
	
	
}

void sensor_init()
{
    12bc:	b510      	push	{r4, lr}
	//Enable Analog input 
	//Pull ADC inputs low
	
	configure_adc();
    12be:	4b01      	ldr	r3, [pc, #4]	; (12c4 <sensor_init+0x8>)
    12c0:	4798      	blx	r3
	//configure_adc_inputs();
    12c2:	bd10      	pop	{r4, pc}
    12c4:	00001171 	.word	0x00001171

000012c8 <enable_super_servo>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    12c8:	4b05      	ldr	r3, [pc, #20]	; (12e0 <enable_super_servo+0x18>)
    12ca:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    12cc:	2102      	movs	r1, #2
    12ce:	6893      	ldr	r3, [r2, #8]
    12d0:	4219      	tst	r1, r3
    12d2:	d1fc      	bne.n	12ce <enable_super_servo+0x6>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    12d4:	6813      	ldr	r3, [r2, #0]
    12d6:	2102      	movs	r1, #2
    12d8:	430b      	orrs	r3, r1
    12da:	6013      	str	r3, [r2, #0]
struct tcc_module tcc_ss_instance0;

void enable_super_servo()
{
	tcc_enable(&tcc_ss_instance0);
}
    12dc:	4770      	bx	lr
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	200001c0 	.word	0x200001c0

000012e4 <super_servo_tcc_init>:
{
	tcc_disable(&tcc_ss_instance0);
}

void super_servo_tcc_init()
{
    12e4:	b530      	push	{r4, r5, lr}
    12e6:	b0ab      	sub	sp, #172	; 0xac
	struct tcc_config config_tcc_ss;
	tcc_get_config_defaults(&config_tcc_ss, TCC0);
    12e8:	4d1a      	ldr	r5, [pc, #104]	; (1354 <super_servo_tcc_init+0x70>)
    12ea:	ac01      	add	r4, sp, #4
    12ec:	0029      	movs	r1, r5
    12ee:	0020      	movs	r0, r4
    12f0:	4b19      	ldr	r3, [pc, #100]	; (1358 <super_servo_tcc_init+0x74>)
    12f2:	4798      	blx	r3
	
	config_tcc_ss.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
    12f4:	2302      	movs	r3, #2
    12f6:	72e3      	strb	r3, [r4, #11]
	config_tcc_ss.counter.period = 0x9C40;
    12f8:	4a18      	ldr	r2, [pc, #96]	; (135c <super_servo_tcc_init+0x78>)
    12fa:	6062      	str	r2, [r4, #4]
	config_tcc_ss.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    12fc:	7623      	strb	r3, [r4, #24]
	
	config_tcc_ss.compare.wave_polarity[SERVO_1_CH] = TCC_WAVE_POLARITY_0;
    12fe:	2300      	movs	r3, #0
    1300:	7523      	strb	r3, [r4, #20]
	config_tcc_ss.compare.wave_polarity[SERVO_2_CH] = TCC_WAVE_POLARITY_0;
    1302:	7563      	strb	r3, [r4, #21]
	config_tcc_ss.compare.wave_polarity[SERVO_3_CH] = TCC_WAVE_POLARITY_0;
    1304:	75a3      	strb	r3, [r4, #22]
	config_tcc_ss.compare.wave_polarity[SERVO_4_CH] = TCC_WAVE_POLARITY_0;
    1306:	75e3      	strb	r3, [r4, #23]
	
	config_tcc_ss.compare.match[SERVO_1_CH] = 0;
    1308:	61e3      	str	r3, [r4, #28]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_1_WO] = true;
    130a:	2201      	movs	r2, #1
    130c:	2198      	movs	r1, #152	; 0x98
    130e:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_1_WO]        = PIN_PA04F_TCC0_WO0; //this is no longer correct--- should be now
    1310:	3994      	subs	r1, #148	; 0x94
    1312:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_1_WO]    = PINMUX_PA04F_TCC0_WO0; // this is no longer correct --- should be now
    1314:	4912      	ldr	r1, [pc, #72]	; (1360 <super_servo_tcc_init+0x7c>)
    1316:	67a1      	str	r1, [r4, #120]	; 0x78
	
	config_tcc_ss.compare.match[SERVO_2_CH] = 0;
    1318:	6223      	str	r3, [r4, #32]
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_2_WO] = true;
    131a:	2199      	movs	r1, #153	; 0x99
    131c:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_2_WO]        = PIN_PA05F_TCC0_WO1; //this is no longer correct--- should be now
    131e:	3994      	subs	r1, #148	; 0x94
    1320:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_2_WO]    = PINMUX_PA05F_TCC0_WO1; // this is no longer correct --- should be now
    1322:	4910      	ldr	r1, [pc, #64]	; (1364 <super_servo_tcc_init+0x80>)
    1324:	67e1      	str	r1, [r4, #124]	; 0x7c
	
	
	config_tcc_ss.compare.match[SERVO_3_CH] = 0;
    1326:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_3_WO] = true;
    1328:	219a      	movs	r1, #154	; 0x9a
    132a:	5462      	strb	r2, [r4, r1]
	config_tcc_ss.pins.wave_out_pin[SERVO_3_WO]        = PIN_PA06F_TCC0_WO2; //this is no longer correct--- should be now
    132c:	3994      	subs	r1, #148	; 0x94
    132e:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_3_WO]    = PINMUX_PA06F_TCC0_WO2; // this is no longer correct --- should be now
    1330:	480d      	ldr	r0, [pc, #52]	; (1368 <super_servo_tcc_init+0x84>)
    1332:	317a      	adds	r1, #122	; 0x7a
    1334:	5060      	str	r0, [r4, r1]
	
	config_tcc_ss.compare.match[SERVO_4_CH] = 0;
    1336:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc_ss.pins.enable_wave_out_pin[SERVO_4_WO] = true;
    1338:	339b      	adds	r3, #155	; 0x9b
    133a:	54e2      	strb	r2, [r4, r3]
	config_tcc_ss.pins.wave_out_pin[SERVO_4_WO]        = PIN_PA07F_TCC0_WO3; //this is no longer correct--- should be now
    133c:	3b94      	subs	r3, #148	; 0x94
    133e:	6663      	str	r3, [r4, #100]	; 0x64
	config_tcc_ss.pins.wave_out_pin_mux[SERVO_4_WO]    = PINMUX_PA07F_TCC0_WO3; // this is no longer correct --- should be now
    1340:	4a0a      	ldr	r2, [pc, #40]	; (136c <super_servo_tcc_init+0x88>)
    1342:	337d      	adds	r3, #125	; 0x7d
    1344:	50e2      	str	r2, [r4, r3]
	
	tcc_init(&tcc_ss_instance0, TCC0, &config_tcc_ss);
    1346:	0022      	movs	r2, r4
    1348:	0029      	movs	r1, r5
    134a:	4809      	ldr	r0, [pc, #36]	; (1370 <super_servo_tcc_init+0x8c>)
    134c:	4b09      	ldr	r3, [pc, #36]	; (1374 <super_servo_tcc_init+0x90>)
    134e:	4798      	blx	r3
	
}
    1350:	b02b      	add	sp, #172	; 0xac
    1352:	bd30      	pop	{r4, r5, pc}
    1354:	42001400 	.word	0x42001400
    1358:	000015b1 	.word	0x000015b1
    135c:	00009c40 	.word	0x00009c40
    1360:	00040005 	.word	0x00040005
    1364:	00050005 	.word	0x00050005
    1368:	00060005 	.word	0x00060005
    136c:	00070005 	.word	0x00070005
    1370:	200001c0 	.word	0x200001c0
    1374:	000016ed 	.word	0x000016ed

00001378 <super_servo_init>:

void super_servo_init()
{
    1378:	b510      	push	{r4, lr}
	super_servo_tcc_init();
    137a:	4b01      	ldr	r3, [pc, #4]	; (1380 <super_servo_init+0x8>)
    137c:	4798      	blx	r3
}
    137e:	bd10      	pop	{r4, pc}
    1380:	000012e5 	.word	0x000012e5

00001384 <update_super_servo>:
#include <asf.h>
#include "super_servo_control.h"
#include "super_servo.h"

void update_super_servo(uint8_t servo1 , uint8_t servo2 , uint8_t servo3, uint8_t servo4)
{
    1384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1386:	0007      	movs	r7, r0
    1388:	000e      	movs	r6, r1
    138a:	0015      	movs	r5, r2
    138c:	001c      	movs	r4, r3
	static uint8_t prev_servo1 = 0;
	static uint8_t prev_servo2 = 0;
	static uint8_t prev_servo3 = 0;
	static uint8_t prev_servo4 = 0;
	//Servo--1
	if(servo1  != prev_servo1)
    138e:	4b36      	ldr	r3, [pc, #216]	; (1468 <update_super_servo+0xe4>)
    1390:	781b      	ldrb	r3, [r3, #0]
    1392:	4283      	cmp	r3, r0
    1394:	d010      	beq.n	13b8 <update_super_servo+0x34>
	{
		if(servo1 != 255)
    1396:	28ff      	cmp	r0, #255	; 0xff
    1398:	d04e      	beq.n	1438 <update_super_servo+0xb4>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*servo1)/254) + 1280));
    139a:	20dc      	movs	r0, #220	; 0xdc
    139c:	0100      	lsls	r0, r0, #4
    139e:	4378      	muls	r0, r7
    13a0:	21fe      	movs	r1, #254	; 0xfe
    13a2:	4b32      	ldr	r3, [pc, #200]	; (146c <update_super_servo+0xe8>)
    13a4:	4798      	blx	r3
    13a6:	23a0      	movs	r3, #160	; 0xa0
    13a8:	00db      	lsls	r3, r3, #3
    13aa:	18c2      	adds	r2, r0, r3
    13ac:	2100      	movs	r1, #0
    13ae:	4830      	ldr	r0, [pc, #192]	; (1470 <update_super_servo+0xec>)
    13b0:	4b30      	ldr	r3, [pc, #192]	; (1474 <update_super_servo+0xf0>)
    13b2:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
		}
		prev_servo1 = servo1;
    13b4:	4b2c      	ldr	r3, [pc, #176]	; (1468 <update_super_servo+0xe4>)
    13b6:	701f      	strb	r7, [r3, #0]
	}
	
	//Servo--2
	if(servo2  != prev_servo2)
    13b8:	4b2f      	ldr	r3, [pc, #188]	; (1478 <update_super_servo+0xf4>)
    13ba:	781b      	ldrb	r3, [r3, #0]
    13bc:	42b3      	cmp	r3, r6
    13be:	d010      	beq.n	13e2 <update_super_servo+0x5e>
	{
		if(servo2 != 255)
    13c0:	2eff      	cmp	r6, #255	; 0xff
    13c2:	d03f      	beq.n	1444 <update_super_servo+0xc0>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*servo2)/254) + 1280));
    13c4:	20dc      	movs	r0, #220	; 0xdc
    13c6:	0100      	lsls	r0, r0, #4
    13c8:	4370      	muls	r0, r6
    13ca:	21fe      	movs	r1, #254	; 0xfe
    13cc:	4b27      	ldr	r3, [pc, #156]	; (146c <update_super_servo+0xe8>)
    13ce:	4798      	blx	r3
    13d0:	23a0      	movs	r3, #160	; 0xa0
    13d2:	00db      	lsls	r3, r3, #3
    13d4:	18c2      	adds	r2, r0, r3
    13d6:	2101      	movs	r1, #1
    13d8:	4825      	ldr	r0, [pc, #148]	; (1470 <update_super_servo+0xec>)
    13da:	4b26      	ldr	r3, [pc, #152]	; (1474 <update_super_servo+0xf0>)
    13dc:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
		}
		prev_servo2 = servo2;
    13de:	4b26      	ldr	r3, [pc, #152]	; (1478 <update_super_servo+0xf4>)
    13e0:	701e      	strb	r6, [r3, #0]
	}
	//Servo--3
	if(servo3  != prev_servo3)
    13e2:	4b26      	ldr	r3, [pc, #152]	; (147c <update_super_servo+0xf8>)
    13e4:	781b      	ldrb	r3, [r3, #0]
    13e6:	42ab      	cmp	r3, r5
    13e8:	d010      	beq.n	140c <update_super_servo+0x88>
	{
		if(servo3 != 255)
    13ea:	2dff      	cmp	r5, #255	; 0xff
    13ec:	d030      	beq.n	1450 <update_super_servo+0xcc>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*servo3)/254) + 1280));
    13ee:	20dc      	movs	r0, #220	; 0xdc
    13f0:	0100      	lsls	r0, r0, #4
    13f2:	4368      	muls	r0, r5
    13f4:	21fe      	movs	r1, #254	; 0xfe
    13f6:	4b1d      	ldr	r3, [pc, #116]	; (146c <update_super_servo+0xe8>)
    13f8:	4798      	blx	r3
    13fa:	23a0      	movs	r3, #160	; 0xa0
    13fc:	00db      	lsls	r3, r3, #3
    13fe:	18c2      	adds	r2, r0, r3
    1400:	2102      	movs	r1, #2
    1402:	481b      	ldr	r0, [pc, #108]	; (1470 <update_super_servo+0xec>)
    1404:	4b1b      	ldr	r3, [pc, #108]	; (1474 <update_super_servo+0xf0>)
    1406:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
		}
		prev_servo3 = servo3;
    1408:	4b1c      	ldr	r3, [pc, #112]	; (147c <update_super_servo+0xf8>)
    140a:	701d      	strb	r5, [r3, #0]
	}
	//Servo--4
	if(servo4  != prev_servo4)
    140c:	4b1c      	ldr	r3, [pc, #112]	; (1480 <update_super_servo+0xfc>)
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	42a3      	cmp	r3, r4
    1412:	d010      	beq.n	1436 <update_super_servo+0xb2>
	{
		if(servo4 != 255)
    1414:	2cff      	cmp	r4, #255	; 0xff
    1416:	d021      	beq.n	145c <update_super_servo+0xd8>
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*servo4)/254) + 1280));
    1418:	20dc      	movs	r0, #220	; 0xdc
    141a:	0100      	lsls	r0, r0, #4
    141c:	4360      	muls	r0, r4
    141e:	21fe      	movs	r1, #254	; 0xfe
    1420:	4b12      	ldr	r3, [pc, #72]	; (146c <update_super_servo+0xe8>)
    1422:	4798      	blx	r3
    1424:	23a0      	movs	r3, #160	; 0xa0
    1426:	00db      	lsls	r3, r3, #3
    1428:	18c2      	adds	r2, r0, r3
    142a:	2103      	movs	r1, #3
    142c:	4810      	ldr	r0, [pc, #64]	; (1470 <update_super_servo+0xec>)
    142e:	4b11      	ldr	r3, [pc, #68]	; (1474 <update_super_servo+0xf0>)
    1430:	4798      	blx	r3
		}
		else
		{
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
		}
		prev_servo4 = servo4;
    1432:	4b13      	ldr	r3, [pc, #76]	; (1480 <update_super_servo+0xfc>)
    1434:	701c      	strb	r4, [r3, #0]
	}
}
    1436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    1438:	2200      	movs	r2, #0
    143a:	2100      	movs	r1, #0
    143c:	480c      	ldr	r0, [pc, #48]	; (1470 <update_super_servo+0xec>)
    143e:	4b0d      	ldr	r3, [pc, #52]	; (1474 <update_super_servo+0xf0>)
    1440:	4798      	blx	r3
    1442:	e7b7      	b.n	13b4 <update_super_servo+0x30>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1444:	2200      	movs	r2, #0
    1446:	2101      	movs	r1, #1
    1448:	4809      	ldr	r0, [pc, #36]	; (1470 <update_super_servo+0xec>)
    144a:	4b0a      	ldr	r3, [pc, #40]	; (1474 <update_super_servo+0xf0>)
    144c:	4798      	blx	r3
    144e:	e7c6      	b.n	13de <update_super_servo+0x5a>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    1450:	2200      	movs	r2, #0
    1452:	2102      	movs	r1, #2
    1454:	4806      	ldr	r0, [pc, #24]	; (1470 <update_super_servo+0xec>)
    1456:	4b07      	ldr	r3, [pc, #28]	; (1474 <update_super_servo+0xf0>)
    1458:	4798      	blx	r3
    145a:	e7d5      	b.n	1408 <update_super_servo+0x84>
			tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    145c:	2200      	movs	r2, #0
    145e:	2103      	movs	r1, #3
    1460:	4803      	ldr	r0, [pc, #12]	; (1470 <update_super_servo+0xec>)
    1462:	4b04      	ldr	r3, [pc, #16]	; (1474 <update_super_servo+0xf0>)
    1464:	4798      	blx	r3
    1466:	e7e4      	b.n	1432 <update_super_servo+0xae>
    1468:	2000009c 	.word	0x2000009c
    146c:	000031e9 	.word	0x000031e9
    1470:	200001c0 	.word	0x200001c0
    1474:	00001a75 	.word	0x00001a75
    1478:	2000009d 	.word	0x2000009d
    147c:	2000009e 	.word	0x2000009e
    1480:	2000009f 	.word	0x2000009f

00001484 <update_super_servo_single>:

void update_super_servo_single(uint8_t port_no ,uint8_t super_servo)
{
    1484:	b510      	push	{r4, lr}
	switch (port_no)
    1486:	2832      	cmp	r0, #50	; 0x32
    1488:	d02c      	beq.n	14e4 <update_super_servo_single+0x60>
    148a:	d913      	bls.n	14b4 <update_super_servo_single+0x30>
    148c:	2833      	cmp	r0, #51	; 0x33
    148e:	d03f      	beq.n	1510 <update_super_servo_single+0x8c>
    1490:	2834      	cmp	r0, #52	; 0x34
    1492:	d120      	bne.n	14d6 <update_super_servo_single+0x52>
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
				}
				break;
		case '4':
				if(super_servo != 255)
    1494:	29ff      	cmp	r1, #255	; 0xff
    1496:	d051      	beq.n	153c <update_super_servo_single+0xb8>
				{
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, (((3520*super_servo)/254) + 1280));
    1498:	20dc      	movs	r0, #220	; 0xdc
    149a:	0100      	lsls	r0, r0, #4
    149c:	4348      	muls	r0, r1
    149e:	21fe      	movs	r1, #254	; 0xfe
    14a0:	4b29      	ldr	r3, [pc, #164]	; (1548 <update_super_servo_single+0xc4>)
    14a2:	4798      	blx	r3
    14a4:	23a0      	movs	r3, #160	; 0xa0
    14a6:	00db      	lsls	r3, r3, #3
    14a8:	18c2      	adds	r2, r0, r3
    14aa:	2103      	movs	r1, #3
    14ac:	4827      	ldr	r0, [pc, #156]	; (154c <update_super_servo_single+0xc8>)
    14ae:	4b28      	ldr	r3, [pc, #160]	; (1550 <update_super_servo_single+0xcc>)
    14b0:	4798      	blx	r3
    14b2:	e010      	b.n	14d6 <update_super_servo_single+0x52>
	switch (port_no)
    14b4:	2831      	cmp	r0, #49	; 0x31
    14b6:	d10e      	bne.n	14d6 <update_super_servo_single+0x52>
				if(super_servo != 255)
    14b8:	29ff      	cmp	r1, #255	; 0xff
    14ba:	d00d      	beq.n	14d8 <update_super_servo_single+0x54>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, (((3520*super_servo)/254) + 1280));
    14bc:	20dc      	movs	r0, #220	; 0xdc
    14be:	0100      	lsls	r0, r0, #4
    14c0:	4348      	muls	r0, r1
    14c2:	21fe      	movs	r1, #254	; 0xfe
    14c4:	4b20      	ldr	r3, [pc, #128]	; (1548 <update_super_servo_single+0xc4>)
    14c6:	4798      	blx	r3
    14c8:	23a0      	movs	r3, #160	; 0xa0
    14ca:	00db      	lsls	r3, r3, #3
    14cc:	18c2      	adds	r2, r0, r3
    14ce:	2100      	movs	r1, #0
    14d0:	481e      	ldr	r0, [pc, #120]	; (154c <update_super_servo_single+0xc8>)
    14d2:	4b1f      	ldr	r3, [pc, #124]	; (1550 <update_super_servo_single+0xcc>)
    14d4:	4798      	blx	r3
				break;	
		default:
				break;
	}
	
    14d6:	bd10      	pop	{r4, pc}
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_1_CH, 0);
    14d8:	2200      	movs	r2, #0
    14da:	2100      	movs	r1, #0
    14dc:	481b      	ldr	r0, [pc, #108]	; (154c <update_super_servo_single+0xc8>)
    14de:	4b1c      	ldr	r3, [pc, #112]	; (1550 <update_super_servo_single+0xcc>)
    14e0:	4798      	blx	r3
    14e2:	e7f8      	b.n	14d6 <update_super_servo_single+0x52>
				if(super_servo != 255)
    14e4:	29ff      	cmp	r1, #255	; 0xff
    14e6:	d00d      	beq.n	1504 <update_super_servo_single+0x80>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, (((3520*super_servo)/254) + 1280));
    14e8:	20dc      	movs	r0, #220	; 0xdc
    14ea:	0100      	lsls	r0, r0, #4
    14ec:	4348      	muls	r0, r1
    14ee:	21fe      	movs	r1, #254	; 0xfe
    14f0:	4b15      	ldr	r3, [pc, #84]	; (1548 <update_super_servo_single+0xc4>)
    14f2:	4798      	blx	r3
    14f4:	23a0      	movs	r3, #160	; 0xa0
    14f6:	00db      	lsls	r3, r3, #3
    14f8:	18c2      	adds	r2, r0, r3
    14fa:	2101      	movs	r1, #1
    14fc:	4813      	ldr	r0, [pc, #76]	; (154c <update_super_servo_single+0xc8>)
    14fe:	4b14      	ldr	r3, [pc, #80]	; (1550 <update_super_servo_single+0xcc>)
    1500:	4798      	blx	r3
    1502:	e7e8      	b.n	14d6 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_2_CH, 0);
    1504:	2200      	movs	r2, #0
    1506:	2101      	movs	r1, #1
    1508:	4810      	ldr	r0, [pc, #64]	; (154c <update_super_servo_single+0xc8>)
    150a:	4b11      	ldr	r3, [pc, #68]	; (1550 <update_super_servo_single+0xcc>)
    150c:	4798      	blx	r3
    150e:	e7e2      	b.n	14d6 <update_super_servo_single+0x52>
				if(super_servo != 255)
    1510:	29ff      	cmp	r1, #255	; 0xff
    1512:	d00d      	beq.n	1530 <update_super_servo_single+0xac>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, (((3520*super_servo)/254) + 1280));
    1514:	20dc      	movs	r0, #220	; 0xdc
    1516:	0100      	lsls	r0, r0, #4
    1518:	4348      	muls	r0, r1
    151a:	21fe      	movs	r1, #254	; 0xfe
    151c:	4b0a      	ldr	r3, [pc, #40]	; (1548 <update_super_servo_single+0xc4>)
    151e:	4798      	blx	r3
    1520:	23a0      	movs	r3, #160	; 0xa0
    1522:	00db      	lsls	r3, r3, #3
    1524:	18c2      	adds	r2, r0, r3
    1526:	2102      	movs	r1, #2
    1528:	4808      	ldr	r0, [pc, #32]	; (154c <update_super_servo_single+0xc8>)
    152a:	4b09      	ldr	r3, [pc, #36]	; (1550 <update_super_servo_single+0xcc>)
    152c:	4798      	blx	r3
    152e:	e7d2      	b.n	14d6 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_3_CH, 0);
    1530:	2200      	movs	r2, #0
    1532:	2102      	movs	r1, #2
    1534:	4805      	ldr	r0, [pc, #20]	; (154c <update_super_servo_single+0xc8>)
    1536:	4b06      	ldr	r3, [pc, #24]	; (1550 <update_super_servo_single+0xcc>)
    1538:	4798      	blx	r3
    153a:	e7cc      	b.n	14d6 <update_super_servo_single+0x52>
					tcc_set_compare_value(&tcc_ss_instance0, SERVO_4_CH, 0);
    153c:	2200      	movs	r2, #0
    153e:	2103      	movs	r1, #3
    1540:	4802      	ldr	r0, [pc, #8]	; (154c <update_super_servo_single+0xc8>)
    1542:	4b03      	ldr	r3, [pc, #12]	; (1550 <update_super_servo_single+0xcc>)
    1544:	4798      	blx	r3
    1546:	e7c6      	b.n	14d6 <update_super_servo_single+0x52>
    1548:	000031e9 	.word	0x000031e9
    154c:	200001c0 	.word	0x200001c0
    1550:	00001a75 	.word	0x00001a75

00001554 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1554:	2000      	movs	r0, #0
    1556:	4770      	bx	lr

00001558 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1558:	b530      	push	{r4, r5, lr}
    155a:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    155c:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    155e:	2903      	cmp	r1, #3
    1560:	d900      	bls.n	1564 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1562:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1564:	4d11      	ldr	r5, [pc, #68]	; (15ac <_tcc_set_compare_value+0x54>)
    1566:	42aa      	cmp	r2, r5
    1568:	d8fb      	bhi.n	1562 <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    156a:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    156c:	2b00      	cmp	r3, #0
    156e:	d010      	beq.n	1592 <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    1570:	2480      	movs	r4, #128	; 0x80
    1572:	0264      	lsls	r4, r4, #9
    1574:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    1576:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1578:	421c      	tst	r4, r3
    157a:	d1fc      	bne.n	1576 <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    157c:	2480      	movs	r4, #128	; 0x80
    157e:	0324      	lsls	r4, r4, #12
    1580:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    1582:	6883      	ldr	r3, [r0, #8]
    1584:	421c      	tst	r4, r3
    1586:	d1fc      	bne.n	1582 <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    1588:	311c      	adds	r1, #28
    158a:	0089      	lsls	r1, r1, #2
    158c:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    158e:	2000      	movs	r0, #0
    1590:	e7e7      	b.n	1562 <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1592:	2480      	movs	r4, #128	; 0x80
    1594:	0064      	lsls	r4, r4, #1
    1596:	408c      	lsls	r4, r1
    1598:	6883      	ldr	r3, [r0, #8]
    159a:	421c      	tst	r4, r3
    159c:	d1fc      	bne.n	1598 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    159e:	3110      	adds	r1, #16
    15a0:	0089      	lsls	r1, r1, #2
    15a2:	1841      	adds	r1, r0, r1
    15a4:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    15a6:	2000      	movs	r0, #0
    15a8:	e7db      	b.n	1562 <_tcc_set_compare_value+0xa>
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	00ffffff 	.word	0x00ffffff

000015b0 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    15b0:	2300      	movs	r3, #0
    15b2:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    15b4:	4a4c      	ldr	r2, [pc, #304]	; (16e8 <tcc_get_config_defaults+0x138>)
    15b6:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    15b8:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    15ba:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    15bc:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    15be:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    15c0:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    15c2:	61c3      	str	r3, [r0, #28]
    15c4:	6203      	str	r3, [r0, #32]
    15c6:	6243      	str	r3, [r0, #36]	; 0x24
    15c8:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    15ca:	7503      	strb	r3, [r0, #20]
    15cc:	7543      	strb	r3, [r0, #21]
    15ce:	7583      	strb	r3, [r0, #22]
    15d0:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    15d2:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    15d4:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    15d6:	7403      	strb	r3, [r0, #16]
    15d8:	7443      	strb	r3, [r0, #17]
    15da:	7483      	strb	r3, [r0, #18]
    15dc:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    15de:	222c      	movs	r2, #44	; 0x2c
    15e0:	5483      	strb	r3, [r0, r2]
    15e2:	3201      	adds	r2, #1
    15e4:	5483      	strb	r3, [r0, r2]
    15e6:	3201      	adds	r2, #1
    15e8:	5483      	strb	r3, [r0, r2]
    15ea:	3201      	adds	r2, #1
    15ec:	5483      	strb	r3, [r0, r2]
    15ee:	3201      	adds	r2, #1
    15f0:	5483      	strb	r3, [r0, r2]
    15f2:	3201      	adds	r2, #1
    15f4:	5483      	strb	r3, [r0, r2]
    15f6:	3201      	adds	r2, #1
    15f8:	5483      	strb	r3, [r0, r2]
    15fa:	3201      	adds	r2, #1
    15fc:	5483      	strb	r3, [r0, r2]
    15fe:	3201      	adds	r2, #1
    1600:	5483      	strb	r3, [r0, r2]
    1602:	3201      	adds	r2, #1
    1604:	5483      	strb	r3, [r0, r2]
    1606:	3201      	adds	r2, #1
    1608:	5483      	strb	r3, [r0, r2]
    160a:	3201      	adds	r2, #1
    160c:	5483      	strb	r3, [r0, r2]
    160e:	3201      	adds	r2, #1
    1610:	5483      	strb	r3, [r0, r2]
    1612:	3201      	adds	r2, #1
    1614:	5483      	strb	r3, [r0, r2]
    1616:	3201      	adds	r2, #1
    1618:	5483      	strb	r3, [r0, r2]
    161a:	3201      	adds	r2, #1
    161c:	5483      	strb	r3, [r0, r2]
    161e:	3201      	adds	r2, #1
    1620:	5483      	strb	r3, [r0, r2]
    1622:	3201      	adds	r2, #1
    1624:	5483      	strb	r3, [r0, r2]
    1626:	3201      	adds	r2, #1
    1628:	5483      	strb	r3, [r0, r2]
    162a:	3201      	adds	r2, #1
    162c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    162e:	3201      	adds	r2, #1
    1630:	5483      	strb	r3, [r0, r2]
    1632:	3201      	adds	r2, #1
    1634:	5483      	strb	r3, [r0, r2]
    1636:	3201      	adds	r2, #1
    1638:	5483      	strb	r3, [r0, r2]
    163a:	3201      	adds	r2, #1
    163c:	5483      	strb	r3, [r0, r2]
    163e:	3201      	adds	r2, #1
    1640:	5483      	strb	r3, [r0, r2]
    1642:	3201      	adds	r2, #1
    1644:	5483      	strb	r3, [r0, r2]
    1646:	3201      	adds	r2, #1
    1648:	5483      	strb	r3, [r0, r2]
    164a:	3201      	adds	r2, #1
    164c:	5483      	strb	r3, [r0, r2]
    164e:	3201      	adds	r2, #1
    1650:	5483      	strb	r3, [r0, r2]
    1652:	3201      	adds	r2, #1
    1654:	5483      	strb	r3, [r0, r2]
    1656:	3201      	adds	r2, #1
    1658:	5483      	strb	r3, [r0, r2]
    165a:	3201      	adds	r2, #1
    165c:	5483      	strb	r3, [r0, r2]
    165e:	3201      	adds	r2, #1
    1660:	5483      	strb	r3, [r0, r2]
    1662:	3201      	adds	r2, #1
    1664:	5483      	strb	r3, [r0, r2]
    1666:	3201      	adds	r2, #1
    1668:	5483      	strb	r3, [r0, r2]
    166a:	3201      	adds	r2, #1
    166c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    166e:	3201      	adds	r2, #1
    1670:	5483      	strb	r3, [r0, r2]
    1672:	3201      	adds	r2, #1
    1674:	5483      	strb	r3, [r0, r2]
    1676:	3201      	adds	r2, #1
    1678:	5483      	strb	r3, [r0, r2]
    167a:	3201      	adds	r2, #1
    167c:	5483      	strb	r3, [r0, r2]
    167e:	3201      	adds	r2, #1
    1680:	5483      	strb	r3, [r0, r2]
    1682:	3201      	adds	r2, #1
    1684:	5483      	strb	r3, [r0, r2]
    1686:	3201      	adds	r2, #1
    1688:	5483      	strb	r3, [r0, r2]
    168a:	3201      	adds	r2, #1
    168c:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    168e:	3241      	adds	r2, #65	; 0x41
    1690:	5483      	strb	r3, [r0, r2]
    1692:	6583      	str	r3, [r0, #88]	; 0x58
    1694:	6783      	str	r3, [r0, #120]	; 0x78
    1696:	3201      	adds	r2, #1
    1698:	5483      	strb	r3, [r0, r2]
    169a:	65c3      	str	r3, [r0, #92]	; 0x5c
    169c:	67c3      	str	r3, [r0, #124]	; 0x7c
    169e:	3201      	adds	r2, #1
    16a0:	5483      	strb	r3, [r0, r2]
    16a2:	6603      	str	r3, [r0, #96]	; 0x60
    16a4:	3a1a      	subs	r2, #26
    16a6:	5083      	str	r3, [r0, r2]
    16a8:	321b      	adds	r2, #27
    16aa:	5483      	strb	r3, [r0, r2]
    16ac:	6643      	str	r3, [r0, #100]	; 0x64
    16ae:	3a17      	subs	r2, #23
    16b0:	5083      	str	r3, [r0, r2]
    16b2:	3218      	adds	r2, #24
    16b4:	5483      	strb	r3, [r0, r2]
    16b6:	6683      	str	r3, [r0, #104]	; 0x68
    16b8:	3a14      	subs	r2, #20
    16ba:	5083      	str	r3, [r0, r2]
    16bc:	3215      	adds	r2, #21
    16be:	5483      	strb	r3, [r0, r2]
    16c0:	66c3      	str	r3, [r0, #108]	; 0x6c
    16c2:	3a11      	subs	r2, #17
    16c4:	5083      	str	r3, [r0, r2]
    16c6:	3212      	adds	r2, #18
    16c8:	5483      	strb	r3, [r0, r2]
    16ca:	6703      	str	r3, [r0, #112]	; 0x70
    16cc:	3a0e      	subs	r2, #14
    16ce:	5083      	str	r3, [r0, r2]
    16d0:	320f      	adds	r2, #15
    16d2:	5483      	strb	r3, [r0, r2]
    16d4:	6743      	str	r3, [r0, #116]	; 0x74
    16d6:	3a0b      	subs	r2, #11
    16d8:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    16da:	2101      	movs	r1, #1
    16dc:	320c      	adds	r2, #12
    16de:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    16e0:	3201      	adds	r2, #1
    16e2:	5483      	strb	r3, [r0, r2]
}
    16e4:	4770      	bx	lr
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00ffffff 	.word	0x00ffffff

000016ec <tcc_init>:
{
    16ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ee:	46de      	mov	lr, fp
    16f0:	4657      	mov	r7, sl
    16f2:	464e      	mov	r6, r9
    16f4:	4645      	mov	r5, r8
    16f6:	b5e0      	push	{r5, r6, r7, lr}
    16f8:	b08d      	sub	sp, #52	; 0x34
    16fa:	0006      	movs	r6, r0
    16fc:	000c      	movs	r4, r1
    16fe:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    1700:	0008      	movs	r0, r1
    1702:	4bcd      	ldr	r3, [pc, #820]	; (1a38 <tcc_init+0x34c>)
    1704:	4798      	blx	r3
    1706:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    1708:	49cc      	ldr	r1, [pc, #816]	; (1a3c <tcc_init+0x350>)
    170a:	6a0a      	ldr	r2, [r1, #32]
    170c:	2020      	movs	r0, #32
    170e:	4302      	orrs	r2, r0
    1710:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1712:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1714:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1716:	0792      	lsls	r2, r2, #30
    1718:	d506      	bpl.n	1728 <tcc_init+0x3c>
}
    171a:	b00d      	add	sp, #52	; 0x34
    171c:	bc3c      	pop	{r2, r3, r4, r5}
    171e:	4690      	mov	r8, r2
    1720:	4699      	mov	r9, r3
    1722:	46a2      	mov	sl, r4
    1724:	46ab      	mov	fp, r5
    1726:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1728:	6822      	ldr	r2, [r4, #0]
    172a:	2701      	movs	r7, #1
    172c:	4017      	ands	r7, r2
    172e:	d1f4      	bne.n	171a <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    1730:	4ac3      	ldr	r2, [pc, #780]	; (1a40 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    1732:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    1734:	6829      	ldr	r1, [r5, #0]
    1736:	4291      	cmp	r1, r2
    1738:	d8ef      	bhi.n	171a <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    173a:	6869      	ldr	r1, [r5, #4]
    173c:	4291      	cmp	r1, r2
    173e:	d8ec      	bhi.n	171a <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    1740:	69e9      	ldr	r1, [r5, #28]
    1742:	4291      	cmp	r1, r2
    1744:	d900      	bls.n	1748 <tcc_init+0x5c>
    1746:	e18b      	b.n	1a60 <tcc_init+0x374>
    1748:	6a29      	ldr	r1, [r5, #32]
    174a:	4291      	cmp	r1, r2
    174c:	d900      	bls.n	1750 <tcc_init+0x64>
    174e:	e189      	b.n	1a64 <tcc_init+0x378>
    1750:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1752:	4291      	cmp	r1, r2
    1754:	d900      	bls.n	1758 <tcc_init+0x6c>
    1756:	e187      	b.n	1a68 <tcc_init+0x37c>
    1758:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    175a:	4291      	cmp	r1, r2
    175c:	d900      	bls.n	1760 <tcc_init+0x74>
    175e:	e185      	b.n	1a6c <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    1760:	7c2a      	ldrb	r2, [r5, #16]
    1762:	3a01      	subs	r2, #1
    1764:	4250      	negs	r0, r2
    1766:	4150      	adcs	r0, r2
    1768:	0602      	lsls	r2, r0, #24
    176a:	9201      	str	r2, [sp, #4]
    176c:	7c6a      	ldrb	r2, [r5, #17]
    176e:	2a01      	cmp	r2, #1
    1770:	d031      	beq.n	17d6 <tcc_init+0xea>
    1772:	7caa      	ldrb	r2, [r5, #18]
    1774:	2a01      	cmp	r2, #1
    1776:	d034      	beq.n	17e2 <tcc_init+0xf6>
    1778:	7cea      	ldrb	r2, [r5, #19]
    177a:	2a01      	cmp	r2, #1
    177c:	d037      	beq.n	17ee <tcc_init+0x102>
	if (config->run_in_standby) {
    177e:	22a1      	movs	r2, #161	; 0xa1
    1780:	5caa      	ldrb	r2, [r5, r2]
    1782:	2a00      	cmp	r2, #0
    1784:	d004      	beq.n	1790 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1786:	2280      	movs	r2, #128	; 0x80
    1788:	0112      	lsls	r2, r2, #4
    178a:	9901      	ldr	r1, [sp, #4]
    178c:	4311      	orrs	r1, r2
    178e:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    1790:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1792:	1e51      	subs	r1, r2, #1
    1794:	418a      	sbcs	r2, r1
    1796:	0092      	lsls	r2, r2, #2
    1798:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    179a:	7a6a      	ldrb	r2, [r5, #9]
    179c:	2a01      	cmp	r2, #1
    179e:	d02c      	beq.n	17fa <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    17a0:	2235      	movs	r2, #53	; 0x35
    17a2:	5caa      	ldrb	r2, [r5, r2]
    17a4:	2a03      	cmp	r2, #3
    17a6:	d900      	bls.n	17aa <tcc_init+0xbe>
    17a8:	e162      	b.n	1a70 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    17aa:	212c      	movs	r1, #44	; 0x2c
    17ac:	5c69      	ldrb	r1, [r5, r1]
    17ae:	290f      	cmp	r1, #15
    17b0:	d900      	bls.n	17b4 <tcc_init+0xc8>
    17b2:	e15d      	b.n	1a70 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    17b4:	7b28      	ldrb	r0, [r5, #12]
    17b6:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    17b8:	7ae8      	ldrb	r0, [r5, #11]
    17ba:	9005      	str	r0, [sp, #20]
    17bc:	202d      	movs	r0, #45	; 0x2d
    17be:	4682      	mov	sl, r0
    17c0:	44aa      	add	sl, r5
    17c2:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    17c4:	9702      	str	r7, [sp, #8]
    17c6:	4684      	mov	ip, r0
    17c8:	9606      	str	r6, [sp, #24]
    17ca:	000e      	movs	r6, r1
    17cc:	46a0      	mov	r8, r4
    17ce:	4654      	mov	r4, sl
    17d0:	46a9      	mov	r9, r5
    17d2:	9307      	str	r3, [sp, #28]
    17d4:	e047      	b.n	1866 <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    17d6:	2280      	movs	r2, #128	; 0x80
    17d8:	0492      	lsls	r2, r2, #18
    17da:	9901      	ldr	r1, [sp, #4]
    17dc:	4311      	orrs	r1, r2
    17de:	9101      	str	r1, [sp, #4]
    17e0:	e7c7      	b.n	1772 <tcc_init+0x86>
    17e2:	2280      	movs	r2, #128	; 0x80
    17e4:	04d2      	lsls	r2, r2, #19
    17e6:	9901      	ldr	r1, [sp, #4]
    17e8:	4311      	orrs	r1, r2
    17ea:	9101      	str	r1, [sp, #4]
    17ec:	e7c4      	b.n	1778 <tcc_init+0x8c>
    17ee:	2280      	movs	r2, #128	; 0x80
    17f0:	0512      	lsls	r2, r2, #20
    17f2:	9901      	ldr	r1, [sp, #4]
    17f4:	4311      	orrs	r1, r2
    17f6:	9101      	str	r1, [sp, #4]
    17f8:	e7c1      	b.n	177e <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    17fa:	9903      	ldr	r1, [sp, #12]
    17fc:	4311      	orrs	r1, r2
    17fe:	9103      	str	r1, [sp, #12]
    1800:	e7ce      	b.n	17a0 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1802:	0292      	lsls	r2, r2, #10
    1804:	25c0      	movs	r5, #192	; 0xc0
    1806:	012d      	lsls	r5, r5, #4
    1808:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    180a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    180c:	790d      	ldrb	r5, [r1, #4]
    180e:	2603      	movs	r6, #3
    1810:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1812:	4332      	orrs	r2, r6
    1814:	4655      	mov	r5, sl
    1816:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1818:	794e      	ldrb	r6, [r1, #5]
    181a:	0176      	lsls	r6, r6, #5
    181c:	2560      	movs	r5, #96	; 0x60
    181e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1820:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1822:	798d      	ldrb	r5, [r1, #6]
    1824:	022d      	lsls	r5, r5, #8
    1826:	26c0      	movs	r6, #192	; 0xc0
    1828:	00b6      	lsls	r6, r6, #2
    182a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    182c:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    182e:	79cd      	ldrb	r5, [r1, #7]
    1830:	032d      	lsls	r5, r5, #12
    1832:	26e0      	movs	r6, #224	; 0xe0
    1834:	01f6      	lsls	r6, r6, #7
    1836:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1838:	432a      	orrs	r2, r5
    183a:	4310      	orrs	r0, r2
    183c:	4303      	orrs	r3, r0
    183e:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    1840:	ab08      	add	r3, sp, #32
    1842:	4662      	mov	r2, ip
    1844:	2008      	movs	r0, #8
    1846:	181b      	adds	r3, r3, r0
    1848:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    184a:	2a04      	cmp	r2, #4
    184c:	d028      	beq.n	18a0 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    184e:	7c8a      	ldrb	r2, [r1, #18]
    1850:	2a03      	cmp	r2, #3
    1852:	d900      	bls.n	1856 <tcc_init+0x16a>
    1854:	e10c      	b.n	1a70 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    1856:	7a4e      	ldrb	r6, [r1, #9]
    1858:	340a      	adds	r4, #10
    185a:	2304      	movs	r3, #4
    185c:	469a      	mov	sl, r3
    185e:	44d4      	add	ip, sl
    1860:	2e0f      	cmp	r6, #15
    1862:	d900      	bls.n	1866 <tcc_init+0x17a>
    1864:	e104      	b.n	1a70 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1866:	0636      	lsls	r6, r6, #24
    1868:	23f0      	movs	r3, #240	; 0xf0
    186a:	051b      	lsls	r3, r3, #20
    186c:	401e      	ands	r6, r3
    186e:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1870:	7825      	ldrb	r5, [r4, #0]
    1872:	042d      	lsls	r5, r5, #16
    1874:	23ff      	movs	r3, #255	; 0xff
    1876:	041b      	lsls	r3, r3, #16
    1878:	401d      	ands	r5, r3
    187a:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    187c:	7863      	ldrb	r3, [r4, #1]
    187e:	2080      	movs	r0, #128	; 0x80
    1880:	2b00      	cmp	r3, #0
    1882:	d100      	bne.n	1886 <tcc_init+0x19a>
    1884:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1886:	788f      	ldrb	r7, [r1, #2]
    1888:	2308      	movs	r3, #8
    188a:	2f00      	cmp	r7, #0
    188c:	d100      	bne.n	1890 <tcc_init+0x1a4>
    188e:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1890:	78cf      	ldrb	r7, [r1, #3]
    1892:	46bb      	mov	fp, r7
    1894:	2710      	movs	r7, #16
    1896:	465d      	mov	r5, fp
    1898:	2d00      	cmp	r5, #0
    189a:	d1b2      	bne.n	1802 <tcc_init+0x116>
    189c:	9f02      	ldr	r7, [sp, #8]
    189e:	e7b0      	b.n	1802 <tcc_init+0x116>
    18a0:	9e06      	ldr	r6, [sp, #24]
    18a2:	4644      	mov	r4, r8
    18a4:	464d      	mov	r5, r9
    18a6:	9b07      	ldr	r3, [sp, #28]
    18a8:	4648      	mov	r0, r9
    18aa:	3050      	adds	r0, #80	; 0x50
    18ac:	4649      	mov	r1, r9
    18ae:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    18b0:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    18b2:	2780      	movs	r7, #128	; 0x80
    18b4:	027f      	lsls	r7, r7, #9
    18b6:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    18b8:	2701      	movs	r7, #1
    18ba:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    18bc:	2702      	movs	r7, #2
    18be:	37ff      	adds	r7, #255	; 0xff
    18c0:	46ba      	mov	sl, r7
    18c2:	001f      	movs	r7, r3
    18c4:	0013      	movs	r3, r2
    18c6:	46a0      	mov	r8, r4
    18c8:	003c      	movs	r4, r7
    18ca:	e007      	b.n	18dc <tcc_init+0x1f0>
    18cc:	4657      	mov	r7, sl
    18ce:	4097      	lsls	r7, r2
    18d0:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    18d2:	3201      	adds	r2, #1
    18d4:	3001      	adds	r0, #1
    18d6:	3102      	adds	r1, #2
    18d8:	2a08      	cmp	r2, #8
    18da:	d00e      	beq.n	18fa <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    18dc:	7807      	ldrb	r7, [r0, #0]
    18de:	2f00      	cmp	r7, #0
    18e0:	d002      	beq.n	18e8 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    18e2:	4667      	mov	r7, ip
    18e4:	4097      	lsls	r7, r2
    18e6:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    18e8:	780f      	ldrb	r7, [r1, #0]
    18ea:	2f00      	cmp	r7, #0
    18ec:	d0f1      	beq.n	18d2 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    18ee:	2f02      	cmp	r7, #2
    18f0:	d0ec      	beq.n	18cc <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    18f2:	464f      	mov	r7, r9
    18f4:	4097      	lsls	r7, r2
    18f6:	433b      	orrs	r3, r7
    18f8:	e7eb      	b.n	18d2 <tcc_init+0x1e6>
    18fa:	0022      	movs	r2, r4
    18fc:	4644      	mov	r4, r8
    18fe:	4698      	mov	r8, r3
    1900:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1902:	7e6a      	ldrb	r2, [r5, #25]
    1904:	0112      	lsls	r2, r2, #4
    1906:	2130      	movs	r1, #48	; 0x30
    1908:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    190a:	7e28      	ldrb	r0, [r5, #24]
    190c:	2207      	movs	r2, #7
    190e:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1910:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1912:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1914:	2080      	movs	r0, #128	; 0x80
    1916:	0240      	lsls	r0, r0, #9
    1918:	000f      	movs	r7, r1
    191a:	e002      	b.n	1922 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    191c:	3201      	adds	r2, #1
    191e:	2a04      	cmp	r2, #4
    1920:	d007      	beq.n	1932 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    1922:	18a9      	adds	r1, r5, r2
    1924:	7d09      	ldrb	r1, [r1, #20]
    1926:	2900      	cmp	r1, #0
    1928:	d0f8      	beq.n	191c <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    192a:	0001      	movs	r1, r0
    192c:	4091      	lsls	r1, r2
    192e:	430f      	orrs	r7, r1
    1930:	e7f4      	b.n	191c <tcc_init+0x230>
    1932:	46b9      	mov	r9, r7
    1934:	1d32      	adds	r2, r6, #4
    1936:	0030      	movs	r0, r6
    1938:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    193a:	2100      	movs	r1, #0
    193c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    193e:	4290      	cmp	r0, r2
    1940:	d1fc      	bne.n	193c <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    1942:	2200      	movs	r2, #0
    1944:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1946:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1948:	009b      	lsls	r3, r3, #2
    194a:	4a3e      	ldr	r2, [pc, #248]	; (1a44 <tcc_init+0x358>)
    194c:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    194e:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1950:	23a0      	movs	r3, #160	; 0xa0
    1952:	5cea      	ldrb	r2, [r5, r3]
    1954:	3b64      	subs	r3, #100	; 0x64
    1956:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1958:	a909      	add	r1, sp, #36	; 0x24
    195a:	7aab      	ldrb	r3, [r5, #10]
    195c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    195e:	2011      	movs	r0, #17
    1960:	4b39      	ldr	r3, [pc, #228]	; (1a48 <tcc_init+0x35c>)
    1962:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1964:	2011      	movs	r0, #17
    1966:	4b39      	ldr	r3, [pc, #228]	; (1a4c <tcc_init+0x360>)
    1968:	4798      	blx	r3
    196a:	002f      	movs	r7, r5
    196c:	3798      	adds	r7, #152	; 0x98
    196e:	002e      	movs	r6, r5
    1970:	3658      	adds	r6, #88	; 0x58
    1972:	2378      	movs	r3, #120	; 0x78
    1974:	469a      	mov	sl, r3
    1976:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1978:	3b77      	subs	r3, #119	; 0x77
    197a:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    197c:	0023      	movs	r3, r4
    197e:	4654      	mov	r4, sl
    1980:	469a      	mov	sl, r3
    1982:	e003      	b.n	198c <tcc_init+0x2a0>
    1984:	3701      	adds	r7, #1
    1986:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1988:	42b4      	cmp	r4, r6
    198a:	d014      	beq.n	19b6 <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    198c:	783b      	ldrb	r3, [r7, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d0f8      	beq.n	1984 <tcc_init+0x298>
    1992:	ab08      	add	r3, sp, #32
    1994:	465a      	mov	r2, fp
    1996:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1998:	2300      	movs	r3, #0
    199a:	aa08      	add	r2, sp, #32
    199c:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    199e:	0013      	movs	r3, r2
    19a0:	2220      	movs	r2, #32
    19a2:	18b2      	adds	r2, r6, r2
    19a4:	7812      	ldrb	r2, [r2, #0]
    19a6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    19a8:	465a      	mov	r2, fp
    19aa:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    19ac:	7830      	ldrb	r0, [r6, #0]
    19ae:	0019      	movs	r1, r3
    19b0:	4b27      	ldr	r3, [pc, #156]	; (1a50 <tcc_init+0x364>)
    19b2:	4798      	blx	r3
    19b4:	e7e6      	b.n	1984 <tcc_init+0x298>
    19b6:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    19b8:	9b04      	ldr	r3, [sp, #16]
    19ba:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    19bc:	9a05      	ldr	r2, [sp, #20]
    19be:	0212      	lsls	r2, r2, #8
    19c0:	4313      	orrs	r3, r2
    19c2:	9a01      	ldr	r2, [sp, #4]
    19c4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    19c6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    19c8:	2204      	movs	r2, #4
    19ca:	68a3      	ldr	r3, [r4, #8]
    19cc:	421a      	tst	r2, r3
    19ce:	d1fc      	bne.n	19ca <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    19d0:	23ff      	movs	r3, #255	; 0xff
    19d2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    19d4:	2204      	movs	r2, #4
    19d6:	68a3      	ldr	r3, [r4, #8]
    19d8:	421a      	tst	r2, r3
    19da:	d1fc      	bne.n	19d6 <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    19dc:	466b      	mov	r3, sp
    19de:	7b1b      	ldrb	r3, [r3, #12]
    19e0:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    19e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19e4:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    19e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19e8:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    19ea:	4643      	mov	r3, r8
    19ec:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    19ee:	4a19      	ldr	r2, [pc, #100]	; (1a54 <tcc_init+0x368>)
    19f0:	68a3      	ldr	r3, [r4, #8]
    19f2:	4213      	tst	r3, r2
    19f4:	d1fc      	bne.n	19f0 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    19f6:	464b      	mov	r3, r9
    19f8:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    19fa:	2210      	movs	r2, #16
    19fc:	68a3      	ldr	r3, [r4, #8]
    19fe:	421a      	tst	r2, r3
    1a00:	d1fc      	bne.n	19fc <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    1a02:	682b      	ldr	r3, [r5, #0]
    1a04:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1a06:	4a14      	ldr	r2, [pc, #80]	; (1a58 <tcc_init+0x36c>)
    1a08:	68a3      	ldr	r3, [r4, #8]
    1a0a:	4213      	tst	r3, r2
    1a0c:	d1fc      	bne.n	1a08 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    1a0e:	686b      	ldr	r3, [r5, #4]
    1a10:	6423      	str	r3, [r4, #64]	; 0x40
    1a12:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1a14:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1a16:	4811      	ldr	r0, [pc, #68]	; (1a5c <tcc_init+0x370>)
    1a18:	0002      	movs	r2, r0
    1a1a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    1a1c:	68a3      	ldr	r3, [r4, #8]
    1a1e:	421a      	tst	r2, r3
    1a20:	d1fc      	bne.n	1a1c <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    1a22:	cd04      	ldmia	r5!, {r2}
    1a24:	000b      	movs	r3, r1
    1a26:	3310      	adds	r3, #16
    1a28:	009b      	lsls	r3, r3, #2
    1a2a:	18e3      	adds	r3, r4, r3
    1a2c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1a2e:	3101      	adds	r1, #1
    1a30:	2904      	cmp	r1, #4
    1a32:	d1f1      	bne.n	1a18 <tcc_init+0x32c>
	return STATUS_OK;
    1a34:	2000      	movs	r0, #0
    1a36:	e670      	b.n	171a <tcc_init+0x2e>
    1a38:	00001555 	.word	0x00001555
    1a3c:	40000400 	.word	0x40000400
    1a40:	00ffffff 	.word	0x00ffffff
    1a44:	20000200 	.word	0x20000200
    1a48:	00002ddd 	.word	0x00002ddd
    1a4c:	00002d51 	.word	0x00002d51
    1a50:	00002ed5 	.word	0x00002ed5
    1a54:	00020040 	.word	0x00020040
    1a58:	00040080 	.word	0x00040080
    1a5c:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1a60:	2017      	movs	r0, #23
    1a62:	e65a      	b.n	171a <tcc_init+0x2e>
    1a64:	2017      	movs	r0, #23
    1a66:	e658      	b.n	171a <tcc_init+0x2e>
    1a68:	2017      	movs	r0, #23
    1a6a:	e656      	b.n	171a <tcc_init+0x2e>
    1a6c:	2017      	movs	r0, #23
    1a6e:	e654      	b.n	171a <tcc_init+0x2e>
    1a70:	2017      	movs	r0, #23
    1a72:	e652      	b.n	171a <tcc_init+0x2e>

00001a74 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1a74:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1a76:	233c      	movs	r3, #60	; 0x3c
    1a78:	5cc3      	ldrb	r3, [r0, r3]
    1a7a:	4c01      	ldr	r4, [pc, #4]	; (1a80 <tcc_set_compare_value+0xc>)
    1a7c:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1a7e:	bd10      	pop	{r4, pc}
    1a80:	00001559 	.word	0x00001559

00001a84 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a86:	46c6      	mov	lr, r8
    1a88:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1a8a:	0080      	lsls	r0, r0, #2
    1a8c:	4b0e      	ldr	r3, [pc, #56]	; (1ac8 <_tcc_interrupt_handler+0x44>)
    1a8e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1a90:	683b      	ldr	r3, [r7, #0]
    1a92:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1a98:	4013      	ands	r3, r2
    1a9a:	401e      	ands	r6, r3
    1a9c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1a9e:	4b0b      	ldr	r3, [pc, #44]	; (1acc <_tcc_interrupt_handler+0x48>)
    1aa0:	4698      	mov	r8, r3
    1aa2:	e002      	b.n	1aaa <_tcc_interrupt_handler+0x26>
    1aa4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1aa6:	2c30      	cmp	r4, #48	; 0x30
    1aa8:	d00a      	beq.n	1ac0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1aaa:	4643      	mov	r3, r8
    1aac:	58e5      	ldr	r5, [r4, r3]
    1aae:	4235      	tst	r5, r6
    1ab0:	d0f8      	beq.n	1aa4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1ab2:	193b      	adds	r3, r7, r4
    1ab4:	685b      	ldr	r3, [r3, #4]
    1ab6:	0038      	movs	r0, r7
    1ab8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1aba:	683b      	ldr	r3, [r7, #0]
    1abc:	62dd      	str	r5, [r3, #44]	; 0x2c
    1abe:	e7f1      	b.n	1aa4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1ac0:	bc04      	pop	{r2}
    1ac2:	4690      	mov	r8, r2
    1ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	20000200 	.word	0x20000200
    1acc:	00003688 	.word	0x00003688

00001ad0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1ad0:	b510      	push	{r4, lr}
    1ad2:	2000      	movs	r0, #0
    1ad4:	4b01      	ldr	r3, [pc, #4]	; (1adc <TCC0_Handler+0xc>)
    1ad6:	4798      	blx	r3
    1ad8:	bd10      	pop	{r4, pc}
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	00001a85 	.word	0x00001a85

00001ae0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1ae0:	4b06      	ldr	r3, [pc, #24]	; (1afc <_tc_get_inst_index+0x1c>)
    1ae2:	4298      	cmp	r0, r3
    1ae4:	d008      	beq.n	1af8 <_tc_get_inst_index+0x18>
    1ae6:	4a06      	ldr	r2, [pc, #24]	; (1b00 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1ae8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1aea:	4290      	cmp	r0, r2
    1aec:	d001      	beq.n	1af2 <_tc_get_inst_index+0x12>
}
    1aee:	0018      	movs	r0, r3
    1af0:	4770      	bx	lr
    1af2:	3301      	adds	r3, #1
			return i;
    1af4:	b2db      	uxtb	r3, r3
    1af6:	e7fa      	b.n	1aee <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1af8:	2300      	movs	r3, #0
    1afa:	e7fb      	b.n	1af4 <_tc_get_inst_index+0x14>
    1afc:	42001800 	.word	0x42001800
    1b00:	42001c00 	.word	0x42001c00

00001b04 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b06:	b085      	sub	sp, #20
    1b08:	0004      	movs	r4, r0
    1b0a:	000d      	movs	r5, r1
    1b0c:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1b0e:	0008      	movs	r0, r1
    1b10:	4b82      	ldr	r3, [pc, #520]	; (1d1c <tc_init+0x218>)
    1b12:	4798      	blx	r3
    1b14:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1b16:	ab03      	add	r3, sp, #12
    1b18:	2212      	movs	r2, #18
    1b1a:	701a      	strb	r2, [r3, #0]
    1b1c:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1b1e:	ab02      	add	r3, sp, #8
    1b20:	322e      	adds	r2, #46	; 0x2e
    1b22:	801a      	strh	r2, [r3, #0]
    1b24:	3240      	adds	r2, #64	; 0x40
    1b26:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1b28:	2300      	movs	r3, #0
    1b2a:	60a3      	str	r3, [r4, #8]
    1b2c:	60e3      	str	r3, [r4, #12]
    1b2e:	6123      	str	r3, [r4, #16]
    1b30:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1b32:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1b34:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1b36:	0082      	lsls	r2, r0, #2
    1b38:	4b79      	ldr	r3, [pc, #484]	; (1d20 <tc_init+0x21c>)
    1b3a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1b3c:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1b3e:	78b3      	ldrb	r3, [r6, #2]
    1b40:	2b08      	cmp	r3, #8
    1b42:	d006      	beq.n	1b52 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1b44:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b46:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1b48:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b4a:	07db      	lsls	r3, r3, #31
    1b4c:	d505      	bpl.n	1b5a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1b4e:	b005      	add	sp, #20
    1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1b52:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1b54:	07fa      	lsls	r2, r7, #31
    1b56:	d4fa      	bmi.n	1b4e <tc_init+0x4a>
    1b58:	e7f4      	b.n	1b44 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b5a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1b5c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b5e:	06db      	lsls	r3, r3, #27
    1b60:	d4f5      	bmi.n	1b4e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1b62:	882b      	ldrh	r3, [r5, #0]
    1b64:	079b      	lsls	r3, r3, #30
    1b66:	d4f2      	bmi.n	1b4e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1b68:	7c33      	ldrb	r3, [r6, #16]
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	d000      	beq.n	1b70 <tc_init+0x6c>
    1b6e:	e07a      	b.n	1c66 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1b70:	7f33      	ldrb	r3, [r6, #28]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d000      	beq.n	1b78 <tc_init+0x74>
    1b76:	e082      	b.n	1c7e <tc_init+0x17a>
    1b78:	496a      	ldr	r1, [pc, #424]	; (1d24 <tc_init+0x220>)
    1b7a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1b7c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1b7e:	ab02      	add	r3, sp, #8
    1b80:	5ad3      	ldrh	r3, [r2, r3]
    1b82:	4303      	orrs	r3, r0
    1b84:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1b86:	78b3      	ldrb	r3, [r6, #2]
    1b88:	2b08      	cmp	r3, #8
    1b8a:	d100      	bne.n	1b8e <tc_init+0x8a>
    1b8c:	e087      	b.n	1c9e <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1b8e:	7833      	ldrb	r3, [r6, #0]
    1b90:	466a      	mov	r2, sp
    1b92:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1b94:	ab03      	add	r3, sp, #12
    1b96:	5ddf      	ldrb	r7, [r3, r7]
    1b98:	4669      	mov	r1, sp
    1b9a:	0038      	movs	r0, r7
    1b9c:	4b62      	ldr	r3, [pc, #392]	; (1d28 <tc_init+0x224>)
    1b9e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1ba0:	0038      	movs	r0, r7
    1ba2:	4b62      	ldr	r3, [pc, #392]	; (1d2c <tc_init+0x228>)
    1ba4:	4798      	blx	r3
	ctrla_tmp =
    1ba6:	8931      	ldrh	r1, [r6, #8]
    1ba8:	88b3      	ldrh	r3, [r6, #4]
    1baa:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1bac:	78b1      	ldrb	r1, [r6, #2]
    1bae:	79b2      	ldrb	r2, [r6, #6]
    1bb0:	4311      	orrs	r1, r2
	ctrla_tmp =
    1bb2:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    1bb4:	7873      	ldrb	r3, [r6, #1]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d002      	beq.n	1bc0 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1bba:	2380      	movs	r3, #128	; 0x80
    1bbc:	011b      	lsls	r3, r3, #4
    1bbe:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bc0:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bc2:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1bc4:	b25b      	sxtb	r3, r3
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	dbfb      	blt.n	1bc2 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1bca:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1bcc:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1bce:	1e4b      	subs	r3, r1, #1
    1bd0:	4199      	sbcs	r1, r3
    1bd2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1bd4:	7bb3      	ldrb	r3, [r6, #14]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d001      	beq.n	1bde <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1bda:	2301      	movs	r3, #1
    1bdc:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bde:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1be0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1be2:	b25b      	sxtb	r3, r3
    1be4:	2b00      	cmp	r3, #0
    1be6:	dbfb      	blt.n	1be0 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1be8:	23ff      	movs	r3, #255	; 0xff
    1bea:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1bec:	2900      	cmp	r1, #0
    1bee:	d005      	beq.n	1bfc <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1bf0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1bf2:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    1bf4:	b25b      	sxtb	r3, r3
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	dbfb      	blt.n	1bf2 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1bfa:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    1bfc:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1bfe:	7af3      	ldrb	r3, [r6, #11]
    1c00:	2b00      	cmp	r3, #0
    1c02:	d001      	beq.n	1c08 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1c04:	2310      	movs	r3, #16
    1c06:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    1c08:	7b33      	ldrb	r3, [r6, #12]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d001      	beq.n	1c12 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1c0e:	2320      	movs	r3, #32
    1c10:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c12:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c14:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1c16:	b25b      	sxtb	r3, r3
    1c18:	2b00      	cmp	r3, #0
    1c1a:	dbfb      	blt.n	1c14 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1c1c:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c1e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c20:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1c22:	b25b      	sxtb	r3, r3
    1c24:	2b00      	cmp	r3, #0
    1c26:	dbfb      	blt.n	1c20 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    1c28:	7923      	ldrb	r3, [r4, #4]
    1c2a:	2b04      	cmp	r3, #4
    1c2c:	d03f      	beq.n	1cae <tc_init+0x1aa>
    1c2e:	2b08      	cmp	r3, #8
    1c30:	d05e      	beq.n	1cf0 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1c32:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1c34:	2b00      	cmp	r3, #0
    1c36:	d000      	beq.n	1c3a <tc_init+0x136>
    1c38:	e789      	b.n	1b4e <tc_init+0x4a>
    1c3a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	dbfb      	blt.n	1c3a <tc_init+0x136>
				= config->counter_16_bit.value;
    1c42:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1c44:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c46:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c48:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c4a:	b25b      	sxtb	r3, r3
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	dbfb      	blt.n	1c48 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1c50:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1c52:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c54:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c56:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1c58:	b25b      	sxtb	r3, r3
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	dbfb      	blt.n	1c56 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1c5e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1c60:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1c62:	2000      	movs	r0, #0
    1c64:	e773      	b.n	1b4e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c66:	a901      	add	r1, sp, #4
    1c68:	2301      	movs	r3, #1
    1c6a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c6c:	2200      	movs	r2, #0
    1c6e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1c70:	7e32      	ldrb	r2, [r6, #24]
    1c72:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c74:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c76:	7d30      	ldrb	r0, [r6, #20]
    1c78:	4b2d      	ldr	r3, [pc, #180]	; (1d30 <tc_init+0x22c>)
    1c7a:	4798      	blx	r3
    1c7c:	e778      	b.n	1b70 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1c7e:	a901      	add	r1, sp, #4
    1c80:	2301      	movs	r3, #1
    1c82:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1c84:	2200      	movs	r2, #0
    1c86:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1c88:	3224      	adds	r2, #36	; 0x24
    1c8a:	18b2      	adds	r2, r6, r2
    1c8c:	7812      	ldrb	r2, [r2, #0]
    1c8e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1c90:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1c92:	331f      	adds	r3, #31
    1c94:	18f3      	adds	r3, r6, r3
    1c96:	7818      	ldrb	r0, [r3, #0]
    1c98:	4b25      	ldr	r3, [pc, #148]	; (1d30 <tc_init+0x22c>)
    1c9a:	4798      	blx	r3
    1c9c:	e76c      	b.n	1b78 <tc_init+0x74>
    1c9e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1ca0:	1c7a      	adds	r2, r7, #1
    1ca2:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1ca4:	ab02      	add	r3, sp, #8
    1ca6:	5ad3      	ldrh	r3, [r2, r3]
    1ca8:	4303      	orrs	r3, r0
    1caa:	620b      	str	r3, [r1, #32]
    1cac:	e76f      	b.n	1b8e <tc_init+0x8a>
    1cae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cb0:	b25b      	sxtb	r3, r3
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	dbfb      	blt.n	1cae <tc_init+0x1aa>
					config->counter_8_bit.value;
    1cb6:	2328      	movs	r3, #40	; 0x28
    1cb8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1cba:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cbc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cbe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cc0:	b25b      	sxtb	r3, r3
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	dbfb      	blt.n	1cbe <tc_init+0x1ba>
					config->counter_8_bit.period;
    1cc6:	2329      	movs	r3, #41	; 0x29
    1cc8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1cca:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1ccc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cd0:	b25b      	sxtb	r3, r3
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	dbfb      	blt.n	1cce <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    1cd6:	232a      	movs	r3, #42	; 0x2a
    1cd8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    1cda:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cdc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cde:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ce0:	b25b      	sxtb	r3, r3
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	dbfb      	blt.n	1cde <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    1ce6:	232b      	movs	r3, #43	; 0x2b
    1ce8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    1cea:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    1cec:	2000      	movs	r0, #0
    1cee:	e72e      	b.n	1b4e <tc_init+0x4a>
    1cf0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1cf2:	b25b      	sxtb	r3, r3
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	dbfb      	blt.n	1cf0 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    1cf8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1cfa:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1cfc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1cfe:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d00:	b25b      	sxtb	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	dbfb      	blt.n	1cfe <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    1d06:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1d08:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1d0a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1d0c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1d0e:	b25b      	sxtb	r3, r3
    1d10:	2b00      	cmp	r3, #0
    1d12:	dbfb      	blt.n	1d0c <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1d14:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1d16:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    1d18:	2000      	movs	r0, #0
    1d1a:	e718      	b.n	1b4e <tc_init+0x4a>
    1d1c:	00001ae1 	.word	0x00001ae1
    1d20:	20000204 	.word	0x20000204
    1d24:	40000400 	.word	0x40000400
    1d28:	00002ddd 	.word	0x00002ddd
    1d2c:	00002d51 	.word	0x00002d51
    1d30:	00002ed5 	.word	0x00002ed5

00001d34 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    1d34:	6802      	ldr	r2, [r0, #0]
    1d36:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1d38:	b25b      	sxtb	r3, r3
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	dbfb      	blt.n	1d36 <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1d3e:	7903      	ldrb	r3, [r0, #4]
    1d40:	2b04      	cmp	r3, #4
    1d42:	d005      	beq.n	1d50 <tc_set_count_value+0x1c>
    1d44:	2b08      	cmp	r3, #8
    1d46:	d00b      	beq.n	1d60 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1d48:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d004      	beq.n	1d58 <tc_set_count_value+0x24>
	}
}
    1d4e:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1d50:	b2c9      	uxtb	r1, r1
    1d52:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    1d54:	2000      	movs	r0, #0
    1d56:	e7fa      	b.n	1d4e <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1d58:	b289      	uxth	r1, r1
    1d5a:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    1d5c:	2000      	movs	r0, #0
    1d5e:	e7f6      	b.n	1d4e <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1d60:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    1d62:	2000      	movs	r0, #0
    1d64:	e7f3      	b.n	1d4e <tc_set_count_value+0x1a>

00001d66 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1d66:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1d68:	6804      	ldr	r4, [r0, #0]
    1d6a:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1d6c:	b25b      	sxtb	r3, r3
    1d6e:	2b00      	cmp	r3, #0
    1d70:	dbfb      	blt.n	1d6a <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1d72:	7903      	ldrb	r3, [r0, #4]
    1d74:	2b04      	cmp	r3, #4
    1d76:	d005      	beq.n	1d84 <tc_set_compare_value+0x1e>
    1d78:	2b08      	cmp	r3, #8
    1d7a:	d014      	beq.n	1da6 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1d7c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d008      	beq.n	1d94 <tc_set_compare_value+0x2e>
}
    1d82:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1d84:	2017      	movs	r0, #23
			if (channel_index <
    1d86:	2901      	cmp	r1, #1
    1d88:	d8fb      	bhi.n	1d82 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    1d8a:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1d8c:	1861      	adds	r1, r4, r1
    1d8e:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1d90:	2000      	movs	r0, #0
    1d92:	e7f6      	b.n	1d82 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1d94:	2017      	movs	r0, #23
			if (channel_index <
    1d96:	2901      	cmp	r1, #1
    1d98:	d8f3      	bhi.n	1d82 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    1d9a:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1d9c:	310c      	adds	r1, #12
    1d9e:	0049      	lsls	r1, r1, #1
    1da0:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    1da2:	2000      	movs	r0, #0
    1da4:	e7ed      	b.n	1d82 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    1da6:	2017      	movs	r0, #23
			if (channel_index <
    1da8:	2901      	cmp	r1, #1
    1daa:	d8ea      	bhi.n	1d82 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    1dac:	3106      	adds	r1, #6
    1dae:	0089      	lsls	r1, r1, #2
    1db0:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    1db2:	2000      	movs	r0, #0
    1db4:	e7e5      	b.n	1d82 <tc_set_compare_value+0x1c>

00001db6 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1db6:	1c93      	adds	r3, r2, #2
    1db8:	009b      	lsls	r3, r3, #2
    1dba:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1dbc:	2a02      	cmp	r2, #2
    1dbe:	d009      	beq.n	1dd4 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1dc0:	2a03      	cmp	r2, #3
    1dc2:	d00c      	beq.n	1dde <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1dc4:	2301      	movs	r3, #1
    1dc6:	4093      	lsls	r3, r2
    1dc8:	001a      	movs	r2, r3
    1dca:	7e03      	ldrb	r3, [r0, #24]
    1dcc:	4313      	orrs	r3, r2
    1dce:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1dd0:	2000      	movs	r0, #0
    1dd2:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1dd4:	7e03      	ldrb	r3, [r0, #24]
    1dd6:	2210      	movs	r2, #16
    1dd8:	4313      	orrs	r3, r2
    1dda:	7603      	strb	r3, [r0, #24]
    1ddc:	e7f8      	b.n	1dd0 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1dde:	7e03      	ldrb	r3, [r0, #24]
    1de0:	2220      	movs	r2, #32
    1de2:	4313      	orrs	r3, r2
    1de4:	7603      	strb	r3, [r0, #24]
    1de6:	e7f3      	b.n	1dd0 <tc_register_callback+0x1a>

00001de8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1de8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1dea:	0080      	lsls	r0, r0, #2
    1dec:	4b16      	ldr	r3, [pc, #88]	; (1e48 <_tc_interrupt_handler+0x60>)
    1dee:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1df0:	6823      	ldr	r3, [r4, #0]
    1df2:	7b9d      	ldrb	r5, [r3, #14]
    1df4:	7e22      	ldrb	r2, [r4, #24]
    1df6:	7e63      	ldrb	r3, [r4, #25]
    1df8:	4013      	ands	r3, r2
    1dfa:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1dfc:	07eb      	lsls	r3, r5, #31
    1dfe:	d406      	bmi.n	1e0e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1e00:	07ab      	lsls	r3, r5, #30
    1e02:	d40b      	bmi.n	1e1c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1e04:	06eb      	lsls	r3, r5, #27
    1e06:	d410      	bmi.n	1e2a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1e08:	06ab      	lsls	r3, r5, #26
    1e0a:	d415      	bmi.n	1e38 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1e0e:	0020      	movs	r0, r4
    1e10:	68a3      	ldr	r3, [r4, #8]
    1e12:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1e14:	2301      	movs	r3, #1
    1e16:	6822      	ldr	r2, [r4, #0]
    1e18:	7393      	strb	r3, [r2, #14]
    1e1a:	e7f1      	b.n	1e00 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1e1c:	0020      	movs	r0, r4
    1e1e:	68e3      	ldr	r3, [r4, #12]
    1e20:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1e22:	2302      	movs	r3, #2
    1e24:	6822      	ldr	r2, [r4, #0]
    1e26:	7393      	strb	r3, [r2, #14]
    1e28:	e7ec      	b.n	1e04 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1e2a:	0020      	movs	r0, r4
    1e2c:	6923      	ldr	r3, [r4, #16]
    1e2e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1e30:	2310      	movs	r3, #16
    1e32:	6822      	ldr	r2, [r4, #0]
    1e34:	7393      	strb	r3, [r2, #14]
    1e36:	e7e7      	b.n	1e08 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1e38:	0020      	movs	r0, r4
    1e3a:	6963      	ldr	r3, [r4, #20]
    1e3c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1e3e:	6823      	ldr	r3, [r4, #0]
    1e40:	2220      	movs	r2, #32
    1e42:	739a      	strb	r2, [r3, #14]
}
    1e44:	e7e2      	b.n	1e0c <_tc_interrupt_handler+0x24>
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	20000204 	.word	0x20000204

00001e4c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1e4c:	b510      	push	{r4, lr}
    1e4e:	2000      	movs	r0, #0
    1e50:	4b01      	ldr	r3, [pc, #4]	; (1e58 <TC1_Handler+0xc>)
    1e52:	4798      	blx	r3
    1e54:	bd10      	pop	{r4, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00001de9 	.word	0x00001de9

00001e5c <TC2_Handler>:
    1e5c:	b510      	push	{r4, lr}
    1e5e:	2001      	movs	r0, #1
    1e60:	4b01      	ldr	r3, [pc, #4]	; (1e68 <TC2_Handler+0xc>)
    1e62:	4798      	blx	r3
    1e64:	bd10      	pop	{r4, pc}
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	00001de9 	.word	0x00001de9

00001e6c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e6c:	4770      	bx	lr
	...

00001e70 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e70:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e72:	4b0a      	ldr	r3, [pc, #40]	; (1e9c <_sercom_set_handler+0x2c>)
    1e74:	781b      	ldrb	r3, [r3, #0]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d10c      	bne.n	1e94 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e7a:	4c09      	ldr	r4, [pc, #36]	; (1ea0 <_sercom_set_handler+0x30>)
    1e7c:	4d09      	ldr	r5, [pc, #36]	; (1ea4 <_sercom_set_handler+0x34>)
    1e7e:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1e80:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <_sercom_set_handler+0x38>)
    1e82:	2200      	movs	r2, #0
    1e84:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e86:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1e88:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e8a:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1e8c:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    1e8e:	3201      	adds	r2, #1
    1e90:	4b02      	ldr	r3, [pc, #8]	; (1e9c <_sercom_set_handler+0x2c>)
    1e92:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e94:	0080      	lsls	r0, r0, #2
    1e96:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <_sercom_set_handler+0x30>)
    1e98:	50c1      	str	r1, [r0, r3]
}
    1e9a:	bd30      	pop	{r4, r5, pc}
    1e9c:	200000a0 	.word	0x200000a0
    1ea0:	200000a4 	.word	0x200000a4
    1ea4:	00001e6d 	.word	0x00001e6d
    1ea8:	2000020c 	.word	0x2000020c

00001eac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1eac:	b510      	push	{r4, lr}
    1eae:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1eb0:	ac01      	add	r4, sp, #4
    1eb2:	2309      	movs	r3, #9
    1eb4:	7023      	strb	r3, [r4, #0]
    1eb6:	3301      	adds	r3, #1
    1eb8:	7063      	strb	r3, [r4, #1]
    1eba:	3301      	adds	r3, #1
    1ebc:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ebe:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <_sercom_get_interrupt_vector+0x1c>)
    1ec0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ec2:	5620      	ldrsb	r0, [r4, r0]
}
    1ec4:	b002      	add	sp, #8
    1ec6:	bd10      	pop	{r4, pc}
    1ec8:	00000f71 	.word	0x00000f71

00001ecc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ecc:	b510      	push	{r4, lr}
    1ece:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <SERCOM0_Handler+0xc>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	2000      	movs	r0, #0
    1ed4:	4798      	blx	r3
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	200000a4 	.word	0x200000a4

00001edc <SERCOM1_Handler>:
    1edc:	b510      	push	{r4, lr}
    1ede:	4b02      	ldr	r3, [pc, #8]	; (1ee8 <SERCOM1_Handler+0xc>)
    1ee0:	685b      	ldr	r3, [r3, #4]
    1ee2:	2001      	movs	r0, #1
    1ee4:	4798      	blx	r3
    1ee6:	bd10      	pop	{r4, pc}
    1ee8:	200000a4 	.word	0x200000a4

00001eec <SERCOM2_Handler>:
    1eec:	b510      	push	{r4, lr}
    1eee:	4b02      	ldr	r3, [pc, #8]	; (1ef8 <SERCOM2_Handler+0xc>)
    1ef0:	689b      	ldr	r3, [r3, #8]
    1ef2:	2002      	movs	r0, #2
    1ef4:	4798      	blx	r3
    1ef6:	bd10      	pop	{r4, pc}
    1ef8:	200000a4 	.word	0x200000a4

00001efc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1efc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1efe:	2200      	movs	r2, #0
    1f00:	4b10      	ldr	r3, [pc, #64]	; (1f44 <EIC_Handler+0x48>)
    1f02:	701a      	strb	r2, [r3, #0]
    1f04:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1f06:	4910      	ldr	r1, [pc, #64]	; (1f48 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1f08:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1f0a:	4e10      	ldr	r6, [pc, #64]	; (1f4c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1f0c:	4c0d      	ldr	r4, [pc, #52]	; (1f44 <EIC_Handler+0x48>)
    1f0e:	e00a      	b.n	1f26 <EIC_Handler+0x2a>
		return eics[eic_index];
    1f10:	490d      	ldr	r1, [pc, #52]	; (1f48 <EIC_Handler+0x4c>)
    1f12:	e008      	b.n	1f26 <EIC_Handler+0x2a>
    1f14:	7823      	ldrb	r3, [r4, #0]
    1f16:	3301      	adds	r3, #1
    1f18:	b2db      	uxtb	r3, r3
    1f1a:	7023      	strb	r3, [r4, #0]
    1f1c:	2b0f      	cmp	r3, #15
    1f1e:	d810      	bhi.n	1f42 <EIC_Handler+0x46>
		return NULL;
    1f20:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    1f22:	2b1f      	cmp	r3, #31
    1f24:	d9f4      	bls.n	1f10 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    1f26:	0028      	movs	r0, r5
    1f28:	4018      	ands	r0, r3
    1f2a:	2201      	movs	r2, #1
    1f2c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    1f2e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    1f30:	4210      	tst	r0, r2
    1f32:	d0ef      	beq.n	1f14 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    1f34:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1f36:	009b      	lsls	r3, r3, #2
    1f38:	599b      	ldr	r3, [r3, r6]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d0ea      	beq.n	1f14 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    1f3e:	4798      	blx	r3
    1f40:	e7e8      	b.n	1f14 <EIC_Handler+0x18>
			}
		}
	}
}
    1f42:	bd70      	pop	{r4, r5, r6, pc}
    1f44:	20000218 	.word	0x20000218
    1f48:	40001800 	.word	0x40001800
    1f4c:	20000160 	.word	0x20000160

00001f50 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1f50:	b500      	push	{lr}
    1f52:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1f54:	ab01      	add	r3, sp, #4
    1f56:	2280      	movs	r2, #128	; 0x80
    1f58:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1f5a:	780a      	ldrb	r2, [r1, #0]
    1f5c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1f5e:	784a      	ldrb	r2, [r1, #1]
    1f60:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1f62:	788a      	ldrb	r2, [r1, #2]
    1f64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1f66:	0019      	movs	r1, r3
    1f68:	4b01      	ldr	r3, [pc, #4]	; (1f70 <port_pin_set_config+0x20>)
    1f6a:	4798      	blx	r3
}
    1f6c:	b003      	add	sp, #12
    1f6e:	bd00      	pop	{pc}
    1f70:	00002ed5 	.word	0x00002ed5

00001f74 <tc_callback_LED_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_LED_PWM(struct tc_module *const module_inst)
{
    1f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f76:	46de      	mov	lr, fp
    1f78:	4657      	mov	r7, sl
    1f7a:	4646      	mov	r6, r8
    1f7c:	b5c0      	push	{r6, r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value=0;
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	
	if(first_time == false)
    1f82:	4b4f      	ldr	r3, [pc, #316]	; (20c0 <tc_callback_LED_PWM+0x14c>)
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	2b00      	cmp	r3, #0
    1f88:	d000      	beq.n	1f8c <tc_callback_LED_PWM+0x18>
    1f8a:	e091      	b.n	20b0 <tc_callback_LED_PWM+0x13c>
	{
		port_pin_set_output_level(pin_led_array[pin_led_array_ID++], LED_ON);
    1f8c:	494d      	ldr	r1, [pc, #308]	; (20c4 <tc_callback_LED_PWM+0x150>)
    1f8e:	780b      	ldrb	r3, [r1, #0]
    1f90:	1c5a      	adds	r2, r3, #1
    1f92:	b2d2      	uxtb	r2, r2
    1f94:	700a      	strb	r2, [r1, #0]
    1f96:	494c      	ldr	r1, [pc, #304]	; (20c8 <tc_callback_LED_PWM+0x154>)
    1f98:	5cc9      	ldrb	r1, [r1, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f9a:	09c8      	lsrs	r0, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f9c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d104      	bne.n	1fac <tc_callback_LED_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    1fa2:	094b      	lsrs	r3, r1, #5
    1fa4:	01db      	lsls	r3, r3, #7
    1fa6:	4849      	ldr	r0, [pc, #292]	; (20cc <tc_callback_LED_PWM+0x158>)
    1fa8:	4684      	mov	ip, r0
    1faa:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1fac:	201f      	movs	r0, #31
    1fae:	4008      	ands	r0, r1
    1fb0:	2101      	movs	r1, #1
    1fb2:	4081      	lsls	r1, r0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1fb4:	6199      	str	r1, [r3, #24]
		
		if(compare_led_array_ID < N_valid_led_compares-1 )
    1fb6:	4b46      	ldr	r3, [pc, #280]	; (20d0 <tc_callback_LED_PWM+0x15c>)
    1fb8:	781e      	ldrb	r6, [r3, #0]
    1fba:	4b46      	ldr	r3, [pc, #280]	; (20d4 <tc_callback_LED_PWM+0x160>)
    1fbc:	781b      	ldrb	r3, [r3, #0]
    1fbe:	3b01      	subs	r3, #1
    1fc0:	4698      	mov	r8, r3
    1fc2:	429e      	cmp	r6, r3
    1fc4:	da6e      	bge.n	20a4 <tc_callback_LED_PWM+0x130>
		{
			compare_value_last = compare_led_array[compare_led_array_ID];
    1fc6:	4844      	ldr	r0, [pc, #272]	; (20d8 <tc_callback_LED_PWM+0x164>)
    1fc8:	5d81      	ldrb	r1, [r0, r6]
    1fca:	4b44      	ldr	r3, [pc, #272]	; (20dc <tc_callback_LED_PWM+0x168>)
    1fcc:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_led_array[++compare_led_array_ID];
    1fce:	3601      	adds	r6, #1
    1fd0:	b2f6      	uxtb	r6, r6
    1fd2:	4b3f      	ldr	r3, [pc, #252]	; (20d0 <tc_callback_LED_PWM+0x15c>)
    1fd4:	701e      	strb	r6, [r3, #0]
    1fd6:	0033      	movs	r3, r6
    1fd8:	5d85      	ldrb	r5, [r0, r6]
    1fda:	4841      	ldr	r0, [pc, #260]	; (20e0 <tc_callback_LED_PWM+0x16c>)
    1fdc:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    1fde:	42a9      	cmp	r1, r5
    1fe0:	d135      	bne.n	204e <tc_callback_LED_PWM+0xda>
    1fe2:	45b0      	cmp	r8, r6
    1fe4:	db52      	blt.n	208c <tc_callback_LED_PWM+0x118>
    1fe6:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    1fe8:	4937      	ldr	r1, [pc, #220]	; (20c8 <tc_callback_LED_PWM+0x154>)
    1fea:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1fec:	211f      	movs	r1, #31
    1fee:	468a      	mov	sl, r1
    1ff0:	2701      	movs	r7, #1
				compare_value_last = compare_led_array[compare_led_array_ID];
    1ff2:	4c39      	ldr	r4, [pc, #228]	; (20d8 <tc_callback_LED_PWM+0x164>)
    1ff4:	1ab6      	subs	r6, r6, r2
    1ff6:	e00f      	b.n	2018 <tc_callback_LED_PWM+0xa4>
    1ff8:	4655      	mov	r5, sl
    1ffa:	4029      	ands	r1, r5
    1ffc:	003d      	movs	r5, r7
    1ffe:	408d      	lsls	r5, r1
		port_base->OUTSET.reg = pin_mask;
    2000:	6185      	str	r5, [r0, #24]
    2002:	5ce1      	ldrb	r1, [r4, r3]
    2004:	1993      	adds	r3, r2, r6
    2006:	b2db      	uxtb	r3, r3
				compare_value_current = compare_led_array[++compare_led_array_ID];
    2008:	9300      	str	r3, [sp, #0]
    200a:	5ce0      	ldrb	r0, [r4, r3]
    200c:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    200e:	4281      	cmp	r1, r0
    2010:	d112      	bne.n	2038 <tc_callback_LED_PWM+0xc4>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    2012:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    2014:	4598      	cmp	r8, r3
    2016:	db2c      	blt.n	2072 <tc_callback_LED_PWM+0xfe>
				port_pin_set_output_level(pin_led_array[pin_led_array_ID++],LED_ON);
    2018:	1c42      	adds	r2, r0, #1
    201a:	b2d2      	uxtb	r2, r2
    201c:	4659      	mov	r1, fp
    201e:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    2020:	09c8      	lsrs	r0, r1, #7
    2022:	4684      	mov	ip, r0
		return NULL;
    2024:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    2026:	4665      	mov	r5, ip
    2028:	2d00      	cmp	r5, #0
    202a:	d1e5      	bne.n	1ff8 <tc_callback_LED_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    202c:	0948      	lsrs	r0, r1, #5
    202e:	01c0      	lsls	r0, r0, #7
    2030:	4d26      	ldr	r5, [pc, #152]	; (20cc <tc_callback_LED_PWM+0x158>)
    2032:	46ac      	mov	ip, r5
    2034:	4460      	add	r0, ip
    2036:	e7df      	b.n	1ff8 <tc_callback_LED_PWM+0x84>
    2038:	0005      	movs	r5, r0
    203a:	4b28      	ldr	r3, [pc, #160]	; (20dc <tc_callback_LED_PWM+0x168>)
    203c:	7019      	strb	r1, [r3, #0]
    203e:	4b24      	ldr	r3, [pc, #144]	; (20d0 <tc_callback_LED_PWM+0x15c>)
    2040:	4668      	mov	r0, sp
    2042:	7800      	ldrb	r0, [r0, #0]
    2044:	7018      	strb	r0, [r3, #0]
    2046:	4b26      	ldr	r3, [pc, #152]	; (20e0 <tc_callback_LED_PWM+0x16c>)
    2048:	701d      	strb	r5, [r3, #0]
    204a:	4b1e      	ldr	r3, [pc, #120]	; (20c4 <tc_callback_LED_PWM+0x150>)
    204c:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    204e:	2dff      	cmp	r5, #255	; 0xff
    2050:	d01e      	beq.n	2090 <tc_callback_LED_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    2052:	9c01      	ldr	r4, [sp, #4]
    2054:	0020      	movs	r0, r4
    2056:	4b23      	ldr	r3, [pc, #140]	; (20e4 <tc_callback_LED_PWM+0x170>)
    2058:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    205a:	4b21      	ldr	r3, [pc, #132]	; (20e0 <tc_callback_LED_PWM+0x16c>)
    205c:	781a      	ldrb	r2, [r3, #0]
    205e:	2100      	movs	r1, #0
    2060:	0020      	movs	r0, r4
    2062:	4b21      	ldr	r3, [pc, #132]	; (20e8 <tc_callback_LED_PWM+0x174>)
    2064:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    2066:	b002      	add	sp, #8
    2068:	bc1c      	pop	{r2, r3, r4}
    206a:	4690      	mov	r8, r2
    206c:	469a      	mov	sl, r3
    206e:	46a3      	mov	fp, r4
    2070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2072:	4665      	mov	r5, ip
    2074:	4b19      	ldr	r3, [pc, #100]	; (20dc <tc_callback_LED_PWM+0x168>)
    2076:	7019      	strb	r1, [r3, #0]
    2078:	4b15      	ldr	r3, [pc, #84]	; (20d0 <tc_callback_LED_PWM+0x15c>)
    207a:	4668      	mov	r0, sp
    207c:	7800      	ldrb	r0, [r0, #0]
    207e:	7018      	strb	r0, [r3, #0]
    2080:	4b17      	ldr	r3, [pc, #92]	; (20e0 <tc_callback_LED_PWM+0x16c>)
    2082:	7019      	strb	r1, [r3, #0]
    2084:	4b0f      	ldr	r3, [pc, #60]	; (20c4 <tc_callback_LED_PWM+0x150>)
    2086:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_led_array[++compare_led_array_ID];
    2088:	4661      	mov	r1, ip
    208a:	e7e0      	b.n	204e <tc_callback_LED_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_led_array_ID <= N_valid_led_compares - 1)
    208c:	000d      	movs	r5, r1
    208e:	e7de      	b.n	204e <tc_callback_LED_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    2090:	9c01      	ldr	r4, [sp, #4]
    2092:	0020      	movs	r0, r4
    2094:	4b13      	ldr	r3, [pc, #76]	; (20e4 <tc_callback_LED_PWM+0x170>)
    2096:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2098:	2200      	movs	r2, #0
    209a:	2100      	movs	r1, #0
    209c:	0020      	movs	r0, r4
    209e:	4b12      	ldr	r3, [pc, #72]	; (20e8 <tc_callback_LED_PWM+0x174>)
    20a0:	4798      	blx	r3
    20a2:	e7e0      	b.n	2066 <tc_callback_LED_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    20a4:	2200      	movs	r2, #0
    20a6:	2100      	movs	r1, #0
    20a8:	9801      	ldr	r0, [sp, #4]
    20aa:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <tc_callback_LED_PWM+0x174>)
    20ac:	4798      	blx	r3
    20ae:	e7da      	b.n	2066 <tc_callback_LED_PWM+0xf2>
		first_time = false;
    20b0:	2200      	movs	r2, #0
    20b2:	4b03      	ldr	r3, [pc, #12]	; (20c0 <tc_callback_LED_PWM+0x14c>)
    20b4:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    20b6:	2100      	movs	r1, #0
    20b8:	9801      	ldr	r0, [sp, #4]
    20ba:	4b0b      	ldr	r3, [pc, #44]	; (20e8 <tc_callback_LED_PWM+0x174>)
    20bc:	4798      	blx	r3
}
    20be:	e7d2      	b.n	2066 <tc_callback_LED_PWM+0xf2>
    20c0:	20000009 	.word	0x20000009
    20c4:	20000243 	.word	0x20000243
    20c8:	20000244 	.word	0x20000244
    20cc:	41004400 	.word	0x41004400
    20d0:	20000242 	.word	0x20000242
    20d4:	20000008 	.word	0x20000008
    20d8:	20000240 	.word	0x20000240
    20dc:	200000b1 	.word	0x200000b1
    20e0:	200000b0 	.word	0x200000b0
    20e4:	00001d35 	.word	0x00001d35
    20e8:	00001d67 	.word	0x00001d67

000020ec <LED_timer_init>:
{
    20ec:	b510      	push	{r4, lr}
    20ee:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    20f0:	aa01      	add	r2, sp, #4
    20f2:	2300      	movs	r3, #0
    20f4:	2100      	movs	r1, #0
    20f6:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    20f8:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    20fa:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    20fc:	2000      	movs	r0, #0
    20fe:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2100:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2102:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2104:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2106:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2108:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    210a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    210c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    210e:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2110:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2112:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2114:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    2116:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2118:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    211a:	8593      	strh	r3, [r2, #44]	; 0x2c
	led_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    211c:	23c0      	movs	r3, #192	; 0xc0
    211e:	00db      	lsls	r3, r3, #3
    2120:	8093      	strh	r3, [r2, #4]
	led_tc_config.counter_size    = TC_COUNTER_SIZE_8BIT;
    2122:	2304      	movs	r3, #4
    2124:	7093      	strb	r3, [r2, #2]
	led_tc_config.counter_8_bit.period = 0XFF;
    2126:	21ff      	movs	r1, #255	; 0xff
    2128:	3325      	adds	r3, #37	; 0x25
    212a:	54d1      	strb	r1, [r2, r3]
	tc_init(&led_tc_instance, TC2, &led_tc_config);
    212c:	4c07      	ldr	r4, [pc, #28]	; (214c <LED_timer_init+0x60>)
    212e:	4908      	ldr	r1, [pc, #32]	; (2150 <LED_timer_init+0x64>)
    2130:	0020      	movs	r0, r4
    2132:	4b08      	ldr	r3, [pc, #32]	; (2154 <LED_timer_init+0x68>)
    2134:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2136:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2138:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    213a:	b25b      	sxtb	r3, r3
    213c:	2b00      	cmp	r3, #0
    213e:	dbfb      	blt.n	2138 <LED_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2140:	8813      	ldrh	r3, [r2, #0]
    2142:	2102      	movs	r1, #2
    2144:	430b      	orrs	r3, r1
    2146:	8013      	strh	r3, [r2, #0]
}
    2148:	b00e      	add	sp, #56	; 0x38
    214a:	bd10      	pop	{r4, pc}
    214c:	2000021c 	.word	0x2000021c
    2150:	42001c00 	.word	0x42001c00
    2154:	00001b05 	.word	0x00001b05

00002158 <set_drivestrength_LED>:
{
    2158:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_LEDS,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    215a:	2201      	movs	r2, #1
    215c:	21c0      	movs	r1, #192	; 0xc0
    215e:	0609      	lsls	r1, r1, #24
    2160:	4801      	ldr	r0, [pc, #4]	; (2168 <set_drivestrength_LED+0x10>)
    2162:	4b02      	ldr	r3, [pc, #8]	; (216c <set_drivestrength_LED+0x14>)
    2164:	4798      	blx	r3
}
    2166:	bd10      	pop	{r4, pc}
    2168:	41004400 	.word	0x41004400
    216c:	00002f05 	.word	0x00002f05

00002170 <LED_setup_pins>:
{
    2170:	b530      	push	{r4, r5, lr}
    2172:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2174:	ac01      	add	r4, sp, #4
    2176:	2301      	movs	r3, #1
    2178:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    217a:	2200      	movs	r2, #0
    217c:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    217e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED1, &config_port_pin);
    2180:	0021      	movs	r1, r4
    2182:	201f      	movs	r0, #31
    2184:	4d06      	ldr	r5, [pc, #24]	; (21a0 <LED_setup_pins+0x30>)
    2186:	47a8      	blx	r5
	port_pin_set_config(LED4, &config_port_pin);
    2188:	0021      	movs	r1, r4
    218a:	201e      	movs	r0, #30
    218c:	47a8      	blx	r5
	set_drivestrength_LED();
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <LED_setup_pins+0x34>)
    2190:	4798      	blx	r3
	port_base->OUTCLR.reg = CLEAR_LEDS ;
    2192:	22c0      	movs	r2, #192	; 0xc0
    2194:	0612      	lsls	r2, r2, #24
    2196:	4b04      	ldr	r3, [pc, #16]	; (21a8 <LED_setup_pins+0x38>)
    2198:	615a      	str	r2, [r3, #20]
}
    219a:	b003      	add	sp, #12
    219c:	bd30      	pop	{r4, r5, pc}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	00001f51 	.word	0x00001f51
    21a4:	00002159 	.word	0x00002159
    21a8:	41004400 	.word	0x41004400

000021ac <enable_LED>:
{
    21ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ae:	46ce      	mov	lr, r9
    21b0:	4647      	mov	r7, r8
    21b2:	b580      	push	{r7, lr}
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    21b4:	4c13      	ldr	r4, [pc, #76]	; (2204 <enable_LED+0x58>)
    21b6:	6820      	ldr	r0, [r4, #0]
    21b8:	4b13      	ldr	r3, [pc, #76]	; (2208 <enable_LED+0x5c>)
    21ba:	4699      	mov	r9, r3
    21bc:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    21be:	4b13      	ldr	r3, [pc, #76]	; (220c <enable_LED+0x60>)
    21c0:	4698      	mov	r8, r3
    21c2:	5c1b      	ldrb	r3, [r3, r0]
    21c4:	261f      	movs	r6, #31
    21c6:	4033      	ands	r3, r6
    21c8:	2501      	movs	r5, #1
    21ca:	002a      	movs	r2, r5
    21cc:	409a      	lsls	r2, r3
    21ce:	4f10      	ldr	r7, [pc, #64]	; (2210 <enable_LED+0x64>)
    21d0:	603a      	str	r2, [r7, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    21d2:	7e63      	ldrb	r3, [r4, #25]
    21d4:	2201      	movs	r2, #1
    21d6:	4313      	orrs	r3, r2
    21d8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    21da:	6823      	ldr	r3, [r4, #0]
    21dc:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    21de:	0018      	movs	r0, r3
    21e0:	47c8      	blx	r9
    21e2:	4643      	mov	r3, r8
    21e4:	5c1b      	ldrb	r3, [r3, r0]
    21e6:	401e      	ands	r6, r3
    21e8:	40b5      	lsls	r5, r6
    21ea:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    21ec:	7e63      	ldrb	r3, [r4, #25]
    21ee:	2210      	movs	r2, #16
    21f0:	4313      	orrs	r3, r2
    21f2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    21f4:	6823      	ldr	r3, [r4, #0]
    21f6:	2210      	movs	r2, #16
    21f8:	735a      	strb	r2, [r3, #13]
}
    21fa:	bc0c      	pop	{r2, r3}
    21fc:	4690      	mov	r8, r2
    21fe:	4699      	mov	r9, r3
    2200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	2000021c 	.word	0x2000021c
    2208:	00001ae1 	.word	0x00001ae1
    220c:	000036b8 	.word	0x000036b8
    2210:	e000e100 	.word	0xe000e100

00002214 <initializing_LED_pin_array>:
	temp_pin_led_array[0]  = LED1;
    2214:	4b02      	ldr	r3, [pc, #8]	; (2220 <initializing_LED_pin_array+0xc>)
    2216:	221f      	movs	r2, #31
    2218:	701a      	strb	r2, [r3, #0]
	temp_pin_led_array[1]  = LED4;
    221a:	3a01      	subs	r2, #1
    221c:	705a      	strb	r2, [r3, #1]
}
    221e:	4770      	bx	lr
    2220:	2000023c 	.word	0x2000023c

00002224 <initializing_LED_compare_array>:
	temp_compare_led_array_2[0] = 255;//LED1
    2224:	4b02      	ldr	r3, [pc, #8]	; (2230 <initializing_LED_compare_array+0xc>)
    2226:	22ff      	movs	r2, #255	; 0xff
    2228:	701a      	strb	r2, [r3, #0]
	temp_compare_led_array_2[1] = 255;//LED2
    222a:	705a      	strb	r2, [r3, #1]
}
    222c:	4770      	bx	lr
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	20000238 	.word	0x20000238

00002234 <transfer_temp_LED_2>:
		temp_compare_led_array[i] = temp_compare_led_array_2[i];
    2234:	4b03      	ldr	r3, [pc, #12]	; (2244 <transfer_temp_LED_2+0x10>)
    2236:	4a04      	ldr	r2, [pc, #16]	; (2248 <transfer_temp_LED_2+0x14>)
    2238:	7811      	ldrb	r1, [r2, #0]
    223a:	7019      	strb	r1, [r3, #0]
    223c:	7852      	ldrb	r2, [r2, #1]
    223e:	705a      	strb	r2, [r3, #1]
}
    2240:	4770      	bx	lr
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	20000248 	.word	0x20000248
    2248:	20000238 	.word	0x20000238

0000224c <increasing_LED_sort_tag>:
{
    224c:	b510      	push	{r4, lr}
	transfer_temp_LED_2();
    224e:	4b07      	ldr	r3, [pc, #28]	; (226c <increasing_LED_sort_tag+0x20>)
    2250:	4798      	blx	r3
			if(temp_compare_led_array[j]>temp_compare_led_array[j+1])
    2252:	4b07      	ldr	r3, [pc, #28]	; (2270 <increasing_LED_sort_tag+0x24>)
    2254:	781a      	ldrb	r2, [r3, #0]
    2256:	7859      	ldrb	r1, [r3, #1]
    2258:	428a      	cmp	r2, r1
    225a:	d906      	bls.n	226a <increasing_LED_sort_tag+0x1e>
				temp_compare_led_array[j] = temp_compare_led_array[j+1];
    225c:	7019      	strb	r1, [r3, #0]
				temp_compare_led_array[j+1]= temp;
    225e:	705a      	strb	r2, [r3, #1]
				temp = temp_pin_led_array[j];
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <increasing_LED_sort_tag+0x28>)
    2262:	781a      	ldrb	r2, [r3, #0]
				temp_pin_led_array[j] = temp_pin_led_array[j+1];
    2264:	7859      	ldrb	r1, [r3, #1]
    2266:	7019      	strb	r1, [r3, #0]
				temp_pin_led_array[j+1] = temp;
    2268:	705a      	strb	r2, [r3, #1]
}
    226a:	bd10      	pop	{r4, pc}
    226c:	00002235 	.word	0x00002235
    2270:	20000248 	.word	0x20000248
    2274:	2000023c 	.word	0x2000023c

00002278 <LED_transfer_temp>:
	N_valid_led_compares = 0;
    2278:	2200      	movs	r2, #0
    227a:	4b14      	ldr	r3, [pc, #80]	; (22cc <LED_transfer_temp+0x54>)
    227c:	701a      	strb	r2, [r3, #0]
		if(temp_compare_led_array[i] != 255)
    227e:	4b14      	ldr	r3, [pc, #80]	; (22d0 <LED_transfer_temp+0x58>)
    2280:	781a      	ldrb	r2, [r3, #0]
    2282:	2aff      	cmp	r2, #255	; 0xff
    2284:	d016      	beq.n	22b4 <LED_transfer_temp+0x3c>
    2286:	2001      	movs	r0, #1
			N_valid_led_compares++;
    2288:	2301      	movs	r3, #1
		compare_led_array[i] = temp_compare_led_array[i] ;
    228a:	4912      	ldr	r1, [pc, #72]	; (22d4 <LED_transfer_temp+0x5c>)
    228c:	700a      	strb	r2, [r1, #0]
		pin_led_array[i]  = temp_pin_led_array[i];
    228e:	4a12      	ldr	r2, [pc, #72]	; (22d8 <LED_transfer_temp+0x60>)
    2290:	7811      	ldrb	r1, [r2, #0]
    2292:	4a12      	ldr	r2, [pc, #72]	; (22dc <LED_transfer_temp+0x64>)
    2294:	7011      	strb	r1, [r2, #0]
		if(temp_compare_led_array[i] != 255)
    2296:	4a0e      	ldr	r2, [pc, #56]	; (22d0 <LED_transfer_temp+0x58>)
    2298:	7852      	ldrb	r2, [r2, #1]
    229a:	2aff      	cmp	r2, #255	; 0xff
    229c:	d00d      	beq.n	22ba <LED_transfer_temp+0x42>
			N_valid_led_compares++;
    229e:	3301      	adds	r3, #1
    22a0:	b2db      	uxtb	r3, r3
		compare_led_array[i] = temp_compare_led_array[i] ;
    22a2:	490c      	ldr	r1, [pc, #48]	; (22d4 <LED_transfer_temp+0x5c>)
    22a4:	704a      	strb	r2, [r1, #1]
		pin_led_array[i]  = temp_pin_led_array[i];
    22a6:	4a0c      	ldr	r2, [pc, #48]	; (22d8 <LED_transfer_temp+0x60>)
    22a8:	7851      	ldrb	r1, [r2, #1]
    22aa:	4a0c      	ldr	r2, [pc, #48]	; (22dc <LED_transfer_temp+0x64>)
    22ac:	7051      	strb	r1, [r2, #1]
    22ae:	4a07      	ldr	r2, [pc, #28]	; (22cc <LED_transfer_temp+0x54>)
    22b0:	7013      	strb	r3, [r2, #0]
}
    22b2:	e00a      	b.n	22ca <LED_transfer_temp+0x52>
		if(temp_compare_led_array[i] != 255)
    22b4:	2000      	movs	r0, #0
    22b6:	2300      	movs	r3, #0
    22b8:	e7e7      	b.n	228a <LED_transfer_temp+0x12>
		compare_led_array[i] = temp_compare_led_array[i] ;
    22ba:	4906      	ldr	r1, [pc, #24]	; (22d4 <LED_transfer_temp+0x5c>)
    22bc:	704a      	strb	r2, [r1, #1]
		pin_led_array[i]  = temp_pin_led_array[i];
    22be:	4a06      	ldr	r2, [pc, #24]	; (22d8 <LED_transfer_temp+0x60>)
    22c0:	7851      	ldrb	r1, [r2, #1]
    22c2:	4a06      	ldr	r2, [pc, #24]	; (22dc <LED_transfer_temp+0x64>)
    22c4:	7051      	strb	r1, [r2, #1]
    22c6:	2800      	cmp	r0, #0
    22c8:	d1f1      	bne.n	22ae <LED_transfer_temp+0x36>
}
    22ca:	4770      	bx	lr
    22cc:	20000008 	.word	0x20000008
    22d0:	20000248 	.word	0x20000248
    22d4:	20000240 	.word	0x20000240
    22d8:	2000023c 	.word	0x2000023c
    22dc:	20000244 	.word	0x20000244

000022e0 <tc_callback_LED_OF>:
{
    22e0:	b570      	push	{r4, r5, r6, lr}
    22e2:	0004      	movs	r4, r0
	serial_timeout_count++;
    22e4:	4a25      	ldr	r2, [pc, #148]	; (237c <tc_callback_LED_OF+0x9c>)
    22e6:	7813      	ldrb	r3, [r2, #0]
    22e8:	3301      	adds	r3, #1
    22ea:	b2db      	uxtb	r3, r3
    22ec:	7013      	strb	r3, [r2, #0]
	count_broadcast++;
    22ee:	4924      	ldr	r1, [pc, #144]	; (2380 <tc_callback_LED_OF+0xa0>)
    22f0:	780b      	ldrb	r3, [r1, #0]
    22f2:	3301      	adds	r3, #1
    22f4:	b2db      	uxtb	r3, r3
    22f6:	700b      	strb	r3, [r1, #0]
	if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    22f8:	7813      	ldrb	r3, [r2, #0]
    22fa:	b2db      	uxtb	r3, r3
    22fc:	2b0a      	cmp	r3, #10
    22fe:	d905      	bls.n	230c <tc_callback_LED_OF+0x2c>
		serial_timeout = true;
    2300:	2201      	movs	r2, #1
    2302:	4b20      	ldr	r3, [pc, #128]	; (2384 <tc_callback_LED_OF+0xa4>)
    2304:	701a      	strb	r2, [r3, #0]
		serial_timeout_count = 0;
    2306:	2200      	movs	r2, #0
    2308:	4b1c      	ldr	r3, [pc, #112]	; (237c <tc_callback_LED_OF+0x9c>)
    230a:	701a      	strb	r2, [r3, #0]
	port_base->OUTCLR.reg = CLEAR_LEDS ;
    230c:	22c0      	movs	r2, #192	; 0xc0
    230e:	0612      	lsls	r2, r2, #24
    2310:	4b1d      	ldr	r3, [pc, #116]	; (2388 <tc_callback_LED_OF+0xa8>)
    2312:	615a      	str	r2, [r3, #20]
	if(update_compare_led_array == true)
    2314:	4b1d      	ldr	r3, [pc, #116]	; (238c <tc_callback_LED_OF+0xac>)
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	2b00      	cmp	r3, #0
    231a:	d110      	bne.n	233e <tc_callback_LED_OF+0x5e>
	compare_led_array_ID = 0;
    231c:	2300      	movs	r3, #0
    231e:	4a1c      	ldr	r2, [pc, #112]	; (2390 <tc_callback_LED_OF+0xb0>)
    2320:	7013      	strb	r3, [r2, #0]
	pin_led_array_ID  = 0;
    2322:	4a1c      	ldr	r2, [pc, #112]	; (2394 <tc_callback_LED_OF+0xb4>)
    2324:	7013      	strb	r3, [r2, #0]
	compare_value = compare_led_array[0];
    2326:	4b1c      	ldr	r3, [pc, #112]	; (2398 <tc_callback_LED_OF+0xb8>)
    2328:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    232a:	2aff      	cmp	r2, #255	; 0xff
    232c:	d120      	bne.n	2370 <tc_callback_LED_OF+0x90>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    232e:	4b1b      	ldr	r3, [pc, #108]	; (239c <tc_callback_LED_OF+0xbc>)
    2330:	2110      	movs	r1, #16
    2332:	681a      	ldr	r2, [r3, #0]
    2334:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2336:	7e5a      	ldrb	r2, [r3, #25]
    2338:	438a      	bics	r2, r1
    233a:	765a      	strb	r2, [r3, #25]
}
    233c:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    233e:	4d17      	ldr	r5, [pc, #92]	; (239c <tc_callback_LED_OF+0xbc>)
    2340:	6828      	ldr	r0, [r5, #0]
    2342:	4b17      	ldr	r3, [pc, #92]	; (23a0 <tc_callback_LED_OF+0xc0>)
    2344:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2346:	4b17      	ldr	r3, [pc, #92]	; (23a4 <tc_callback_LED_OF+0xc4>)
    2348:	5c1b      	ldrb	r3, [r3, r0]
    234a:	221f      	movs	r2, #31
    234c:	401a      	ands	r2, r3
    234e:	2301      	movs	r3, #1
    2350:	4093      	lsls	r3, r2
    2352:	4a15      	ldr	r2, [pc, #84]	; (23a8 <tc_callback_LED_OF+0xc8>)
    2354:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2356:	7e6b      	ldrb	r3, [r5, #25]
    2358:	2210      	movs	r2, #16
    235a:	4313      	orrs	r3, r2
    235c:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    235e:	682b      	ldr	r3, [r5, #0]
    2360:	2210      	movs	r2, #16
    2362:	735a      	strb	r2, [r3, #13]
		LED_transfer_temp();
    2364:	4b11      	ldr	r3, [pc, #68]	; (23ac <tc_callback_LED_OF+0xcc>)
    2366:	4798      	blx	r3
		update_compare_led_array = false;
    2368:	2200      	movs	r2, #0
    236a:	4b08      	ldr	r3, [pc, #32]	; (238c <tc_callback_LED_OF+0xac>)
    236c:	701a      	strb	r2, [r3, #0]
    236e:	e7d5      	b.n	231c <tc_callback_LED_OF+0x3c>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    2370:	2100      	movs	r1, #0
    2372:	0020      	movs	r0, r4
    2374:	4b0e      	ldr	r3, [pc, #56]	; (23b0 <tc_callback_LED_OF+0xd0>)
    2376:	4798      	blx	r3
    2378:	e7e0      	b.n	233c <tc_callback_LED_OF+0x5c>
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	200000de 	.word	0x200000de
    2380:	200000dc 	.word	0x200000dc
    2384:	200000dd 	.word	0x200000dd
    2388:	41004400 	.word	0x41004400
    238c:	200000b2 	.word	0x200000b2
    2390:	20000242 	.word	0x20000242
    2394:	20000243 	.word	0x20000243
    2398:	20000240 	.word	0x20000240
    239c:	2000021c 	.word	0x2000021c
    23a0:	00001ae1 	.word	0x00001ae1
    23a4:	000036b8 	.word	0x000036b8
    23a8:	e000e100 	.word	0xe000e100
    23ac:	00002279 	.word	0x00002279
    23b0:	00001d67 	.word	0x00001d67

000023b4 <LED_init_array>:
{
    23b4:	b510      	push	{r4, lr}
	initializing_LED_pin_array();
    23b6:	4b04      	ldr	r3, [pc, #16]	; (23c8 <LED_init_array+0x14>)
    23b8:	4798      	blx	r3
	initializing_LED_compare_array();
    23ba:	4b04      	ldr	r3, [pc, #16]	; (23cc <LED_init_array+0x18>)
    23bc:	4798      	blx	r3
	increasing_LED_sort_tag();
    23be:	4b04      	ldr	r3, [pc, #16]	; (23d0 <LED_init_array+0x1c>)
    23c0:	4798      	blx	r3
	LED_transfer_temp();
    23c2:	4b04      	ldr	r3, [pc, #16]	; (23d4 <LED_init_array+0x20>)
    23c4:	4798      	blx	r3
}
    23c6:	bd10      	pop	{r4, pc}
    23c8:	00002215 	.word	0x00002215
    23cc:	00002225 	.word	0x00002225
    23d0:	0000224d 	.word	0x0000224d
    23d4:	00002279 	.word	0x00002279

000023d8 <LED_timer_callbacks_init>:


void LED_timer_callbacks_init()
{
    23d8:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&led_tc_instance, tc_callback_LED_OF,TC_CALLBACK_OVERFLOW);
    23da:	4d05      	ldr	r5, [pc, #20]	; (23f0 <LED_timer_callbacks_init+0x18>)
    23dc:	2200      	movs	r2, #0
    23de:	4905      	ldr	r1, [pc, #20]	; (23f4 <LED_timer_callbacks_init+0x1c>)
    23e0:	0028      	movs	r0, r5
    23e2:	4c05      	ldr	r4, [pc, #20]	; (23f8 <LED_timer_callbacks_init+0x20>)
    23e4:	47a0      	blx	r4
	tc_register_callback(&led_tc_instance, tc_callback_LED_PWM,TC_CALLBACK_CC_CHANNEL0);
    23e6:	2202      	movs	r2, #2
    23e8:	4904      	ldr	r1, [pc, #16]	; (23fc <LED_timer_callbacks_init+0x24>)
    23ea:	0028      	movs	r0, r5
    23ec:	47a0      	blx	r4
	
}
    23ee:	bd70      	pop	{r4, r5, r6, pc}
    23f0:	2000021c 	.word	0x2000021c
    23f4:	000022e1 	.word	0x000022e1
    23f8:	00001db7 	.word	0x00001db7
    23fc:	00001f75 	.word	0x00001f75

00002400 <LED_init>:


void LED_init()
{
    2400:	b510      	push	{r4, lr}
	LED_timer_init();
    2402:	4b04      	ldr	r3, [pc, #16]	; (2414 <LED_init+0x14>)
    2404:	4798      	blx	r3
	LED_setup_pins();
    2406:	4b04      	ldr	r3, [pc, #16]	; (2418 <LED_init+0x18>)
    2408:	4798      	blx	r3
	LED_init_array();
    240a:	4b04      	ldr	r3, [pc, #16]	; (241c <LED_init+0x1c>)
    240c:	4798      	blx	r3
	//Initialize the timer callbacks
	LED_timer_callbacks_init();
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <LED_init+0x20>)
    2410:	4798      	blx	r3
    2412:	bd10      	pop	{r4, pc}
    2414:	000020ed 	.word	0x000020ed
    2418:	00002171 	.word	0x00002171
    241c:	000023b5 	.word	0x000023b5
    2420:	000023d9 	.word	0x000023d9

00002424 <tc_callback_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_PWM(struct tc_module *const module_inst)
{
    2424:	b5f0      	push	{r4, r5, r6, r7, lr}
    2426:	46de      	mov	lr, fp
    2428:	4657      	mov	r7, sl
    242a:	4646      	mov	r6, r8
    242c:	b5c0      	push	{r6, r7, lr}
    242e:	b082      	sub	sp, #8
    2430:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value=0;
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;

	if(first_time == false)
    2432:	4b4f      	ldr	r3, [pc, #316]	; (2570 <tc_callback_PWM+0x14c>)
    2434:	781b      	ldrb	r3, [r3, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d000      	beq.n	243c <tc_callback_PWM+0x18>
    243a:	e091      	b.n	2560 <tc_callback_PWM+0x13c>
	{
		port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
    243c:	494d      	ldr	r1, [pc, #308]	; (2574 <tc_callback_PWM+0x150>)
    243e:	780b      	ldrb	r3, [r1, #0]
    2440:	1c5a      	adds	r2, r3, #1
    2442:	b2d2      	uxtb	r2, r2
    2444:	700a      	strb	r2, [r1, #0]
    2446:	494c      	ldr	r1, [pc, #304]	; (2578 <tc_callback_PWM+0x154>)
    2448:	5cc9      	ldrb	r1, [r1, r3]
	if (port_index < PORT_INST_NUM) {
    244a:	09c8      	lsrs	r0, r1, #7
		return NULL;
    244c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    244e:	2800      	cmp	r0, #0
    2450:	d104      	bne.n	245c <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    2452:	094b      	lsrs	r3, r1, #5
    2454:	01db      	lsls	r3, r3, #7
    2456:	4849      	ldr	r0, [pc, #292]	; (257c <tc_callback_PWM+0x158>)
    2458:	4684      	mov	ip, r0
    245a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    245c:	201f      	movs	r0, #31
    245e:	4008      	ands	r0, r1
    2460:	2101      	movs	r1, #1
    2462:	4081      	lsls	r1, r0
		port_base->OUTSET.reg = pin_mask;
    2464:	6199      	str	r1, [r3, #24]
		
		if(compare_array_ID < N_valid_compares-1 )
    2466:	4b46      	ldr	r3, [pc, #280]	; (2580 <tc_callback_PWM+0x15c>)
    2468:	781e      	ldrb	r6, [r3, #0]
    246a:	4b46      	ldr	r3, [pc, #280]	; (2584 <tc_callback_PWM+0x160>)
    246c:	781b      	ldrb	r3, [r3, #0]
    246e:	3b01      	subs	r3, #1
    2470:	4698      	mov	r8, r3
    2472:	429e      	cmp	r6, r3
    2474:	da6e      	bge.n	2554 <tc_callback_PWM+0x130>
		{
			compare_value_last = compare_array[compare_array_ID];
    2476:	4844      	ldr	r0, [pc, #272]	; (2588 <tc_callback_PWM+0x164>)
    2478:	5d81      	ldrb	r1, [r0, r6]
    247a:	4b44      	ldr	r3, [pc, #272]	; (258c <tc_callback_PWM+0x168>)
    247c:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_array[++compare_array_ID];
    247e:	3601      	adds	r6, #1
    2480:	b2f6      	uxtb	r6, r6
    2482:	4b3f      	ldr	r3, [pc, #252]	; (2580 <tc_callback_PWM+0x15c>)
    2484:	701e      	strb	r6, [r3, #0]
    2486:	0033      	movs	r3, r6
    2488:	5d85      	ldrb	r5, [r0, r6]
    248a:	4841      	ldr	r0, [pc, #260]	; (2590 <tc_callback_PWM+0x16c>)
    248c:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    248e:	42a9      	cmp	r1, r5
    2490:	d135      	bne.n	24fe <tc_callback_PWM+0xda>
    2492:	45b0      	cmp	r8, r6
    2494:	db52      	blt.n	253c <tc_callback_PWM+0x118>
    2496:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    2498:	4937      	ldr	r1, [pc, #220]	; (2578 <tc_callback_PWM+0x154>)
    249a:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    249c:	211f      	movs	r1, #31
    249e:	468a      	mov	sl, r1
    24a0:	2701      	movs	r7, #1
				compare_value_last = compare_array[compare_array_ID];
    24a2:	4c39      	ldr	r4, [pc, #228]	; (2588 <tc_callback_PWM+0x164>)
    24a4:	1ab6      	subs	r6, r6, r2
    24a6:	e00f      	b.n	24c8 <tc_callback_PWM+0xa4>
    24a8:	4655      	mov	r5, sl
    24aa:	4029      	ands	r1, r5
    24ac:	003d      	movs	r5, r7
    24ae:	408d      	lsls	r5, r1
		port_base->OUTSET.reg = pin_mask;
    24b0:	6185      	str	r5, [r0, #24]
    24b2:	5ce1      	ldrb	r1, [r4, r3]
    24b4:	1993      	adds	r3, r2, r6
    24b6:	b2db      	uxtb	r3, r3
				compare_value_current = compare_array[++compare_array_ID];
    24b8:	9300      	str	r3, [sp, #0]
    24ba:	5ce0      	ldrb	r0, [r4, r3]
    24bc:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    24be:	4281      	cmp	r1, r0
    24c0:	d112      	bne.n	24e8 <tc_callback_PWM+0xc4>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    24c2:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    24c4:	4598      	cmp	r8, r3
    24c6:	db2c      	blt.n	2522 <tc_callback_PWM+0xfe>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    24c8:	1c42      	adds	r2, r0, #1
    24ca:	b2d2      	uxtb	r2, r2
    24cc:	4659      	mov	r1, fp
    24ce:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    24d0:	09c8      	lsrs	r0, r1, #7
    24d2:	4684      	mov	ip, r0
		return NULL;
    24d4:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    24d6:	4665      	mov	r5, ip
    24d8:	2d00      	cmp	r5, #0
    24da:	d1e5      	bne.n	24a8 <tc_callback_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    24dc:	0948      	lsrs	r0, r1, #5
    24de:	01c0      	lsls	r0, r0, #7
    24e0:	4d26      	ldr	r5, [pc, #152]	; (257c <tc_callback_PWM+0x158>)
    24e2:	46ac      	mov	ip, r5
    24e4:	4460      	add	r0, ip
    24e6:	e7df      	b.n	24a8 <tc_callback_PWM+0x84>
    24e8:	0005      	movs	r5, r0
    24ea:	4b28      	ldr	r3, [pc, #160]	; (258c <tc_callback_PWM+0x168>)
    24ec:	7019      	strb	r1, [r3, #0]
    24ee:	4b24      	ldr	r3, [pc, #144]	; (2580 <tc_callback_PWM+0x15c>)
    24f0:	4668      	mov	r0, sp
    24f2:	7800      	ldrb	r0, [r0, #0]
    24f4:	7018      	strb	r0, [r3, #0]
    24f6:	4b26      	ldr	r3, [pc, #152]	; (2590 <tc_callback_PWM+0x16c>)
    24f8:	701d      	strb	r5, [r3, #0]
    24fa:	4b1e      	ldr	r3, [pc, #120]	; (2574 <tc_callback_PWM+0x150>)
    24fc:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    24fe:	2dff      	cmp	r5, #255	; 0xff
    2500:	d01e      	beq.n	2540 <tc_callback_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    2502:	9c01      	ldr	r4, [sp, #4]
    2504:	0020      	movs	r0, r4
    2506:	4b23      	ldr	r3, [pc, #140]	; (2594 <tc_callback_PWM+0x170>)
    2508:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    250a:	4b21      	ldr	r3, [pc, #132]	; (2590 <tc_callback_PWM+0x16c>)
    250c:	781a      	ldrb	r2, [r3, #0]
    250e:	2100      	movs	r1, #0
    2510:	0020      	movs	r0, r4
    2512:	4b21      	ldr	r3, [pc, #132]	; (2598 <tc_callback_PWM+0x174>)
    2514:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    2516:	b002      	add	sp, #8
    2518:	bc1c      	pop	{r2, r3, r4}
    251a:	4690      	mov	r8, r2
    251c:	469a      	mov	sl, r3
    251e:	46a3      	mov	fp, r4
    2520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2522:	4665      	mov	r5, ip
    2524:	4b19      	ldr	r3, [pc, #100]	; (258c <tc_callback_PWM+0x168>)
    2526:	7019      	strb	r1, [r3, #0]
    2528:	4b15      	ldr	r3, [pc, #84]	; (2580 <tc_callback_PWM+0x15c>)
    252a:	4668      	mov	r0, sp
    252c:	7800      	ldrb	r0, [r0, #0]
    252e:	7018      	strb	r0, [r3, #0]
    2530:	4b17      	ldr	r3, [pc, #92]	; (2590 <tc_callback_PWM+0x16c>)
    2532:	7019      	strb	r1, [r3, #0]
    2534:	4b0f      	ldr	r3, [pc, #60]	; (2574 <tc_callback_PWM+0x150>)
    2536:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[++compare_array_ID];
    2538:	4661      	mov	r1, ip
    253a:	e7e0      	b.n	24fe <tc_callback_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    253c:	000d      	movs	r5, r1
    253e:	e7de      	b.n	24fe <tc_callback_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    2540:	9c01      	ldr	r4, [sp, #4]
    2542:	0020      	movs	r0, r4
    2544:	4b13      	ldr	r3, [pc, #76]	; (2594 <tc_callback_PWM+0x170>)
    2546:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2548:	2200      	movs	r2, #0
    254a:	2100      	movs	r1, #0
    254c:	0020      	movs	r0, r4
    254e:	4b12      	ldr	r3, [pc, #72]	; (2598 <tc_callback_PWM+0x174>)
    2550:	4798      	blx	r3
    2552:	e7e0      	b.n	2516 <tc_callback_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2554:	2200      	movs	r2, #0
    2556:	2100      	movs	r1, #0
    2558:	9801      	ldr	r0, [sp, #4]
    255a:	4b0f      	ldr	r3, [pc, #60]	; (2598 <tc_callback_PWM+0x174>)
    255c:	4798      	blx	r3
    255e:	e7da      	b.n	2516 <tc_callback_PWM+0xf2>
		first_time = false;
    2560:	2200      	movs	r2, #0
    2562:	4b03      	ldr	r3, [pc, #12]	; (2570 <tc_callback_PWM+0x14c>)
    2564:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    2566:	2100      	movs	r1, #0
    2568:	9801      	ldr	r0, [sp, #4]
    256a:	4b0b      	ldr	r3, [pc, #44]	; (2598 <tc_callback_PWM+0x174>)
    256c:	4798      	blx	r3
}
    256e:	e7d2      	b.n	2516 <tc_callback_PWM+0xf2>
    2570:	2000000b 	.word	0x2000000b
    2574:	2000027e 	.word	0x2000027e
    2578:	20000268 	.word	0x20000268
    257c:	41004400 	.word	0x41004400
    2580:	2000028e 	.word	0x2000028e
    2584:	2000000a 	.word	0x2000000a
    2588:	20000278 	.word	0x20000278
    258c:	200000b4 	.word	0x200000b4
    2590:	200000b3 	.word	0x200000b3
    2594:	00001d35 	.word	0x00001d35
    2598:	00001d67 	.word	0x00001d67

0000259c <transfer_temp>:
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_compares = 0;
    259e:	2200      	movs	r2, #0
    25a0:	4b0d      	ldr	r3, [pc, #52]	; (25d8 <transfer_temp+0x3c>)
    25a2:	701a      	strb	r2, [r3, #0]
    25a4:	2300      	movs	r3, #0
    25a6:	2600      	movs	r6, #0
		if(temp_compare_array[i] != 255)
    25a8:	4d0c      	ldr	r5, [pc, #48]	; (25dc <transfer_temp+0x40>)
		compare_array[i] = temp_compare_array[i] ;
    25aa:	4f0d      	ldr	r7, [pc, #52]	; (25e0 <transfer_temp+0x44>)
		pin_array[i]  = temp_pin_array[i];
    25ac:	4c0d      	ldr	r4, [pc, #52]	; (25e4 <transfer_temp+0x48>)
    25ae:	480e      	ldr	r0, [pc, #56]	; (25e8 <transfer_temp+0x4c>)
    25b0:	e005      	b.n	25be <transfer_temp+0x22>
		compare_array[i] = temp_compare_array[i] ;
    25b2:	54f9      	strb	r1, [r7, r3]
		pin_array[i]  = temp_pin_array[i];
    25b4:	5cc1      	ldrb	r1, [r0, r3]
    25b6:	54e1      	strb	r1, [r4, r3]
    25b8:	3301      	adds	r3, #1
	for(i=0;i<= NO_OF_LEDS-1;i++)
    25ba:	2b06      	cmp	r3, #6
    25bc:	d006      	beq.n	25cc <transfer_temp+0x30>
		if(temp_compare_array[i] != 255)
    25be:	5ce9      	ldrb	r1, [r5, r3]
    25c0:	29ff      	cmp	r1, #255	; 0xff
    25c2:	d0f6      	beq.n	25b2 <transfer_temp+0x16>
			N_valid_compares++;
    25c4:	3201      	adds	r2, #1
    25c6:	b2d2      	uxtb	r2, r2
    25c8:	2601      	movs	r6, #1
    25ca:	e7f2      	b.n	25b2 <transfer_temp+0x16>
    25cc:	2e00      	cmp	r6, #0
    25ce:	d100      	bne.n	25d2 <transfer_temp+0x36>
}
    25d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d2:	4b01      	ldr	r3, [pc, #4]	; (25d8 <transfer_temp+0x3c>)
    25d4:	701a      	strb	r2, [r3, #0]
    25d6:	e7fb      	b.n	25d0 <transfer_temp+0x34>
    25d8:	2000000a 	.word	0x2000000a
    25dc:	20000270 	.word	0x20000270
    25e0:	20000278 	.word	0x20000278
    25e4:	20000268 	.word	0x20000268
    25e8:	20000280 	.word	0x20000280

000025ec <tc_callback_OF>:
{
    25ec:	b570      	push	{r4, r5, r6, lr}
    25ee:	0004      	movs	r4, r0
	port_base->OUTCLR.reg = CLEAR_ORB ;
    25f0:	4a1f      	ldr	r2, [pc, #124]	; (2670 <tc_callback_OF+0x84>)
    25f2:	4b20      	ldr	r3, [pc, #128]	; (2674 <tc_callback_OF+0x88>)
    25f4:	615a      	str	r2, [r3, #20]
	if(update_compare_array == true)
    25f6:	4b20      	ldr	r3, [pc, #128]	; (2678 <tc_callback_OF+0x8c>)
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d008      	beq.n	2610 <tc_callback_OF+0x24>
		if(int_enable == true)
    25fe:	4b1f      	ldr	r3, [pc, #124]	; (267c <tc_callback_OF+0x90>)
    2600:	781b      	ldrb	r3, [r3, #0]
    2602:	2b00      	cmp	r3, #0
    2604:	d118      	bne.n	2638 <tc_callback_OF+0x4c>
		transfer_temp();
    2606:	4b1e      	ldr	r3, [pc, #120]	; (2680 <tc_callback_OF+0x94>)
    2608:	4798      	blx	r3
		update_compare_array = false;
    260a:	2200      	movs	r2, #0
    260c:	4b1a      	ldr	r3, [pc, #104]	; (2678 <tc_callback_OF+0x8c>)
    260e:	701a      	strb	r2, [r3, #0]
	compare_array_ID = 0;
    2610:	2300      	movs	r3, #0
    2612:	4a1c      	ldr	r2, [pc, #112]	; (2684 <tc_callback_OF+0x98>)
    2614:	7013      	strb	r3, [r2, #0]
	pin_array_ID  = 0;
    2616:	4a1c      	ldr	r2, [pc, #112]	; (2688 <tc_callback_OF+0x9c>)
    2618:	7013      	strb	r3, [r2, #0]
	compare_value = compare_array[0];
    261a:	4b1c      	ldr	r3, [pc, #112]	; (268c <tc_callback_OF+0xa0>)
    261c:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    261e:	2aff      	cmp	r2, #255	; 0xff
    2620:	d121      	bne.n	2666 <tc_callback_OF+0x7a>
		int_enable = true;
    2622:	2201      	movs	r2, #1
    2624:	4b15      	ldr	r3, [pc, #84]	; (267c <tc_callback_OF+0x90>)
    2626:	701a      	strb	r2, [r3, #0]
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    2628:	4b19      	ldr	r3, [pc, #100]	; (2690 <tc_callback_OF+0xa4>)
    262a:	2110      	movs	r1, #16
    262c:	681a      	ldr	r2, [r3, #0]
    262e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    2630:	7e5a      	ldrb	r2, [r3, #25]
    2632:	438a      	bics	r2, r1
    2634:	765a      	strb	r2, [r3, #25]
}
    2636:	bd70      	pop	{r4, r5, r6, pc}
			int_enable = false;
    2638:	2200      	movs	r2, #0
    263a:	4b10      	ldr	r3, [pc, #64]	; (267c <tc_callback_OF+0x90>)
    263c:	701a      	strb	r2, [r3, #0]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    263e:	4d14      	ldr	r5, [pc, #80]	; (2690 <tc_callback_OF+0xa4>)
    2640:	6828      	ldr	r0, [r5, #0]
    2642:	4b14      	ldr	r3, [pc, #80]	; (2694 <tc_callback_OF+0xa8>)
    2644:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    2646:	4b14      	ldr	r3, [pc, #80]	; (2698 <tc_callback_OF+0xac>)
    2648:	5c1b      	ldrb	r3, [r3, r0]
    264a:	221f      	movs	r2, #31
    264c:	401a      	ands	r2, r3
    264e:	2301      	movs	r3, #1
    2650:	4093      	lsls	r3, r2
    2652:	4a12      	ldr	r2, [pc, #72]	; (269c <tc_callback_OF+0xb0>)
    2654:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    2656:	7e6b      	ldrb	r3, [r5, #25]
    2658:	2210      	movs	r2, #16
    265a:	4313      	orrs	r3, r2
    265c:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    265e:	682b      	ldr	r3, [r5, #0]
    2660:	2210      	movs	r2, #16
    2662:	735a      	strb	r2, [r3, #13]
    2664:	e7cf      	b.n	2606 <tc_callback_OF+0x1a>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    2666:	2100      	movs	r1, #0
    2668:	0020      	movs	r0, r4
    266a:	4b0d      	ldr	r3, [pc, #52]	; (26a0 <tc_callback_OF+0xb4>)
    266c:	4798      	blx	r3
    266e:	e7e2      	b.n	2636 <tc_callback_OF+0x4a>
    2670:	08038300 	.word	0x08038300
    2674:	41004400 	.word	0x41004400
    2678:	200000b6 	.word	0x200000b6
    267c:	200000b5 	.word	0x200000b5
    2680:	0000259d 	.word	0x0000259d
    2684:	2000028e 	.word	0x2000028e
    2688:	2000027e 	.word	0x2000027e
    268c:	20000278 	.word	0x20000278
    2690:	2000024c 	.word	0x2000024c
    2694:	00001ae1 	.word	0x00001ae1
    2698:	000036bc 	.word	0x000036bc
    269c:	e000e100 	.word	0xe000e100
    26a0:	00001d67 	.word	0x00001d67

000026a4 <transfer_temp_2>:
{
    26a4:	2300      	movs	r3, #0
		temp_compare_array[i] = temp_compare_array_2[i] ;
    26a6:	4804      	ldr	r0, [pc, #16]	; (26b8 <transfer_temp_2+0x14>)
    26a8:	4904      	ldr	r1, [pc, #16]	; (26bc <transfer_temp_2+0x18>)
    26aa:	5cca      	ldrb	r2, [r1, r3]
    26ac:	54c2      	strb	r2, [r0, r3]
    26ae:	3301      	adds	r3, #1
	for(i=0;i<=NO_OF_LEDS-1;i++)
    26b0:	2b06      	cmp	r3, #6
    26b2:	d1fa      	bne.n	26aa <transfer_temp_2+0x6>
}
    26b4:	4770      	bx	lr
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	20000270 	.word	0x20000270
    26bc:	20000288 	.word	0x20000288

000026c0 <increasing_sort_tag>:
{
    26c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c2:	46ce      	mov	lr, r9
    26c4:	b500      	push	{lr}
	transfer_temp_2();
    26c6:	4b15      	ldr	r3, [pc, #84]	; (271c <increasing_sort_tag+0x5c>)
    26c8:	4798      	blx	r3
    26ca:	2305      	movs	r3, #5
    26cc:	4699      	mov	r9, r3
			if(temp_compare_array[j]>temp_compare_array[j+1])
    26ce:	4f14      	ldr	r7, [pc, #80]	; (2720 <increasing_sort_tag+0x60>)
				temp_compare_array[j] = temp_compare_array[j+1];
    26d0:	003e      	movs	r6, r7
				temp = temp_pin_array[j];
    26d2:	4d14      	ldr	r5, [pc, #80]	; (2724 <increasing_sort_tag+0x64>)
    26d4:	e017      	b.n	2706 <increasing_sort_tag+0x46>
		for(j=0;j< N-i-1;j++)
    26d6:	3301      	adds	r3, #1
    26d8:	b2db      	uxtb	r3, r3
    26da:	001a      	movs	r2, r3
    26dc:	4563      	cmp	r3, ip
    26de:	da0b      	bge.n	26f8 <increasing_sort_tag+0x38>
			if(temp_compare_array[j]>temp_compare_array[j+1])
    26e0:	5cb8      	ldrb	r0, [r7, r2]
    26e2:	1c51      	adds	r1, r2, #1
    26e4:	5c7c      	ldrb	r4, [r7, r1]
    26e6:	42a0      	cmp	r0, r4
    26e8:	d9f5      	bls.n	26d6 <increasing_sort_tag+0x16>
				temp_compare_array[j] = temp_compare_array[j+1];
    26ea:	54b4      	strb	r4, [r6, r2]
				temp_compare_array[j+1]= temp;
    26ec:	5470      	strb	r0, [r6, r1]
				temp = temp_pin_array[j];
    26ee:	5ca8      	ldrb	r0, [r5, r2]
				temp_pin_array[j] = temp_pin_array[j+1];
    26f0:	5c6c      	ldrb	r4, [r5, r1]
    26f2:	54ac      	strb	r4, [r5, r2]
				temp_pin_array[j+1] = temp;
    26f4:	5468      	strb	r0, [r5, r1]
    26f6:	e7ee      	b.n	26d6 <increasing_sort_tag+0x16>
    26f8:	2301      	movs	r3, #1
    26fa:	425b      	negs	r3, r3
    26fc:	469c      	mov	ip, r3
    26fe:	44e1      	add	r9, ip
	for(i=0; i< N-1 ;i++)
    2700:	464b      	mov	r3, r9
    2702:	2b00      	cmp	r3, #0
    2704:	d006      	beq.n	2714 <increasing_sort_tag+0x54>
		for(j=0;j< N-i-1;j++)
    2706:	46cc      	mov	ip, r9
    2708:	2200      	movs	r2, #0
    270a:	2300      	movs	r3, #0
    270c:	4649      	mov	r1, r9
    270e:	2900      	cmp	r1, #0
    2710:	dce6      	bgt.n	26e0 <increasing_sort_tag+0x20>
    2712:	e7f1      	b.n	26f8 <increasing_sort_tag+0x38>
}
    2714:	bc04      	pop	{r2}
    2716:	4691      	mov	r9, r2
    2718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	000026a5 	.word	0x000026a5
    2720:	20000270 	.word	0x20000270
    2724:	20000280 	.word	0x20000280

00002728 <ORB_timer_init>:
{
    2728:	b510      	push	{r4, lr}
    272a:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    272c:	aa01      	add	r2, sp, #4
    272e:	2300      	movs	r3, #0
    2730:	2100      	movs	r1, #0
    2732:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2734:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2736:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2738:	2000      	movs	r0, #0
    273a:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    273c:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    273e:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2740:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2742:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    2744:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2746:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2748:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    274a:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    274c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    274e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2750:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2752:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2754:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2756:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    2758:	23c0      	movs	r3, #192	; 0xc0
    275a:	00db      	lsls	r3, r3, #3
    275c:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    275e:	2304      	movs	r3, #4
    2760:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    2762:	21ff      	movs	r1, #255	; 0xff
    2764:	3325      	adds	r3, #37	; 0x25
    2766:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    2768:	4c07      	ldr	r4, [pc, #28]	; (2788 <ORB_timer_init+0x60>)
    276a:	4908      	ldr	r1, [pc, #32]	; (278c <ORB_timer_init+0x64>)
    276c:	0020      	movs	r0, r4
    276e:	4b08      	ldr	r3, [pc, #32]	; (2790 <ORB_timer_init+0x68>)
    2770:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2772:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2774:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2776:	b25b      	sxtb	r3, r3
    2778:	2b00      	cmp	r3, #0
    277a:	dbfb      	blt.n	2774 <ORB_timer_init+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    277c:	8813      	ldrh	r3, [r2, #0]
    277e:	2102      	movs	r1, #2
    2780:	430b      	orrs	r3, r1
    2782:	8013      	strh	r3, [r2, #0]
}
    2784:	b00e      	add	sp, #56	; 0x38
    2786:	bd10      	pop	{r4, pc}
    2788:	2000024c 	.word	0x2000024c
    278c:	42001800 	.word	0x42001800
    2790:	00001b05 	.word	0x00001b05

00002794 <set_drivestrength_ORB>:
{
    2794:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    2796:	2201      	movs	r2, #1
    2798:	4902      	ldr	r1, [pc, #8]	; (27a4 <set_drivestrength_ORB+0x10>)
    279a:	4803      	ldr	r0, [pc, #12]	; (27a8 <set_drivestrength_ORB+0x14>)
    279c:	4b03      	ldr	r3, [pc, #12]	; (27ac <set_drivestrength_ORB+0x18>)
    279e:	4798      	blx	r3
}
    27a0:	bd10      	pop	{r4, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	08038300 	.word	0x08038300
    27a8:	41004400 	.word	0x41004400
    27ac:	00002f05 	.word	0x00002f05

000027b0 <ORB_setup_pins>:
{
    27b0:	b530      	push	{r4, r5, lr}
    27b2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    27b4:	ac01      	add	r4, sp, #4
    27b6:	2301      	movs	r3, #1
    27b8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    27ba:	2200      	movs	r2, #0
    27bc:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    27be:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(ORB_R1, &config_port_pin);
    27c0:	0021      	movs	r1, r4
    27c2:	200f      	movs	r0, #15
    27c4:	4d0b      	ldr	r5, [pc, #44]	; (27f4 <ORB_setup_pins+0x44>)
    27c6:	47a8      	blx	r5
	port_pin_set_config(ORB_G1, &config_port_pin);
    27c8:	0021      	movs	r1, r4
    27ca:	2010      	movs	r0, #16
    27cc:	47a8      	blx	r5
	port_pin_set_config(ORB_B1, &config_port_pin);
    27ce:	0021      	movs	r1, r4
    27d0:	2011      	movs	r0, #17
    27d2:	47a8      	blx	r5
	port_pin_set_config(ORB_R2, &config_port_pin);
    27d4:	0021      	movs	r1, r4
    27d6:	2008      	movs	r0, #8
    27d8:	47a8      	blx	r5
	port_pin_set_config(ORB_G2, &config_port_pin);
    27da:	0021      	movs	r1, r4
    27dc:	2009      	movs	r0, #9
    27de:	47a8      	blx	r5
	port_pin_set_config(ORB_B2, &config_port_pin);
    27e0:	0021      	movs	r1, r4
    27e2:	201b      	movs	r0, #27
    27e4:	47a8      	blx	r5
	set_drivestrength_ORB();
    27e6:	4b04      	ldr	r3, [pc, #16]	; (27f8 <ORB_setup_pins+0x48>)
    27e8:	4798      	blx	r3
	port_base->OUTCLR.reg = CLEAR_ORB ;
    27ea:	4a04      	ldr	r2, [pc, #16]	; (27fc <ORB_setup_pins+0x4c>)
    27ec:	4b04      	ldr	r3, [pc, #16]	; (2800 <ORB_setup_pins+0x50>)
    27ee:	615a      	str	r2, [r3, #20]
}
    27f0:	b003      	add	sp, #12
    27f2:	bd30      	pop	{r4, r5, pc}
    27f4:	00001f51 	.word	0x00001f51
    27f8:	00002795 	.word	0x00002795
    27fc:	08038300 	.word	0x08038300
    2800:	41004400 	.word	0x41004400

00002804 <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    2804:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    2806:	4d05      	ldr	r5, [pc, #20]	; (281c <ORB_timer_callbacks_init+0x18>)
    2808:	2200      	movs	r2, #0
    280a:	4905      	ldr	r1, [pc, #20]	; (2820 <ORB_timer_callbacks_init+0x1c>)
    280c:	0028      	movs	r0, r5
    280e:	4c05      	ldr	r4, [pc, #20]	; (2824 <ORB_timer_callbacks_init+0x20>)
    2810:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    2812:	2202      	movs	r2, #2
    2814:	4904      	ldr	r1, [pc, #16]	; (2828 <ORB_timer_callbacks_init+0x24>)
    2816:	0028      	movs	r0, r5
    2818:	47a0      	blx	r4
	
}
    281a:	bd70      	pop	{r4, r5, r6, pc}
    281c:	2000024c 	.word	0x2000024c
    2820:	000025ed 	.word	0x000025ed
    2824:	00001db7 	.word	0x00001db7
    2828:	00002425 	.word	0x00002425

0000282c <enable_ORB>:

void enable_ORB()
{
    282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282e:	46ce      	mov	lr, r9
    2830:	4647      	mov	r7, r8
    2832:	b580      	push	{r7, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    2834:	4c13      	ldr	r4, [pc, #76]	; (2884 <enable_ORB+0x58>)
    2836:	6820      	ldr	r0, [r4, #0]
    2838:	4b13      	ldr	r3, [pc, #76]	; (2888 <enable_ORB+0x5c>)
    283a:	4699      	mov	r9, r3
    283c:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    283e:	4b13      	ldr	r3, [pc, #76]	; (288c <enable_ORB+0x60>)
    2840:	4698      	mov	r8, r3
    2842:	5c1b      	ldrb	r3, [r3, r0]
    2844:	261f      	movs	r6, #31
    2846:	4033      	ands	r3, r6
    2848:	2501      	movs	r5, #1
    284a:	002a      	movs	r2, r5
    284c:	409a      	lsls	r2, r3
    284e:	4f10      	ldr	r7, [pc, #64]	; (2890 <enable_ORB+0x64>)
    2850:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2852:	7e63      	ldrb	r3, [r4, #25]
    2854:	2201      	movs	r2, #1
    2856:	4313      	orrs	r3, r2
    2858:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    285a:	6823      	ldr	r3, [r4, #0]
    285c:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    285e:	0018      	movs	r0, r3
    2860:	47c8      	blx	r9
    2862:	4643      	mov	r3, r8
    2864:	5c1b      	ldrb	r3, [r3, r0]
    2866:	401e      	ands	r6, r3
    2868:	40b5      	lsls	r5, r6
    286a:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    286c:	7e63      	ldrb	r3, [r4, #25]
    286e:	2210      	movs	r2, #16
    2870:	4313      	orrs	r3, r2
    2872:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    2874:	6823      	ldr	r3, [r4, #0]
    2876:	2210      	movs	r2, #16
    2878:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    287a:	bc0c      	pop	{r2, r3}
    287c:	4690      	mov	r8, r2
    287e:	4699      	mov	r9, r3
    2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	2000024c 	.word	0x2000024c
    2888:	00001ae1 	.word	0x00001ae1
    288c:	000036bc 	.word	0x000036bc
    2890:	e000e100 	.word	0xe000e100

00002894 <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array[0]  = ORB_R1;
    2894:	4b06      	ldr	r3, [pc, #24]	; (28b0 <initializing_pin_array+0x1c>)
    2896:	220f      	movs	r2, #15
    2898:	701a      	strb	r2, [r3, #0]
	temp_pin_array[1]  = ORB_G1;
    289a:	3201      	adds	r2, #1
    289c:	705a      	strb	r2, [r3, #1]
	temp_pin_array[2]  = ORB_B1;
    289e:	3201      	adds	r2, #1
    28a0:	709a      	strb	r2, [r3, #2]
	temp_pin_array[3]  = ORB_R2;
    28a2:	3a09      	subs	r2, #9
    28a4:	70da      	strb	r2, [r3, #3]
	temp_pin_array[4]  = ORB_G2;
    28a6:	3201      	adds	r2, #1
    28a8:	711a      	strb	r2, [r3, #4]
	temp_pin_array[5]  = ORB_B2;
    28aa:	3212      	adds	r2, #18
    28ac:	715a      	strb	r2, [r3, #5]
}
    28ae:	4770      	bx	lr
    28b0:	20000280 	.word	0x20000280

000028b4 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 200;//Left -- R
    28b4:	4b06      	ldr	r3, [pc, #24]	; (28d0 <initializing_compare_array+0x1c>)
    28b6:	22c8      	movs	r2, #200	; 0xc8
    28b8:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 210;//Left  -- G
    28ba:	320a      	adds	r2, #10
    28bc:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 220;//Left  -- B
    28be:	320a      	adds	r2, #10
    28c0:	709a      	strb	r2, [r3, #2]
	temp_compare_array_2[3] = 230;//Right -- R
    28c2:	320a      	adds	r2, #10
    28c4:	70da      	strb	r2, [r3, #3]
	temp_compare_array_2[4] = 240;//Right  -- G
    28c6:	320a      	adds	r2, #10
    28c8:	711a      	strb	r2, [r3, #4]
	temp_compare_array_2[5] = 250;//Right -- B
    28ca:	320a      	adds	r2, #10
    28cc:	715a      	strb	r2, [r3, #5]
}
    28ce:	4770      	bx	lr
    28d0:	20000288 	.word	0x20000288

000028d4 <ORB_init_array>:


void ORB_init_array()
{
    28d4:	b510      	push	{r4, lr}
	initializing_pin_array();
    28d6:	4b05      	ldr	r3, [pc, #20]	; (28ec <ORB_init_array+0x18>)
    28d8:	4798      	blx	r3
	initializing_compare_array();
    28da:	4b05      	ldr	r3, [pc, #20]	; (28f0 <ORB_init_array+0x1c>)
    28dc:	4798      	blx	r3
	transfer_temp_2();
    28de:	4b05      	ldr	r3, [pc, #20]	; (28f4 <ORB_init_array+0x20>)
    28e0:	4798      	blx	r3
	increasing_sort_tag();
    28e2:	4b05      	ldr	r3, [pc, #20]	; (28f8 <ORB_init_array+0x24>)
    28e4:	4798      	blx	r3
	transfer_temp();
    28e6:	4b05      	ldr	r3, [pc, #20]	; (28fc <ORB_init_array+0x28>)
    28e8:	4798      	blx	r3
}
    28ea:	bd10      	pop	{r4, pc}
    28ec:	00002895 	.word	0x00002895
    28f0:	000028b5 	.word	0x000028b5
    28f4:	000026a5 	.word	0x000026a5
    28f8:	000026c1 	.word	0x000026c1
    28fc:	0000259d 	.word	0x0000259d

00002900 <ORB_init>:

void ORB_init()
{
    2900:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    2902:	4b04      	ldr	r3, [pc, #16]	; (2914 <ORB_init+0x14>)
    2904:	4798      	blx	r3
	ORB_setup_pins();
    2906:	4b04      	ldr	r3, [pc, #16]	; (2918 <ORB_init+0x18>)
    2908:	4798      	blx	r3
	ORB_init_array();
    290a:	4b04      	ldr	r3, [pc, #16]	; (291c <ORB_init+0x1c>)
    290c:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    290e:	4b04      	ldr	r3, [pc, #16]	; (2920 <ORB_init+0x20>)
    2910:	4798      	blx	r3

    2912:	bd10      	pop	{r4, pc}
    2914:	00002729 	.word	0x00002729
    2918:	000027b1 	.word	0x000027b1
    291c:	000028d5 	.word	0x000028d5
    2920:	00002805 	.word	0x00002805

00002924 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2924:	4770      	bx	lr
	...

00002928 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2928:	4b0c      	ldr	r3, [pc, #48]	; (295c <cpu_irq_enter_critical+0x34>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	2b00      	cmp	r3, #0
    292e:	d106      	bne.n	293e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2930:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2934:	2b00      	cmp	r3, #0
    2936:	d007      	beq.n	2948 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2938:	2200      	movs	r2, #0
    293a:	4b09      	ldr	r3, [pc, #36]	; (2960 <cpu_irq_enter_critical+0x38>)
    293c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    293e:	4a07      	ldr	r2, [pc, #28]	; (295c <cpu_irq_enter_critical+0x34>)
    2940:	6813      	ldr	r3, [r2, #0]
    2942:	3301      	adds	r3, #1
    2944:	6013      	str	r3, [r2, #0]
}
    2946:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2948:	b672      	cpsid	i
    294a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    294e:	2200      	movs	r2, #0
    2950:	4b04      	ldr	r3, [pc, #16]	; (2964 <cpu_irq_enter_critical+0x3c>)
    2952:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2954:	3201      	adds	r2, #1
    2956:	4b02      	ldr	r3, [pc, #8]	; (2960 <cpu_irq_enter_critical+0x38>)
    2958:	701a      	strb	r2, [r3, #0]
    295a:	e7f0      	b.n	293e <cpu_irq_enter_critical+0x16>
    295c:	200000b8 	.word	0x200000b8
    2960:	200000bc 	.word	0x200000bc
    2964:	2000000c 	.word	0x2000000c

00002968 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2968:	4b08      	ldr	r3, [pc, #32]	; (298c <cpu_irq_leave_critical+0x24>)
    296a:	681a      	ldr	r2, [r3, #0]
    296c:	3a01      	subs	r2, #1
    296e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d109      	bne.n	298a <cpu_irq_leave_critical+0x22>
    2976:	4b06      	ldr	r3, [pc, #24]	; (2990 <cpu_irq_leave_critical+0x28>)
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	2b00      	cmp	r3, #0
    297c:	d005      	beq.n	298a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    297e:	2201      	movs	r2, #1
    2980:	4b04      	ldr	r3, [pc, #16]	; (2994 <cpu_irq_leave_critical+0x2c>)
    2982:	701a      	strb	r2, [r3, #0]
    2984:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2988:	b662      	cpsie	i
	}
}
    298a:	4770      	bx	lr
    298c:	200000b8 	.word	0x200000b8
    2990:	200000bc 	.word	0x200000bc
    2994:	2000000c 	.word	0x2000000c

00002998 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2998:	b510      	push	{r4, lr}
	switch (clock_source) {
    299a:	2808      	cmp	r0, #8
    299c:	d803      	bhi.n	29a6 <system_clock_source_get_hz+0xe>
    299e:	0080      	lsls	r0, r0, #2
    29a0:	4b1b      	ldr	r3, [pc, #108]	; (2a10 <system_clock_source_get_hz+0x78>)
    29a2:	581b      	ldr	r3, [r3, r0]
    29a4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    29a6:	2000      	movs	r0, #0
    29a8:	e030      	b.n	2a0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    29aa:	4b1a      	ldr	r3, [pc, #104]	; (2a14 <system_clock_source_get_hz+0x7c>)
    29ac:	6918      	ldr	r0, [r3, #16]
    29ae:	e02d      	b.n	2a0c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    29b0:	4b19      	ldr	r3, [pc, #100]	; (2a18 <system_clock_source_get_hz+0x80>)
    29b2:	6a1b      	ldr	r3, [r3, #32]
    29b4:	059b      	lsls	r3, r3, #22
    29b6:	0f9b      	lsrs	r3, r3, #30
    29b8:	4818      	ldr	r0, [pc, #96]	; (2a1c <system_clock_source_get_hz+0x84>)
    29ba:	40d8      	lsrs	r0, r3
    29bc:	e026      	b.n	2a0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    29be:	4b15      	ldr	r3, [pc, #84]	; (2a14 <system_clock_source_get_hz+0x7c>)
    29c0:	6958      	ldr	r0, [r3, #20]
    29c2:	e023      	b.n	2a0c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    29c4:	4b13      	ldr	r3, [pc, #76]	; (2a14 <system_clock_source_get_hz+0x7c>)
    29c6:	681b      	ldr	r3, [r3, #0]
			return 0;
    29c8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    29ca:	079b      	lsls	r3, r3, #30
    29cc:	d51e      	bpl.n	2a0c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    29ce:	4912      	ldr	r1, [pc, #72]	; (2a18 <system_clock_source_get_hz+0x80>)
    29d0:	2210      	movs	r2, #16
    29d2:	68cb      	ldr	r3, [r1, #12]
    29d4:	421a      	tst	r2, r3
    29d6:	d0fc      	beq.n	29d2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    29d8:	4b0e      	ldr	r3, [pc, #56]	; (2a14 <system_clock_source_get_hz+0x7c>)
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	075b      	lsls	r3, r3, #29
    29de:	d401      	bmi.n	29e4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    29e0:	480f      	ldr	r0, [pc, #60]	; (2a20 <system_clock_source_get_hz+0x88>)
    29e2:	e013      	b.n	2a0c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29e4:	2000      	movs	r0, #0
    29e6:	4b0f      	ldr	r3, [pc, #60]	; (2a24 <system_clock_source_get_hz+0x8c>)
    29e8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    29ea:	4b0a      	ldr	r3, [pc, #40]	; (2a14 <system_clock_source_get_hz+0x7c>)
    29ec:	689b      	ldr	r3, [r3, #8]
    29ee:	041b      	lsls	r3, r3, #16
    29f0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29f2:	4358      	muls	r0, r3
    29f4:	e00a      	b.n	2a0c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29f6:	2350      	movs	r3, #80	; 0x50
    29f8:	4a07      	ldr	r2, [pc, #28]	; (2a18 <system_clock_source_get_hz+0x80>)
    29fa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    29fc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29fe:	075b      	lsls	r3, r3, #29
    2a00:	d504      	bpl.n	2a0c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2a02:	4b04      	ldr	r3, [pc, #16]	; (2a14 <system_clock_source_get_hz+0x7c>)
    2a04:	68d8      	ldr	r0, [r3, #12]
    2a06:	e001      	b.n	2a0c <system_clock_source_get_hz+0x74>
		return 32768UL;
    2a08:	2080      	movs	r0, #128	; 0x80
    2a0a:	0200      	lsls	r0, r0, #8
	}
}
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	000036c0 	.word	0x000036c0
    2a14:	200000c0 	.word	0x200000c0
    2a18:	40000800 	.word	0x40000800
    2a1c:	007a1200 	.word	0x007a1200
    2a20:	02dc6c00 	.word	0x02dc6c00
    2a24:	00002df9 	.word	0x00002df9

00002a28 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2a28:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2a2a:	490c      	ldr	r1, [pc, #48]	; (2a5c <system_clock_source_osc8m_set_config+0x34>)
    2a2c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2a2e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2a30:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2a32:	7840      	ldrb	r0, [r0, #1]
    2a34:	2201      	movs	r2, #1
    2a36:	4010      	ands	r0, r2
    2a38:	0180      	lsls	r0, r0, #6
    2a3a:	2640      	movs	r6, #64	; 0x40
    2a3c:	43b3      	bics	r3, r6
    2a3e:	4303      	orrs	r3, r0
    2a40:	402a      	ands	r2, r5
    2a42:	01d2      	lsls	r2, r2, #7
    2a44:	2080      	movs	r0, #128	; 0x80
    2a46:	4383      	bics	r3, r0
    2a48:	4313      	orrs	r3, r2
    2a4a:	2203      	movs	r2, #3
    2a4c:	4022      	ands	r2, r4
    2a4e:	0212      	lsls	r2, r2, #8
    2a50:	4803      	ldr	r0, [pc, #12]	; (2a60 <system_clock_source_osc8m_set_config+0x38>)
    2a52:	4003      	ands	r3, r0
    2a54:	4313      	orrs	r3, r2
    2a56:	620b      	str	r3, [r1, #32]
}
    2a58:	bd70      	pop	{r4, r5, r6, pc}
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	40000800 	.word	0x40000800
    2a60:	fffffcff 	.word	0xfffffcff

00002a64 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2a64:	2808      	cmp	r0, #8
    2a66:	d803      	bhi.n	2a70 <system_clock_source_enable+0xc>
    2a68:	0080      	lsls	r0, r0, #2
    2a6a:	4b25      	ldr	r3, [pc, #148]	; (2b00 <system_clock_source_enable+0x9c>)
    2a6c:	581b      	ldr	r3, [r3, r0]
    2a6e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2a70:	2017      	movs	r0, #23
    2a72:	e044      	b.n	2afe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2a74:	4a23      	ldr	r2, [pc, #140]	; (2b04 <system_clock_source_enable+0xa0>)
    2a76:	6a13      	ldr	r3, [r2, #32]
    2a78:	2102      	movs	r1, #2
    2a7a:	430b      	orrs	r3, r1
    2a7c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2a7e:	2000      	movs	r0, #0
    2a80:	e03d      	b.n	2afe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2a82:	4a20      	ldr	r2, [pc, #128]	; (2b04 <system_clock_source_enable+0xa0>)
    2a84:	6993      	ldr	r3, [r2, #24]
    2a86:	2102      	movs	r1, #2
    2a88:	430b      	orrs	r3, r1
    2a8a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2a8c:	2000      	movs	r0, #0
		break;
    2a8e:	e036      	b.n	2afe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2a90:	4a1c      	ldr	r2, [pc, #112]	; (2b04 <system_clock_source_enable+0xa0>)
    2a92:	8a13      	ldrh	r3, [r2, #16]
    2a94:	2102      	movs	r1, #2
    2a96:	430b      	orrs	r3, r1
    2a98:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2a9a:	2000      	movs	r0, #0
		break;
    2a9c:	e02f      	b.n	2afe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2a9e:	4a19      	ldr	r2, [pc, #100]	; (2b04 <system_clock_source_enable+0xa0>)
    2aa0:	8a93      	ldrh	r3, [r2, #20]
    2aa2:	2102      	movs	r1, #2
    2aa4:	430b      	orrs	r3, r1
    2aa6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2aa8:	2000      	movs	r0, #0
		break;
    2aaa:	e028      	b.n	2afe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2aac:	4916      	ldr	r1, [pc, #88]	; (2b08 <system_clock_source_enable+0xa4>)
    2aae:	680b      	ldr	r3, [r1, #0]
    2ab0:	2202      	movs	r2, #2
    2ab2:	4313      	orrs	r3, r2
    2ab4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2ab6:	4b13      	ldr	r3, [pc, #76]	; (2b04 <system_clock_source_enable+0xa0>)
    2ab8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2aba:	0019      	movs	r1, r3
    2abc:	320e      	adds	r2, #14
    2abe:	68cb      	ldr	r3, [r1, #12]
    2ac0:	421a      	tst	r2, r3
    2ac2:	d0fc      	beq.n	2abe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2ac4:	4a10      	ldr	r2, [pc, #64]	; (2b08 <system_clock_source_enable+0xa4>)
    2ac6:	6891      	ldr	r1, [r2, #8]
    2ac8:	4b0e      	ldr	r3, [pc, #56]	; (2b04 <system_clock_source_enable+0xa0>)
    2aca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2acc:	6852      	ldr	r2, [r2, #4]
    2ace:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2ad0:	2200      	movs	r2, #0
    2ad2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ad4:	0019      	movs	r1, r3
    2ad6:	3210      	adds	r2, #16
    2ad8:	68cb      	ldr	r3, [r1, #12]
    2ada:	421a      	tst	r2, r3
    2adc:	d0fc      	beq.n	2ad8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2ade:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <system_clock_source_enable+0xa4>)
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	b29b      	uxth	r3, r3
    2ae4:	4a07      	ldr	r2, [pc, #28]	; (2b04 <system_clock_source_enable+0xa0>)
    2ae6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2ae8:	2000      	movs	r0, #0
    2aea:	e008      	b.n	2afe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2aec:	4905      	ldr	r1, [pc, #20]	; (2b04 <system_clock_source_enable+0xa0>)
    2aee:	2244      	movs	r2, #68	; 0x44
    2af0:	5c8b      	ldrb	r3, [r1, r2]
    2af2:	2002      	movs	r0, #2
    2af4:	4303      	orrs	r3, r0
    2af6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2af8:	2000      	movs	r0, #0
		break;
    2afa:	e000      	b.n	2afe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2afc:	2000      	movs	r0, #0
}
    2afe:	4770      	bx	lr
    2b00:	000036e4 	.word	0x000036e4
    2b04:	40000800 	.word	0x40000800
    2b08:	200000c0 	.word	0x200000c0

00002b0c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2b0c:	b530      	push	{r4, r5, lr}
    2b0e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2b10:	22c2      	movs	r2, #194	; 0xc2
    2b12:	00d2      	lsls	r2, r2, #3
    2b14:	4b1a      	ldr	r3, [pc, #104]	; (2b80 <system_clock_init+0x74>)
    2b16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2b18:	4a1a      	ldr	r2, [pc, #104]	; (2b84 <system_clock_init+0x78>)
    2b1a:	6853      	ldr	r3, [r2, #4]
    2b1c:	211e      	movs	r1, #30
    2b1e:	438b      	bics	r3, r1
    2b20:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2b22:	2301      	movs	r3, #1
    2b24:	466a      	mov	r2, sp
    2b26:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2b28:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2b2a:	4d17      	ldr	r5, [pc, #92]	; (2b88 <system_clock_init+0x7c>)
    2b2c:	b2e0      	uxtb	r0, r4
    2b2e:	4669      	mov	r1, sp
    2b30:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2b32:	3401      	adds	r4, #1
    2b34:	2c18      	cmp	r4, #24
    2b36:	d1f9      	bne.n	2b2c <system_clock_init+0x20>
	config->run_in_standby  = false;
    2b38:	a803      	add	r0, sp, #12
    2b3a:	2400      	movs	r4, #0
    2b3c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2b3e:	2501      	movs	r5, #1
    2b40:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2b42:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2b44:	4b11      	ldr	r3, [pc, #68]	; (2b8c <system_clock_init+0x80>)
    2b46:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2b48:	2006      	movs	r0, #6
    2b4a:	4b11      	ldr	r3, [pc, #68]	; (2b90 <system_clock_init+0x84>)
    2b4c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2b4e:	4b11      	ldr	r3, [pc, #68]	; (2b94 <system_clock_init+0x88>)
    2b50:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    2b52:	4b11      	ldr	r3, [pc, #68]	; (2b98 <system_clock_init+0x8c>)
    2b54:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2b56:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2b58:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2b5a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2b5c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2b5e:	466b      	mov	r3, sp
    2b60:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2b62:	2306      	movs	r3, #6
    2b64:	466a      	mov	r2, sp
    2b66:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2b68:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2b6a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2b6c:	4669      	mov	r1, sp
    2b6e:	2000      	movs	r0, #0
    2b70:	4b0a      	ldr	r3, [pc, #40]	; (2b9c <system_clock_init+0x90>)
    2b72:	4798      	blx	r3
    2b74:	2000      	movs	r0, #0
    2b76:	4b0a      	ldr	r3, [pc, #40]	; (2ba0 <system_clock_init+0x94>)
    2b78:	4798      	blx	r3
#endif
}
    2b7a:	b005      	add	sp, #20
    2b7c:	bd30      	pop	{r4, r5, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	40000800 	.word	0x40000800
    2b84:	41004000 	.word	0x41004000
    2b88:	00002ddd 	.word	0x00002ddd
    2b8c:	00002a29 	.word	0x00002a29
    2b90:	00002a65 	.word	0x00002a65
    2b94:	00002ba5 	.word	0x00002ba5
    2b98:	40000400 	.word	0x40000400
    2b9c:	00002bc9 	.word	0x00002bc9
    2ba0:	00002c81 	.word	0x00002c81

00002ba4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2ba4:	4a06      	ldr	r2, [pc, #24]	; (2bc0 <system_gclk_init+0x1c>)
    2ba6:	6993      	ldr	r3, [r2, #24]
    2ba8:	2108      	movs	r1, #8
    2baa:	430b      	orrs	r3, r1
    2bac:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2bae:	2201      	movs	r2, #1
    2bb0:	4b04      	ldr	r3, [pc, #16]	; (2bc4 <system_gclk_init+0x20>)
    2bb2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2bb4:	0019      	movs	r1, r3
    2bb6:	780b      	ldrb	r3, [r1, #0]
    2bb8:	4213      	tst	r3, r2
    2bba:	d1fc      	bne.n	2bb6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2bbc:	4770      	bx	lr
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	40000400 	.word	0x40000400
    2bc4:	40000c00 	.word	0x40000c00

00002bc8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2bc8:	b570      	push	{r4, r5, r6, lr}
    2bca:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2bcc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2bce:	780d      	ldrb	r5, [r1, #0]
    2bd0:	022d      	lsls	r5, r5, #8
    2bd2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2bd4:	784b      	ldrb	r3, [r1, #1]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d002      	beq.n	2be0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2bda:	2380      	movs	r3, #128	; 0x80
    2bdc:	02db      	lsls	r3, r3, #11
    2bde:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2be0:	7a4b      	ldrb	r3, [r1, #9]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d002      	beq.n	2bec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2be6:	2380      	movs	r3, #128	; 0x80
    2be8:	031b      	lsls	r3, r3, #12
    2bea:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2bec:	6848      	ldr	r0, [r1, #4]
    2bee:	2801      	cmp	r0, #1
    2bf0:	d910      	bls.n	2c14 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2bf2:	1e43      	subs	r3, r0, #1
    2bf4:	4218      	tst	r0, r3
    2bf6:	d134      	bne.n	2c62 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2bf8:	2802      	cmp	r0, #2
    2bfa:	d930      	bls.n	2c5e <system_gclk_gen_set_config+0x96>
    2bfc:	2302      	movs	r3, #2
    2bfe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2c00:	3201      	adds	r2, #1
						mask <<= 1) {
    2c02:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2c04:	4298      	cmp	r0, r3
    2c06:	d8fb      	bhi.n	2c00 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2c08:	0212      	lsls	r2, r2, #8
    2c0a:	4332      	orrs	r2, r6
    2c0c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2c0e:	2380      	movs	r3, #128	; 0x80
    2c10:	035b      	lsls	r3, r3, #13
    2c12:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2c14:	7a0b      	ldrb	r3, [r1, #8]
    2c16:	2b00      	cmp	r3, #0
    2c18:	d002      	beq.n	2c20 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2c1a:	2380      	movs	r3, #128	; 0x80
    2c1c:	039b      	lsls	r3, r3, #14
    2c1e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c20:	4a13      	ldr	r2, [pc, #76]	; (2c70 <system_gclk_gen_set_config+0xa8>)
    2c22:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2c24:	b25b      	sxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	dbfb      	blt.n	2c22 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2c2a:	4b12      	ldr	r3, [pc, #72]	; (2c74 <system_gclk_gen_set_config+0xac>)
    2c2c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c2e:	4b12      	ldr	r3, [pc, #72]	; (2c78 <system_gclk_gen_set_config+0xb0>)
    2c30:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c32:	4a0f      	ldr	r2, [pc, #60]	; (2c70 <system_gclk_gen_set_config+0xa8>)
    2c34:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2c36:	b25b      	sxtb	r3, r3
    2c38:	2b00      	cmp	r3, #0
    2c3a:	dbfb      	blt.n	2c34 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2c3c:	4b0c      	ldr	r3, [pc, #48]	; (2c70 <system_gclk_gen_set_config+0xa8>)
    2c3e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c40:	001a      	movs	r2, r3
    2c42:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2c44:	b25b      	sxtb	r3, r3
    2c46:	2b00      	cmp	r3, #0
    2c48:	dbfb      	blt.n	2c42 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2c4a:	4a09      	ldr	r2, [pc, #36]	; (2c70 <system_gclk_gen_set_config+0xa8>)
    2c4c:	6853      	ldr	r3, [r2, #4]
    2c4e:	2180      	movs	r1, #128	; 0x80
    2c50:	0249      	lsls	r1, r1, #9
    2c52:	400b      	ands	r3, r1
    2c54:	431d      	orrs	r5, r3
    2c56:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2c58:	4b08      	ldr	r3, [pc, #32]	; (2c7c <system_gclk_gen_set_config+0xb4>)
    2c5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c5c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2c5e:	2200      	movs	r2, #0
    2c60:	e7d2      	b.n	2c08 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2c62:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2c64:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2c66:	2380      	movs	r3, #128	; 0x80
    2c68:	029b      	lsls	r3, r3, #10
    2c6a:	431d      	orrs	r5, r3
    2c6c:	e7d2      	b.n	2c14 <system_gclk_gen_set_config+0x4c>
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	40000c00 	.word	0x40000c00
    2c74:	00002929 	.word	0x00002929
    2c78:	40000c08 	.word	0x40000c08
    2c7c:	00002969 	.word	0x00002969

00002c80 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2c80:	b510      	push	{r4, lr}
    2c82:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c84:	4a0b      	ldr	r2, [pc, #44]	; (2cb4 <system_gclk_gen_enable+0x34>)
    2c86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c88:	b25b      	sxtb	r3, r3
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	dbfb      	blt.n	2c86 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2c8e:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <system_gclk_gen_enable+0x38>)
    2c90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c92:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <system_gclk_gen_enable+0x3c>)
    2c94:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c96:	4a07      	ldr	r2, [pc, #28]	; (2cb4 <system_gclk_gen_enable+0x34>)
    2c98:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c9a:	b25b      	sxtb	r3, r3
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	dbfb      	blt.n	2c98 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2ca0:	4a04      	ldr	r2, [pc, #16]	; (2cb4 <system_gclk_gen_enable+0x34>)
    2ca2:	6851      	ldr	r1, [r2, #4]
    2ca4:	2380      	movs	r3, #128	; 0x80
    2ca6:	025b      	lsls	r3, r3, #9
    2ca8:	430b      	orrs	r3, r1
    2caa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <system_gclk_gen_enable+0x40>)
    2cae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2cb0:	bd10      	pop	{r4, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	40000c00 	.word	0x40000c00
    2cb8:	00002929 	.word	0x00002929
    2cbc:	40000c04 	.word	0x40000c04
    2cc0:	00002969 	.word	0x00002969

00002cc4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cc8:	4a1a      	ldr	r2, [pc, #104]	; (2d34 <system_gclk_gen_get_hz+0x70>)
    2cca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2ccc:	b25b      	sxtb	r3, r3
    2cce:	2b00      	cmp	r3, #0
    2cd0:	dbfb      	blt.n	2cca <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2cd2:	4b19      	ldr	r3, [pc, #100]	; (2d38 <system_gclk_gen_get_hz+0x74>)
    2cd4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2cd6:	4b19      	ldr	r3, [pc, #100]	; (2d3c <system_gclk_gen_get_hz+0x78>)
    2cd8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cda:	4a16      	ldr	r2, [pc, #88]	; (2d34 <system_gclk_gen_get_hz+0x70>)
    2cdc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2cde:	b25b      	sxtb	r3, r3
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	dbfb      	blt.n	2cdc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2ce4:	4e13      	ldr	r6, [pc, #76]	; (2d34 <system_gclk_gen_get_hz+0x70>)
    2ce6:	6870      	ldr	r0, [r6, #4]
    2ce8:	04c0      	lsls	r0, r0, #19
    2cea:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2cec:	4b14      	ldr	r3, [pc, #80]	; (2d40 <system_gclk_gen_get_hz+0x7c>)
    2cee:	4798      	blx	r3
    2cf0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2cf2:	4b12      	ldr	r3, [pc, #72]	; (2d3c <system_gclk_gen_get_hz+0x78>)
    2cf4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2cf6:	6876      	ldr	r6, [r6, #4]
    2cf8:	02f6      	lsls	r6, r6, #11
    2cfa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2cfc:	4b11      	ldr	r3, [pc, #68]	; (2d44 <system_gclk_gen_get_hz+0x80>)
    2cfe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d00:	4a0c      	ldr	r2, [pc, #48]	; (2d34 <system_gclk_gen_get_hz+0x70>)
    2d02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d04:	b25b      	sxtb	r3, r3
    2d06:	2b00      	cmp	r3, #0
    2d08:	dbfb      	blt.n	2d02 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2d0a:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <system_gclk_gen_get_hz+0x70>)
    2d0c:	689c      	ldr	r4, [r3, #8]
    2d0e:	0224      	lsls	r4, r4, #8
    2d10:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2d12:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <system_gclk_gen_get_hz+0x84>)
    2d14:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2d16:	2e00      	cmp	r6, #0
    2d18:	d107      	bne.n	2d2a <system_gclk_gen_get_hz+0x66>
    2d1a:	2c01      	cmp	r4, #1
    2d1c:	d907      	bls.n	2d2e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2d1e:	0021      	movs	r1, r4
    2d20:	0028      	movs	r0, r5
    2d22:	4b0a      	ldr	r3, [pc, #40]	; (2d4c <system_gclk_gen_get_hz+0x88>)
    2d24:	4798      	blx	r3
    2d26:	0005      	movs	r5, r0
    2d28:	e001      	b.n	2d2e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2d2a:	3401      	adds	r4, #1
    2d2c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2d2e:	0028      	movs	r0, r5
    2d30:	bd70      	pop	{r4, r5, r6, pc}
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	40000c00 	.word	0x40000c00
    2d38:	00002929 	.word	0x00002929
    2d3c:	40000c04 	.word	0x40000c04
    2d40:	00002999 	.word	0x00002999
    2d44:	40000c08 	.word	0x40000c08
    2d48:	00002969 	.word	0x00002969
    2d4c:	000030d5 	.word	0x000030d5

00002d50 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2d50:	b510      	push	{r4, lr}
    2d52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d54:	4b06      	ldr	r3, [pc, #24]	; (2d70 <system_gclk_chan_enable+0x20>)
    2d56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d58:	4b06      	ldr	r3, [pc, #24]	; (2d74 <system_gclk_chan_enable+0x24>)
    2d5a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2d5c:	4a06      	ldr	r2, [pc, #24]	; (2d78 <system_gclk_chan_enable+0x28>)
    2d5e:	8853      	ldrh	r3, [r2, #2]
    2d60:	2180      	movs	r1, #128	; 0x80
    2d62:	01c9      	lsls	r1, r1, #7
    2d64:	430b      	orrs	r3, r1
    2d66:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2d68:	4b04      	ldr	r3, [pc, #16]	; (2d7c <system_gclk_chan_enable+0x2c>)
    2d6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d6c:	bd10      	pop	{r4, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002929 	.word	0x00002929
    2d74:	40000c02 	.word	0x40000c02
    2d78:	40000c00 	.word	0x40000c00
    2d7c:	00002969 	.word	0x00002969

00002d80 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2d80:	b510      	push	{r4, lr}
    2d82:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d84:	4b0f      	ldr	r3, [pc, #60]	; (2dc4 <system_gclk_chan_disable+0x44>)
    2d86:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d88:	4b0f      	ldr	r3, [pc, #60]	; (2dc8 <system_gclk_chan_disable+0x48>)
    2d8a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2d8c:	4a0f      	ldr	r2, [pc, #60]	; (2dcc <system_gclk_chan_disable+0x4c>)
    2d8e:	8853      	ldrh	r3, [r2, #2]
    2d90:	051b      	lsls	r3, r3, #20
    2d92:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2d94:	8853      	ldrh	r3, [r2, #2]
    2d96:	490e      	ldr	r1, [pc, #56]	; (2dd0 <system_gclk_chan_disable+0x50>)
    2d98:	400b      	ands	r3, r1
    2d9a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2d9c:	8853      	ldrh	r3, [r2, #2]
    2d9e:	490d      	ldr	r1, [pc, #52]	; (2dd4 <system_gclk_chan_disable+0x54>)
    2da0:	400b      	ands	r3, r1
    2da2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2da4:	0011      	movs	r1, r2
    2da6:	2280      	movs	r2, #128	; 0x80
    2da8:	01d2      	lsls	r2, r2, #7
    2daa:	884b      	ldrh	r3, [r1, #2]
    2dac:	4213      	tst	r3, r2
    2dae:	d1fc      	bne.n	2daa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2db0:	4906      	ldr	r1, [pc, #24]	; (2dcc <system_gclk_chan_disable+0x4c>)
    2db2:	884a      	ldrh	r2, [r1, #2]
    2db4:	0203      	lsls	r3, r0, #8
    2db6:	4806      	ldr	r0, [pc, #24]	; (2dd0 <system_gclk_chan_disable+0x50>)
    2db8:	4002      	ands	r2, r0
    2dba:	4313      	orrs	r3, r2
    2dbc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2dbe:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <system_gclk_chan_disable+0x58>)
    2dc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	00002929 	.word	0x00002929
    2dc8:	40000c02 	.word	0x40000c02
    2dcc:	40000c00 	.word	0x40000c00
    2dd0:	fffff0ff 	.word	0xfffff0ff
    2dd4:	ffffbfff 	.word	0xffffbfff
    2dd8:	00002969 	.word	0x00002969

00002ddc <system_gclk_chan_set_config>:
{
    2ddc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2dde:	780c      	ldrb	r4, [r1, #0]
    2de0:	0224      	lsls	r4, r4, #8
    2de2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2de4:	4b02      	ldr	r3, [pc, #8]	; (2df0 <system_gclk_chan_set_config+0x14>)
    2de6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2de8:	b2a4      	uxth	r4, r4
    2dea:	4b02      	ldr	r3, [pc, #8]	; (2df4 <system_gclk_chan_set_config+0x18>)
    2dec:	805c      	strh	r4, [r3, #2]
}
    2dee:	bd10      	pop	{r4, pc}
    2df0:	00002d81 	.word	0x00002d81
    2df4:	40000c00 	.word	0x40000c00

00002df8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2df8:	b510      	push	{r4, lr}
    2dfa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2dfc:	4b06      	ldr	r3, [pc, #24]	; (2e18 <system_gclk_chan_get_hz+0x20>)
    2dfe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e00:	4b06      	ldr	r3, [pc, #24]	; (2e1c <system_gclk_chan_get_hz+0x24>)
    2e02:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2e04:	4b06      	ldr	r3, [pc, #24]	; (2e20 <system_gclk_chan_get_hz+0x28>)
    2e06:	885c      	ldrh	r4, [r3, #2]
    2e08:	0524      	lsls	r4, r4, #20
    2e0a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2e0c:	4b05      	ldr	r3, [pc, #20]	; (2e24 <system_gclk_chan_get_hz+0x2c>)
    2e0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2e10:	0020      	movs	r0, r4
    2e12:	4b05      	ldr	r3, [pc, #20]	; (2e28 <system_gclk_chan_get_hz+0x30>)
    2e14:	4798      	blx	r3
}
    2e16:	bd10      	pop	{r4, pc}
    2e18:	00002929 	.word	0x00002929
    2e1c:	40000c02 	.word	0x40000c02
    2e20:	40000c00 	.word	0x40000c00
    2e24:	00002969 	.word	0x00002969
    2e28:	00002cc5 	.word	0x00002cc5

00002e2c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2e2c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2e2e:	78d3      	ldrb	r3, [r2, #3]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d135      	bne.n	2ea0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2e34:	7813      	ldrb	r3, [r2, #0]
    2e36:	2b80      	cmp	r3, #128	; 0x80
    2e38:	d029      	beq.n	2e8e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2e3a:	061b      	lsls	r3, r3, #24
    2e3c:	2480      	movs	r4, #128	; 0x80
    2e3e:	0264      	lsls	r4, r4, #9
    2e40:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2e42:	7854      	ldrb	r4, [r2, #1]
    2e44:	2502      	movs	r5, #2
    2e46:	43ac      	bics	r4, r5
    2e48:	d106      	bne.n	2e58 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2e4a:	7894      	ldrb	r4, [r2, #2]
    2e4c:	2c00      	cmp	r4, #0
    2e4e:	d120      	bne.n	2e92 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2e50:	2480      	movs	r4, #128	; 0x80
    2e52:	02a4      	lsls	r4, r4, #10
    2e54:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2e56:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2e58:	7854      	ldrb	r4, [r2, #1]
    2e5a:	3c01      	subs	r4, #1
    2e5c:	2c01      	cmp	r4, #1
    2e5e:	d91c      	bls.n	2e9a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2e60:	040d      	lsls	r5, r1, #16
    2e62:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2e64:	24a0      	movs	r4, #160	; 0xa0
    2e66:	05e4      	lsls	r4, r4, #23
    2e68:	432c      	orrs	r4, r5
    2e6a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e6c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2e6e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2e70:	24d0      	movs	r4, #208	; 0xd0
    2e72:	0624      	lsls	r4, r4, #24
    2e74:	432c      	orrs	r4, r5
    2e76:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e78:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2e7a:	78d4      	ldrb	r4, [r2, #3]
    2e7c:	2c00      	cmp	r4, #0
    2e7e:	d122      	bne.n	2ec6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2e80:	035b      	lsls	r3, r3, #13
    2e82:	d51c      	bpl.n	2ebe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2e84:	7893      	ldrb	r3, [r2, #2]
    2e86:	2b01      	cmp	r3, #1
    2e88:	d01e      	beq.n	2ec8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2e8a:	6141      	str	r1, [r0, #20]
    2e8c:	e017      	b.n	2ebe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2e8e:	2300      	movs	r3, #0
    2e90:	e7d7      	b.n	2e42 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2e92:	24c0      	movs	r4, #192	; 0xc0
    2e94:	02e4      	lsls	r4, r4, #11
    2e96:	4323      	orrs	r3, r4
    2e98:	e7dd      	b.n	2e56 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2e9a:	4c0d      	ldr	r4, [pc, #52]	; (2ed0 <_system_pinmux_config+0xa4>)
    2e9c:	4023      	ands	r3, r4
    2e9e:	e7df      	b.n	2e60 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2ea0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ea2:	040c      	lsls	r4, r1, #16
    2ea4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ea6:	23a0      	movs	r3, #160	; 0xa0
    2ea8:	05db      	lsls	r3, r3, #23
    2eaa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2eac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2eae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2eb0:	23d0      	movs	r3, #208	; 0xd0
    2eb2:	061b      	lsls	r3, r3, #24
    2eb4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2eb6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2eb8:	78d3      	ldrb	r3, [r2, #3]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d103      	bne.n	2ec6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ebe:	7853      	ldrb	r3, [r2, #1]
    2ec0:	3b01      	subs	r3, #1
    2ec2:	2b01      	cmp	r3, #1
    2ec4:	d902      	bls.n	2ecc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2ec6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2ec8:	6181      	str	r1, [r0, #24]
    2eca:	e7f8      	b.n	2ebe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2ecc:	6081      	str	r1, [r0, #8]
}
    2ece:	e7fa      	b.n	2ec6 <_system_pinmux_config+0x9a>
    2ed0:	fffbffff 	.word	0xfffbffff

00002ed4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2ed4:	b510      	push	{r4, lr}
    2ed6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2ed8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2eda:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2edc:	2900      	cmp	r1, #0
    2ede:	d104      	bne.n	2eea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2ee0:	0943      	lsrs	r3, r0, #5
    2ee2:	01db      	lsls	r3, r3, #7
    2ee4:	4905      	ldr	r1, [pc, #20]	; (2efc <system_pinmux_pin_set_config+0x28>)
    2ee6:	468c      	mov	ip, r1
    2ee8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2eea:	241f      	movs	r4, #31
    2eec:	4020      	ands	r0, r4
    2eee:	2101      	movs	r1, #1
    2ef0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2ef2:	0018      	movs	r0, r3
    2ef4:	4b02      	ldr	r3, [pc, #8]	; (2f00 <system_pinmux_pin_set_config+0x2c>)
    2ef6:	4798      	blx	r3
}
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	41004400 	.word	0x41004400
    2f00:	00002e2d 	.word	0x00002e2d

00002f04 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    2f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f06:	46c6      	mov	lr, r8
    2f08:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    2f0a:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    2f0c:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    2f0e:	2440      	movs	r4, #64	; 0x40
    2f10:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    2f12:	46a4      	mov	ip, r4
    2f14:	e009      	b.n	2f2a <system_pinmux_group_set_output_strength+0x26>
    2f16:	18c5      	adds	r5, r0, r3
    2f18:	3540      	adds	r5, #64	; 0x40
    2f1a:	782c      	ldrb	r4, [r5, #0]
    2f1c:	4667      	mov	r7, ip
    2f1e:	433c      	orrs	r4, r7
    2f20:	b2e4      	uxtb	r4, r4
    2f22:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    2f24:	3301      	adds	r3, #1
    2f26:	2b20      	cmp	r3, #32
    2f28:	d00c      	beq.n	2f44 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    2f2a:	000c      	movs	r4, r1
    2f2c:	40dc      	lsrs	r4, r3
    2f2e:	4226      	tst	r6, r4
    2f30:	d0f8      	beq.n	2f24 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    2f32:	2a01      	cmp	r2, #1
    2f34:	d0ef      	beq.n	2f16 <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    2f36:	18c4      	adds	r4, r0, r3
    2f38:	3440      	adds	r4, #64	; 0x40
    2f3a:	7825      	ldrb	r5, [r4, #0]
    2f3c:	4647      	mov	r7, r8
    2f3e:	43bd      	bics	r5, r7
    2f40:	7025      	strb	r5, [r4, #0]
    2f42:	e7ef      	b.n	2f24 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    2f44:	bc04      	pop	{r2}
    2f46:	4690      	mov	r8, r2
    2f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f4a <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2f4a:	4770      	bx	lr

00002f4c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2f4c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2f4e:	4b05      	ldr	r3, [pc, #20]	; (2f64 <system_init+0x18>)
    2f50:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2f52:	4b05      	ldr	r3, [pc, #20]	; (2f68 <system_init+0x1c>)
    2f54:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <system_init+0x20>)
    2f58:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2f5a:	4b05      	ldr	r3, [pc, #20]	; (2f70 <system_init+0x24>)
    2f5c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2f5e:	4b05      	ldr	r3, [pc, #20]	; (2f74 <system_init+0x28>)
    2f60:	4798      	blx	r3
}
    2f62:	bd10      	pop	{r4, pc}
    2f64:	00002b0d 	.word	0x00002b0d
    2f68:	00002925 	.word	0x00002925
    2f6c:	00002f4b 	.word	0x00002f4b
    2f70:	00000dd1 	.word	0x00000dd1
    2f74:	00002f4b 	.word	0x00002f4b

00002f78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2f78:	e7fe      	b.n	2f78 <Dummy_Handler>
	...

00002f7c <Reset_Handler>:
void Reset_Handler(void){
    2f7c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2f7e:	4a26      	ldr	r2, [pc, #152]	; (3018 <Reset_Handler+0x9c>)
    2f80:	4b26      	ldr	r3, [pc, #152]	; (301c <Reset_Handler+0xa0>)
    2f82:	429a      	cmp	r2, r3
    2f84:	d011      	beq.n	2faa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2f86:	001a      	movs	r2, r3
    2f88:	4b25      	ldr	r3, [pc, #148]	; (3020 <Reset_Handler+0xa4>)
    2f8a:	429a      	cmp	r2, r3
    2f8c:	d20d      	bcs.n	2faa <Reset_Handler+0x2e>
    2f8e:	4a25      	ldr	r2, [pc, #148]	; (3024 <Reset_Handler+0xa8>)
    2f90:	3303      	adds	r3, #3
    2f92:	1a9b      	subs	r3, r3, r2
    2f94:	089b      	lsrs	r3, r3, #2
    2f96:	3301      	adds	r3, #1
    2f98:	009b      	lsls	r3, r3, #2
    2f9a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2f9c:	481f      	ldr	r0, [pc, #124]	; (301c <Reset_Handler+0xa0>)
    2f9e:	491e      	ldr	r1, [pc, #120]	; (3018 <Reset_Handler+0x9c>)
    2fa0:	588c      	ldr	r4, [r1, r2]
    2fa2:	5084      	str	r4, [r0, r2]
    2fa4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2fa6:	429a      	cmp	r2, r3
    2fa8:	d1fa      	bne.n	2fa0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2faa:	4a1f      	ldr	r2, [pc, #124]	; (3028 <Reset_Handler+0xac>)
    2fac:	4b1f      	ldr	r3, [pc, #124]	; (302c <Reset_Handler+0xb0>)
    2fae:	429a      	cmp	r2, r3
    2fb0:	d20a      	bcs.n	2fc8 <Reset_Handler+0x4c>
    2fb2:	43d3      	mvns	r3, r2
    2fb4:	491d      	ldr	r1, [pc, #116]	; (302c <Reset_Handler+0xb0>)
    2fb6:	185b      	adds	r3, r3, r1
    2fb8:	2103      	movs	r1, #3
    2fba:	438b      	bics	r3, r1
    2fbc:	3304      	adds	r3, #4
    2fbe:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2fc0:	2100      	movs	r1, #0
    2fc2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2fc4:	4293      	cmp	r3, r2
    2fc6:	d1fc      	bne.n	2fc2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2fc8:	4a19      	ldr	r2, [pc, #100]	; (3030 <Reset_Handler+0xb4>)
    2fca:	21ff      	movs	r1, #255	; 0xff
    2fcc:	4b19      	ldr	r3, [pc, #100]	; (3034 <Reset_Handler+0xb8>)
    2fce:	438b      	bics	r3, r1
    2fd0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2fd2:	39fd      	subs	r1, #253	; 0xfd
    2fd4:	2390      	movs	r3, #144	; 0x90
    2fd6:	005b      	lsls	r3, r3, #1
    2fd8:	4a17      	ldr	r2, [pc, #92]	; (3038 <Reset_Handler+0xbc>)
    2fda:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2fdc:	4b17      	ldr	r3, [pc, #92]	; (303c <Reset_Handler+0xc0>)
    2fde:	7b9a      	ldrb	r2, [r3, #14]
    2fe0:	312e      	adds	r1, #46	; 0x2e
    2fe2:	438a      	bics	r2, r1
    2fe4:	2120      	movs	r1, #32
    2fe6:	430a      	orrs	r2, r1
    2fe8:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2fea:	7b9a      	ldrb	r2, [r3, #14]
    2fec:	210c      	movs	r1, #12
    2fee:	438a      	bics	r2, r1
    2ff0:	2108      	movs	r1, #8
    2ff2:	430a      	orrs	r2, r1
    2ff4:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2ff6:	7b9a      	ldrb	r2, [r3, #14]
    2ff8:	2103      	movs	r1, #3
    2ffa:	438a      	bics	r2, r1
    2ffc:	2102      	movs	r1, #2
    2ffe:	430a      	orrs	r2, r1
    3000:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3002:	4a0f      	ldr	r2, [pc, #60]	; (3040 <Reset_Handler+0xc4>)
    3004:	6853      	ldr	r3, [r2, #4]
    3006:	2180      	movs	r1, #128	; 0x80
    3008:	430b      	orrs	r3, r1
    300a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    300c:	4b0d      	ldr	r3, [pc, #52]	; (3044 <Reset_Handler+0xc8>)
    300e:	4798      	blx	r3
        main();
    3010:	4b0d      	ldr	r3, [pc, #52]	; (3048 <Reset_Handler+0xcc>)
    3012:	4798      	blx	r3
    3014:	e7fe      	b.n	3014 <Reset_Handler+0x98>
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00003728 	.word	0x00003728
    301c:	20000000 	.word	0x20000000
    3020:	20000074 	.word	0x20000074
    3024:	20000004 	.word	0x20000004
    3028:	20000074 	.word	0x20000074
    302c:	200003c0 	.word	0x200003c0
    3030:	e000ed00 	.word	0xe000ed00
    3034:	00000000 	.word	0x00000000
    3038:	41007000 	.word	0x41007000
    303c:	41004800 	.word	0x41004800
    3040:	41004000 	.word	0x41004000
    3044:	000033c1 	.word	0x000033c1
    3048:	00003071 	.word	0x00003071

0000304c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    304c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    304e:	4a06      	ldr	r2, [pc, #24]	; (3068 <_sbrk+0x1c>)
    3050:	6812      	ldr	r2, [r2, #0]
    3052:	2a00      	cmp	r2, #0
    3054:	d004      	beq.n	3060 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3056:	4a04      	ldr	r2, [pc, #16]	; (3068 <_sbrk+0x1c>)
    3058:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    305a:	18c3      	adds	r3, r0, r3
    305c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    305e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3060:	4902      	ldr	r1, [pc, #8]	; (306c <_sbrk+0x20>)
    3062:	4a01      	ldr	r2, [pc, #4]	; (3068 <_sbrk+0x1c>)
    3064:	6011      	str	r1, [r2, #0]
    3066:	e7f6      	b.n	3056 <_sbrk+0xa>
    3068:	200000d8 	.word	0x200000d8
    306c:	200007c0 	.word	0x200007c0

00003070 <main>:
{
	read_all_sensors();
}

int main (void)
{
    3070:	b570      	push	{r4, r5, r6, lr}
	system_init();
    3072:	4b0c      	ldr	r3, [pc, #48]	; (30a4 <main+0x34>)
    3074:	4798      	blx	r3
	//cpu_irq_enable();
	delay_init();
    3076:	4b0c      	ldr	r3, [pc, #48]	; (30a8 <main+0x38>)
    3078:	4798      	blx	r3
	//spi_slave_init();
	//delay_cycles_ms(2000);
	LED_init();
    307a:	4b0c      	ldr	r3, [pc, #48]	; (30ac <main+0x3c>)
    307c:	4798      	blx	r3
	ORB_init();
    307e:	4b0c      	ldr	r3, [pc, #48]	; (30b0 <main+0x40>)
    3080:	4798      	blx	r3
	sensor_init();
    3082:	4b0c      	ldr	r3, [pc, #48]	; (30b4 <main+0x44>)
    3084:	4798      	blx	r3
	super_servo_init();
    3086:	4b0c      	ldr	r3, [pc, #48]	; (30b8 <main+0x48>)
    3088:	4798      	blx	r3
	//serial_init();
	enable_super_servo();
    308a:	4b0c      	ldr	r3, [pc, #48]	; (30bc <main+0x4c>)
    308c:	4798      	blx	r3
	enable_ORB();
    308e:	4b0c      	ldr	r3, [pc, #48]	; (30c0 <main+0x50>)
    3090:	4798      	blx	r3
	enable_LED();
    3092:	4b0c      	ldr	r3, [pc, #48]	; (30c4 <main+0x54>)
    3094:	4798      	blx	r3
	//enable_USART();
	//update_LEDS_single(0x31,0);
	//delay_cycles_ms(2000);
	spi_slave_init();
    3096:	4b0c      	ldr	r3, [pc, #48]	; (30c8 <main+0x58>)
    3098:	4798      	blx	r3
	read_all_sensors();
    309a:	4d0c      	ldr	r5, [pc, #48]	; (30cc <main+0x5c>)
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		
		sensor_check();
		spi_main_loop();
    309c:	4c0c      	ldr	r4, [pc, #48]	; (30d0 <main+0x60>)
	read_all_sensors();
    309e:	47a8      	blx	r5
		spi_main_loop();
    30a0:	47a0      	blx	r4
    30a2:	e7fc      	b.n	309e <main+0x2e>
    30a4:	00002f4d 	.word	0x00002f4d
    30a8:	00000849 	.word	0x00000849
    30ac:	00002401 	.word	0x00002401
    30b0:	00002901 	.word	0x00002901
    30b4:	000012bd 	.word	0x000012bd
    30b8:	00001379 	.word	0x00001379
    30bc:	000012c9 	.word	0x000012c9
    30c0:	0000282d 	.word	0x0000282d
    30c4:	000021ad 	.word	0x000021ad
    30c8:	000007e1 	.word	0x000007e1
    30cc:	00001149 	.word	0x00001149
    30d0:	00000599 	.word	0x00000599

000030d4 <__udivsi3>:
    30d4:	2200      	movs	r2, #0
    30d6:	0843      	lsrs	r3, r0, #1
    30d8:	428b      	cmp	r3, r1
    30da:	d374      	bcc.n	31c6 <__udivsi3+0xf2>
    30dc:	0903      	lsrs	r3, r0, #4
    30de:	428b      	cmp	r3, r1
    30e0:	d35f      	bcc.n	31a2 <__udivsi3+0xce>
    30e2:	0a03      	lsrs	r3, r0, #8
    30e4:	428b      	cmp	r3, r1
    30e6:	d344      	bcc.n	3172 <__udivsi3+0x9e>
    30e8:	0b03      	lsrs	r3, r0, #12
    30ea:	428b      	cmp	r3, r1
    30ec:	d328      	bcc.n	3140 <__udivsi3+0x6c>
    30ee:	0c03      	lsrs	r3, r0, #16
    30f0:	428b      	cmp	r3, r1
    30f2:	d30d      	bcc.n	3110 <__udivsi3+0x3c>
    30f4:	22ff      	movs	r2, #255	; 0xff
    30f6:	0209      	lsls	r1, r1, #8
    30f8:	ba12      	rev	r2, r2
    30fa:	0c03      	lsrs	r3, r0, #16
    30fc:	428b      	cmp	r3, r1
    30fe:	d302      	bcc.n	3106 <__udivsi3+0x32>
    3100:	1212      	asrs	r2, r2, #8
    3102:	0209      	lsls	r1, r1, #8
    3104:	d065      	beq.n	31d2 <__udivsi3+0xfe>
    3106:	0b03      	lsrs	r3, r0, #12
    3108:	428b      	cmp	r3, r1
    310a:	d319      	bcc.n	3140 <__udivsi3+0x6c>
    310c:	e000      	b.n	3110 <__udivsi3+0x3c>
    310e:	0a09      	lsrs	r1, r1, #8
    3110:	0bc3      	lsrs	r3, r0, #15
    3112:	428b      	cmp	r3, r1
    3114:	d301      	bcc.n	311a <__udivsi3+0x46>
    3116:	03cb      	lsls	r3, r1, #15
    3118:	1ac0      	subs	r0, r0, r3
    311a:	4152      	adcs	r2, r2
    311c:	0b83      	lsrs	r3, r0, #14
    311e:	428b      	cmp	r3, r1
    3120:	d301      	bcc.n	3126 <__udivsi3+0x52>
    3122:	038b      	lsls	r3, r1, #14
    3124:	1ac0      	subs	r0, r0, r3
    3126:	4152      	adcs	r2, r2
    3128:	0b43      	lsrs	r3, r0, #13
    312a:	428b      	cmp	r3, r1
    312c:	d301      	bcc.n	3132 <__udivsi3+0x5e>
    312e:	034b      	lsls	r3, r1, #13
    3130:	1ac0      	subs	r0, r0, r3
    3132:	4152      	adcs	r2, r2
    3134:	0b03      	lsrs	r3, r0, #12
    3136:	428b      	cmp	r3, r1
    3138:	d301      	bcc.n	313e <__udivsi3+0x6a>
    313a:	030b      	lsls	r3, r1, #12
    313c:	1ac0      	subs	r0, r0, r3
    313e:	4152      	adcs	r2, r2
    3140:	0ac3      	lsrs	r3, r0, #11
    3142:	428b      	cmp	r3, r1
    3144:	d301      	bcc.n	314a <__udivsi3+0x76>
    3146:	02cb      	lsls	r3, r1, #11
    3148:	1ac0      	subs	r0, r0, r3
    314a:	4152      	adcs	r2, r2
    314c:	0a83      	lsrs	r3, r0, #10
    314e:	428b      	cmp	r3, r1
    3150:	d301      	bcc.n	3156 <__udivsi3+0x82>
    3152:	028b      	lsls	r3, r1, #10
    3154:	1ac0      	subs	r0, r0, r3
    3156:	4152      	adcs	r2, r2
    3158:	0a43      	lsrs	r3, r0, #9
    315a:	428b      	cmp	r3, r1
    315c:	d301      	bcc.n	3162 <__udivsi3+0x8e>
    315e:	024b      	lsls	r3, r1, #9
    3160:	1ac0      	subs	r0, r0, r3
    3162:	4152      	adcs	r2, r2
    3164:	0a03      	lsrs	r3, r0, #8
    3166:	428b      	cmp	r3, r1
    3168:	d301      	bcc.n	316e <__udivsi3+0x9a>
    316a:	020b      	lsls	r3, r1, #8
    316c:	1ac0      	subs	r0, r0, r3
    316e:	4152      	adcs	r2, r2
    3170:	d2cd      	bcs.n	310e <__udivsi3+0x3a>
    3172:	09c3      	lsrs	r3, r0, #7
    3174:	428b      	cmp	r3, r1
    3176:	d301      	bcc.n	317c <__udivsi3+0xa8>
    3178:	01cb      	lsls	r3, r1, #7
    317a:	1ac0      	subs	r0, r0, r3
    317c:	4152      	adcs	r2, r2
    317e:	0983      	lsrs	r3, r0, #6
    3180:	428b      	cmp	r3, r1
    3182:	d301      	bcc.n	3188 <__udivsi3+0xb4>
    3184:	018b      	lsls	r3, r1, #6
    3186:	1ac0      	subs	r0, r0, r3
    3188:	4152      	adcs	r2, r2
    318a:	0943      	lsrs	r3, r0, #5
    318c:	428b      	cmp	r3, r1
    318e:	d301      	bcc.n	3194 <__udivsi3+0xc0>
    3190:	014b      	lsls	r3, r1, #5
    3192:	1ac0      	subs	r0, r0, r3
    3194:	4152      	adcs	r2, r2
    3196:	0903      	lsrs	r3, r0, #4
    3198:	428b      	cmp	r3, r1
    319a:	d301      	bcc.n	31a0 <__udivsi3+0xcc>
    319c:	010b      	lsls	r3, r1, #4
    319e:	1ac0      	subs	r0, r0, r3
    31a0:	4152      	adcs	r2, r2
    31a2:	08c3      	lsrs	r3, r0, #3
    31a4:	428b      	cmp	r3, r1
    31a6:	d301      	bcc.n	31ac <__udivsi3+0xd8>
    31a8:	00cb      	lsls	r3, r1, #3
    31aa:	1ac0      	subs	r0, r0, r3
    31ac:	4152      	adcs	r2, r2
    31ae:	0883      	lsrs	r3, r0, #2
    31b0:	428b      	cmp	r3, r1
    31b2:	d301      	bcc.n	31b8 <__udivsi3+0xe4>
    31b4:	008b      	lsls	r3, r1, #2
    31b6:	1ac0      	subs	r0, r0, r3
    31b8:	4152      	adcs	r2, r2
    31ba:	0843      	lsrs	r3, r0, #1
    31bc:	428b      	cmp	r3, r1
    31be:	d301      	bcc.n	31c4 <__udivsi3+0xf0>
    31c0:	004b      	lsls	r3, r1, #1
    31c2:	1ac0      	subs	r0, r0, r3
    31c4:	4152      	adcs	r2, r2
    31c6:	1a41      	subs	r1, r0, r1
    31c8:	d200      	bcs.n	31cc <__udivsi3+0xf8>
    31ca:	4601      	mov	r1, r0
    31cc:	4152      	adcs	r2, r2
    31ce:	4610      	mov	r0, r2
    31d0:	4770      	bx	lr
    31d2:	e7ff      	b.n	31d4 <__udivsi3+0x100>
    31d4:	b501      	push	{r0, lr}
    31d6:	2000      	movs	r0, #0
    31d8:	f000 f8f0 	bl	33bc <__aeabi_idiv0>
    31dc:	bd02      	pop	{r1, pc}
    31de:	46c0      	nop			; (mov r8, r8)

000031e0 <__aeabi_uidivmod>:
    31e0:	2900      	cmp	r1, #0
    31e2:	d0f7      	beq.n	31d4 <__udivsi3+0x100>
    31e4:	e776      	b.n	30d4 <__udivsi3>
    31e6:	4770      	bx	lr

000031e8 <__divsi3>:
    31e8:	4603      	mov	r3, r0
    31ea:	430b      	orrs	r3, r1
    31ec:	d47f      	bmi.n	32ee <__divsi3+0x106>
    31ee:	2200      	movs	r2, #0
    31f0:	0843      	lsrs	r3, r0, #1
    31f2:	428b      	cmp	r3, r1
    31f4:	d374      	bcc.n	32e0 <__divsi3+0xf8>
    31f6:	0903      	lsrs	r3, r0, #4
    31f8:	428b      	cmp	r3, r1
    31fa:	d35f      	bcc.n	32bc <__divsi3+0xd4>
    31fc:	0a03      	lsrs	r3, r0, #8
    31fe:	428b      	cmp	r3, r1
    3200:	d344      	bcc.n	328c <__divsi3+0xa4>
    3202:	0b03      	lsrs	r3, r0, #12
    3204:	428b      	cmp	r3, r1
    3206:	d328      	bcc.n	325a <__divsi3+0x72>
    3208:	0c03      	lsrs	r3, r0, #16
    320a:	428b      	cmp	r3, r1
    320c:	d30d      	bcc.n	322a <__divsi3+0x42>
    320e:	22ff      	movs	r2, #255	; 0xff
    3210:	0209      	lsls	r1, r1, #8
    3212:	ba12      	rev	r2, r2
    3214:	0c03      	lsrs	r3, r0, #16
    3216:	428b      	cmp	r3, r1
    3218:	d302      	bcc.n	3220 <__divsi3+0x38>
    321a:	1212      	asrs	r2, r2, #8
    321c:	0209      	lsls	r1, r1, #8
    321e:	d065      	beq.n	32ec <__divsi3+0x104>
    3220:	0b03      	lsrs	r3, r0, #12
    3222:	428b      	cmp	r3, r1
    3224:	d319      	bcc.n	325a <__divsi3+0x72>
    3226:	e000      	b.n	322a <__divsi3+0x42>
    3228:	0a09      	lsrs	r1, r1, #8
    322a:	0bc3      	lsrs	r3, r0, #15
    322c:	428b      	cmp	r3, r1
    322e:	d301      	bcc.n	3234 <__divsi3+0x4c>
    3230:	03cb      	lsls	r3, r1, #15
    3232:	1ac0      	subs	r0, r0, r3
    3234:	4152      	adcs	r2, r2
    3236:	0b83      	lsrs	r3, r0, #14
    3238:	428b      	cmp	r3, r1
    323a:	d301      	bcc.n	3240 <__divsi3+0x58>
    323c:	038b      	lsls	r3, r1, #14
    323e:	1ac0      	subs	r0, r0, r3
    3240:	4152      	adcs	r2, r2
    3242:	0b43      	lsrs	r3, r0, #13
    3244:	428b      	cmp	r3, r1
    3246:	d301      	bcc.n	324c <__divsi3+0x64>
    3248:	034b      	lsls	r3, r1, #13
    324a:	1ac0      	subs	r0, r0, r3
    324c:	4152      	adcs	r2, r2
    324e:	0b03      	lsrs	r3, r0, #12
    3250:	428b      	cmp	r3, r1
    3252:	d301      	bcc.n	3258 <__divsi3+0x70>
    3254:	030b      	lsls	r3, r1, #12
    3256:	1ac0      	subs	r0, r0, r3
    3258:	4152      	adcs	r2, r2
    325a:	0ac3      	lsrs	r3, r0, #11
    325c:	428b      	cmp	r3, r1
    325e:	d301      	bcc.n	3264 <__divsi3+0x7c>
    3260:	02cb      	lsls	r3, r1, #11
    3262:	1ac0      	subs	r0, r0, r3
    3264:	4152      	adcs	r2, r2
    3266:	0a83      	lsrs	r3, r0, #10
    3268:	428b      	cmp	r3, r1
    326a:	d301      	bcc.n	3270 <__divsi3+0x88>
    326c:	028b      	lsls	r3, r1, #10
    326e:	1ac0      	subs	r0, r0, r3
    3270:	4152      	adcs	r2, r2
    3272:	0a43      	lsrs	r3, r0, #9
    3274:	428b      	cmp	r3, r1
    3276:	d301      	bcc.n	327c <__divsi3+0x94>
    3278:	024b      	lsls	r3, r1, #9
    327a:	1ac0      	subs	r0, r0, r3
    327c:	4152      	adcs	r2, r2
    327e:	0a03      	lsrs	r3, r0, #8
    3280:	428b      	cmp	r3, r1
    3282:	d301      	bcc.n	3288 <__divsi3+0xa0>
    3284:	020b      	lsls	r3, r1, #8
    3286:	1ac0      	subs	r0, r0, r3
    3288:	4152      	adcs	r2, r2
    328a:	d2cd      	bcs.n	3228 <__divsi3+0x40>
    328c:	09c3      	lsrs	r3, r0, #7
    328e:	428b      	cmp	r3, r1
    3290:	d301      	bcc.n	3296 <__divsi3+0xae>
    3292:	01cb      	lsls	r3, r1, #7
    3294:	1ac0      	subs	r0, r0, r3
    3296:	4152      	adcs	r2, r2
    3298:	0983      	lsrs	r3, r0, #6
    329a:	428b      	cmp	r3, r1
    329c:	d301      	bcc.n	32a2 <__divsi3+0xba>
    329e:	018b      	lsls	r3, r1, #6
    32a0:	1ac0      	subs	r0, r0, r3
    32a2:	4152      	adcs	r2, r2
    32a4:	0943      	lsrs	r3, r0, #5
    32a6:	428b      	cmp	r3, r1
    32a8:	d301      	bcc.n	32ae <__divsi3+0xc6>
    32aa:	014b      	lsls	r3, r1, #5
    32ac:	1ac0      	subs	r0, r0, r3
    32ae:	4152      	adcs	r2, r2
    32b0:	0903      	lsrs	r3, r0, #4
    32b2:	428b      	cmp	r3, r1
    32b4:	d301      	bcc.n	32ba <__divsi3+0xd2>
    32b6:	010b      	lsls	r3, r1, #4
    32b8:	1ac0      	subs	r0, r0, r3
    32ba:	4152      	adcs	r2, r2
    32bc:	08c3      	lsrs	r3, r0, #3
    32be:	428b      	cmp	r3, r1
    32c0:	d301      	bcc.n	32c6 <__divsi3+0xde>
    32c2:	00cb      	lsls	r3, r1, #3
    32c4:	1ac0      	subs	r0, r0, r3
    32c6:	4152      	adcs	r2, r2
    32c8:	0883      	lsrs	r3, r0, #2
    32ca:	428b      	cmp	r3, r1
    32cc:	d301      	bcc.n	32d2 <__divsi3+0xea>
    32ce:	008b      	lsls	r3, r1, #2
    32d0:	1ac0      	subs	r0, r0, r3
    32d2:	4152      	adcs	r2, r2
    32d4:	0843      	lsrs	r3, r0, #1
    32d6:	428b      	cmp	r3, r1
    32d8:	d301      	bcc.n	32de <__divsi3+0xf6>
    32da:	004b      	lsls	r3, r1, #1
    32dc:	1ac0      	subs	r0, r0, r3
    32de:	4152      	adcs	r2, r2
    32e0:	1a41      	subs	r1, r0, r1
    32e2:	d200      	bcs.n	32e6 <__divsi3+0xfe>
    32e4:	4601      	mov	r1, r0
    32e6:	4152      	adcs	r2, r2
    32e8:	4610      	mov	r0, r2
    32ea:	4770      	bx	lr
    32ec:	e05d      	b.n	33aa <__divsi3+0x1c2>
    32ee:	0fca      	lsrs	r2, r1, #31
    32f0:	d000      	beq.n	32f4 <__divsi3+0x10c>
    32f2:	4249      	negs	r1, r1
    32f4:	1003      	asrs	r3, r0, #32
    32f6:	d300      	bcc.n	32fa <__divsi3+0x112>
    32f8:	4240      	negs	r0, r0
    32fa:	4053      	eors	r3, r2
    32fc:	2200      	movs	r2, #0
    32fe:	469c      	mov	ip, r3
    3300:	0903      	lsrs	r3, r0, #4
    3302:	428b      	cmp	r3, r1
    3304:	d32d      	bcc.n	3362 <__divsi3+0x17a>
    3306:	0a03      	lsrs	r3, r0, #8
    3308:	428b      	cmp	r3, r1
    330a:	d312      	bcc.n	3332 <__divsi3+0x14a>
    330c:	22fc      	movs	r2, #252	; 0xfc
    330e:	0189      	lsls	r1, r1, #6
    3310:	ba12      	rev	r2, r2
    3312:	0a03      	lsrs	r3, r0, #8
    3314:	428b      	cmp	r3, r1
    3316:	d30c      	bcc.n	3332 <__divsi3+0x14a>
    3318:	0189      	lsls	r1, r1, #6
    331a:	1192      	asrs	r2, r2, #6
    331c:	428b      	cmp	r3, r1
    331e:	d308      	bcc.n	3332 <__divsi3+0x14a>
    3320:	0189      	lsls	r1, r1, #6
    3322:	1192      	asrs	r2, r2, #6
    3324:	428b      	cmp	r3, r1
    3326:	d304      	bcc.n	3332 <__divsi3+0x14a>
    3328:	0189      	lsls	r1, r1, #6
    332a:	d03a      	beq.n	33a2 <__divsi3+0x1ba>
    332c:	1192      	asrs	r2, r2, #6
    332e:	e000      	b.n	3332 <__divsi3+0x14a>
    3330:	0989      	lsrs	r1, r1, #6
    3332:	09c3      	lsrs	r3, r0, #7
    3334:	428b      	cmp	r3, r1
    3336:	d301      	bcc.n	333c <__divsi3+0x154>
    3338:	01cb      	lsls	r3, r1, #7
    333a:	1ac0      	subs	r0, r0, r3
    333c:	4152      	adcs	r2, r2
    333e:	0983      	lsrs	r3, r0, #6
    3340:	428b      	cmp	r3, r1
    3342:	d301      	bcc.n	3348 <__divsi3+0x160>
    3344:	018b      	lsls	r3, r1, #6
    3346:	1ac0      	subs	r0, r0, r3
    3348:	4152      	adcs	r2, r2
    334a:	0943      	lsrs	r3, r0, #5
    334c:	428b      	cmp	r3, r1
    334e:	d301      	bcc.n	3354 <__divsi3+0x16c>
    3350:	014b      	lsls	r3, r1, #5
    3352:	1ac0      	subs	r0, r0, r3
    3354:	4152      	adcs	r2, r2
    3356:	0903      	lsrs	r3, r0, #4
    3358:	428b      	cmp	r3, r1
    335a:	d301      	bcc.n	3360 <__divsi3+0x178>
    335c:	010b      	lsls	r3, r1, #4
    335e:	1ac0      	subs	r0, r0, r3
    3360:	4152      	adcs	r2, r2
    3362:	08c3      	lsrs	r3, r0, #3
    3364:	428b      	cmp	r3, r1
    3366:	d301      	bcc.n	336c <__divsi3+0x184>
    3368:	00cb      	lsls	r3, r1, #3
    336a:	1ac0      	subs	r0, r0, r3
    336c:	4152      	adcs	r2, r2
    336e:	0883      	lsrs	r3, r0, #2
    3370:	428b      	cmp	r3, r1
    3372:	d301      	bcc.n	3378 <__divsi3+0x190>
    3374:	008b      	lsls	r3, r1, #2
    3376:	1ac0      	subs	r0, r0, r3
    3378:	4152      	adcs	r2, r2
    337a:	d2d9      	bcs.n	3330 <__divsi3+0x148>
    337c:	0843      	lsrs	r3, r0, #1
    337e:	428b      	cmp	r3, r1
    3380:	d301      	bcc.n	3386 <__divsi3+0x19e>
    3382:	004b      	lsls	r3, r1, #1
    3384:	1ac0      	subs	r0, r0, r3
    3386:	4152      	adcs	r2, r2
    3388:	1a41      	subs	r1, r0, r1
    338a:	d200      	bcs.n	338e <__divsi3+0x1a6>
    338c:	4601      	mov	r1, r0
    338e:	4663      	mov	r3, ip
    3390:	4152      	adcs	r2, r2
    3392:	105b      	asrs	r3, r3, #1
    3394:	4610      	mov	r0, r2
    3396:	d301      	bcc.n	339c <__divsi3+0x1b4>
    3398:	4240      	negs	r0, r0
    339a:	2b00      	cmp	r3, #0
    339c:	d500      	bpl.n	33a0 <__divsi3+0x1b8>
    339e:	4249      	negs	r1, r1
    33a0:	4770      	bx	lr
    33a2:	4663      	mov	r3, ip
    33a4:	105b      	asrs	r3, r3, #1
    33a6:	d300      	bcc.n	33aa <__divsi3+0x1c2>
    33a8:	4240      	negs	r0, r0
    33aa:	b501      	push	{r0, lr}
    33ac:	2000      	movs	r0, #0
    33ae:	f000 f805 	bl	33bc <__aeabi_idiv0>
    33b2:	bd02      	pop	{r1, pc}

000033b4 <__aeabi_idivmod>:
    33b4:	2900      	cmp	r1, #0
    33b6:	d0f8      	beq.n	33aa <__divsi3+0x1c2>
    33b8:	e716      	b.n	31e8 <__divsi3>
    33ba:	4770      	bx	lr

000033bc <__aeabi_idiv0>:
    33bc:	4770      	bx	lr
    33be:	46c0      	nop			; (mov r8, r8)

000033c0 <__libc_init_array>:
    33c0:	b570      	push	{r4, r5, r6, lr}
    33c2:	2600      	movs	r6, #0
    33c4:	4d0c      	ldr	r5, [pc, #48]	; (33f8 <__libc_init_array+0x38>)
    33c6:	4c0d      	ldr	r4, [pc, #52]	; (33fc <__libc_init_array+0x3c>)
    33c8:	1b64      	subs	r4, r4, r5
    33ca:	10a4      	asrs	r4, r4, #2
    33cc:	42a6      	cmp	r6, r4
    33ce:	d109      	bne.n	33e4 <__libc_init_array+0x24>
    33d0:	2600      	movs	r6, #0
    33d2:	f000 f999 	bl	3708 <_init>
    33d6:	4d0a      	ldr	r5, [pc, #40]	; (3400 <__libc_init_array+0x40>)
    33d8:	4c0a      	ldr	r4, [pc, #40]	; (3404 <__libc_init_array+0x44>)
    33da:	1b64      	subs	r4, r4, r5
    33dc:	10a4      	asrs	r4, r4, #2
    33de:	42a6      	cmp	r6, r4
    33e0:	d105      	bne.n	33ee <__libc_init_array+0x2e>
    33e2:	bd70      	pop	{r4, r5, r6, pc}
    33e4:	00b3      	lsls	r3, r6, #2
    33e6:	58eb      	ldr	r3, [r5, r3]
    33e8:	4798      	blx	r3
    33ea:	3601      	adds	r6, #1
    33ec:	e7ee      	b.n	33cc <__libc_init_array+0xc>
    33ee:	00b3      	lsls	r3, r6, #2
    33f0:	58eb      	ldr	r3, [r5, r3]
    33f2:	4798      	blx	r3
    33f4:	3601      	adds	r6, #1
    33f6:	e7f2      	b.n	33de <__libc_init_array+0x1e>
    33f8:	00003714 	.word	0x00003714
    33fc:	00003714 	.word	0x00003714
    3400:	00003714 	.word	0x00003714
    3404:	00003718 	.word	0x00003718

00003408 <malloc>:
    3408:	b510      	push	{r4, lr}
    340a:	4b03      	ldr	r3, [pc, #12]	; (3418 <malloc+0x10>)
    340c:	0001      	movs	r1, r0
    340e:	6818      	ldr	r0, [r3, #0]
    3410:	f000 f816 	bl	3440 <_malloc_r>
    3414:	bd10      	pop	{r4, pc}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	20000010 	.word	0x20000010

0000341c <memcpy>:
    341c:	2300      	movs	r3, #0
    341e:	b510      	push	{r4, lr}
    3420:	429a      	cmp	r2, r3
    3422:	d100      	bne.n	3426 <memcpy+0xa>
    3424:	bd10      	pop	{r4, pc}
    3426:	5ccc      	ldrb	r4, [r1, r3]
    3428:	54c4      	strb	r4, [r0, r3]
    342a:	3301      	adds	r3, #1
    342c:	e7f8      	b.n	3420 <memcpy+0x4>

0000342e <memset>:
    342e:	0003      	movs	r3, r0
    3430:	1882      	adds	r2, r0, r2
    3432:	4293      	cmp	r3, r2
    3434:	d100      	bne.n	3438 <memset+0xa>
    3436:	4770      	bx	lr
    3438:	7019      	strb	r1, [r3, #0]
    343a:	3301      	adds	r3, #1
    343c:	e7f9      	b.n	3432 <memset+0x4>
	...

00003440 <_malloc_r>:
    3440:	2303      	movs	r3, #3
    3442:	b570      	push	{r4, r5, r6, lr}
    3444:	1ccd      	adds	r5, r1, #3
    3446:	439d      	bics	r5, r3
    3448:	3508      	adds	r5, #8
    344a:	0006      	movs	r6, r0
    344c:	2d0c      	cmp	r5, #12
    344e:	d21e      	bcs.n	348e <_malloc_r+0x4e>
    3450:	250c      	movs	r5, #12
    3452:	42a9      	cmp	r1, r5
    3454:	d81d      	bhi.n	3492 <_malloc_r+0x52>
    3456:	0030      	movs	r0, r6
    3458:	f000 f862 	bl	3520 <__malloc_lock>
    345c:	4a25      	ldr	r2, [pc, #148]	; (34f4 <_malloc_r+0xb4>)
    345e:	6814      	ldr	r4, [r2, #0]
    3460:	0021      	movs	r1, r4
    3462:	2900      	cmp	r1, #0
    3464:	d119      	bne.n	349a <_malloc_r+0x5a>
    3466:	4c24      	ldr	r4, [pc, #144]	; (34f8 <_malloc_r+0xb8>)
    3468:	6823      	ldr	r3, [r4, #0]
    346a:	2b00      	cmp	r3, #0
    346c:	d103      	bne.n	3476 <_malloc_r+0x36>
    346e:	0030      	movs	r0, r6
    3470:	f000 f844 	bl	34fc <_sbrk_r>
    3474:	6020      	str	r0, [r4, #0]
    3476:	0029      	movs	r1, r5
    3478:	0030      	movs	r0, r6
    347a:	f000 f83f 	bl	34fc <_sbrk_r>
    347e:	1c43      	adds	r3, r0, #1
    3480:	d12c      	bne.n	34dc <_malloc_r+0x9c>
    3482:	230c      	movs	r3, #12
    3484:	0030      	movs	r0, r6
    3486:	6033      	str	r3, [r6, #0]
    3488:	f000 f84b 	bl	3522 <__malloc_unlock>
    348c:	e003      	b.n	3496 <_malloc_r+0x56>
    348e:	2d00      	cmp	r5, #0
    3490:	dadf      	bge.n	3452 <_malloc_r+0x12>
    3492:	230c      	movs	r3, #12
    3494:	6033      	str	r3, [r6, #0]
    3496:	2000      	movs	r0, #0
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	680b      	ldr	r3, [r1, #0]
    349c:	1b5b      	subs	r3, r3, r5
    349e:	d41a      	bmi.n	34d6 <_malloc_r+0x96>
    34a0:	2b0b      	cmp	r3, #11
    34a2:	d903      	bls.n	34ac <_malloc_r+0x6c>
    34a4:	600b      	str	r3, [r1, #0]
    34a6:	18cc      	adds	r4, r1, r3
    34a8:	6025      	str	r5, [r4, #0]
    34aa:	e003      	b.n	34b4 <_malloc_r+0x74>
    34ac:	428c      	cmp	r4, r1
    34ae:	d10e      	bne.n	34ce <_malloc_r+0x8e>
    34b0:	6863      	ldr	r3, [r4, #4]
    34b2:	6013      	str	r3, [r2, #0]
    34b4:	0030      	movs	r0, r6
    34b6:	f000 f834 	bl	3522 <__malloc_unlock>
    34ba:	0020      	movs	r0, r4
    34bc:	2207      	movs	r2, #7
    34be:	300b      	adds	r0, #11
    34c0:	1d23      	adds	r3, r4, #4
    34c2:	4390      	bics	r0, r2
    34c4:	1ac3      	subs	r3, r0, r3
    34c6:	d0e7      	beq.n	3498 <_malloc_r+0x58>
    34c8:	425a      	negs	r2, r3
    34ca:	50e2      	str	r2, [r4, r3]
    34cc:	e7e4      	b.n	3498 <_malloc_r+0x58>
    34ce:	684b      	ldr	r3, [r1, #4]
    34d0:	6063      	str	r3, [r4, #4]
    34d2:	000c      	movs	r4, r1
    34d4:	e7ee      	b.n	34b4 <_malloc_r+0x74>
    34d6:	000c      	movs	r4, r1
    34d8:	6849      	ldr	r1, [r1, #4]
    34da:	e7c2      	b.n	3462 <_malloc_r+0x22>
    34dc:	2303      	movs	r3, #3
    34de:	1cc4      	adds	r4, r0, #3
    34e0:	439c      	bics	r4, r3
    34e2:	42a0      	cmp	r0, r4
    34e4:	d0e0      	beq.n	34a8 <_malloc_r+0x68>
    34e6:	1a21      	subs	r1, r4, r0
    34e8:	0030      	movs	r0, r6
    34ea:	f000 f807 	bl	34fc <_sbrk_r>
    34ee:	1c43      	adds	r3, r0, #1
    34f0:	d1da      	bne.n	34a8 <_malloc_r+0x68>
    34f2:	e7c6      	b.n	3482 <_malloc_r+0x42>
    34f4:	200000e0 	.word	0x200000e0
    34f8:	200000e4 	.word	0x200000e4

000034fc <_sbrk_r>:
    34fc:	2300      	movs	r3, #0
    34fe:	b570      	push	{r4, r5, r6, lr}
    3500:	4c06      	ldr	r4, [pc, #24]	; (351c <_sbrk_r+0x20>)
    3502:	0005      	movs	r5, r0
    3504:	0008      	movs	r0, r1
    3506:	6023      	str	r3, [r4, #0]
    3508:	f7ff fda0 	bl	304c <_sbrk>
    350c:	1c43      	adds	r3, r0, #1
    350e:	d103      	bne.n	3518 <_sbrk_r+0x1c>
    3510:	6823      	ldr	r3, [r4, #0]
    3512:	2b00      	cmp	r3, #0
    3514:	d000      	beq.n	3518 <_sbrk_r+0x1c>
    3516:	602b      	str	r3, [r5, #0]
    3518:	bd70      	pop	{r4, r5, r6, pc}
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	200003bc 	.word	0x200003bc

00003520 <__malloc_lock>:
    3520:	4770      	bx	lr

00003522 <__malloc_unlock>:
    3522:	4770      	bx	lr
    3524:	000005fc 	.word	0x000005fc
    3528:	0000060a 	.word	0x0000060a
    352c:	000005ce 	.word	0x000005ce
    3530:	000005ce 	.word	0x000005ce
    3534:	00000618 	.word	0x00000618
    3538:	0000062e 	.word	0x0000062e
    353c:	00000644 	.word	0x00000644
    3540:	00000652 	.word	0x00000652
    3544:	00000660 	.word	0x00000660
    3548:	0000066e 	.word	0x0000066e
    354c:	0000067c 	.word	0x0000067c
    3550:	000006bc 	.word	0x000006bc
    3554:	00000a9a 	.word	0x00000a9a
    3558:	00000ce6 	.word	0x00000ce6
    355c:	00000ce6 	.word	0x00000ce6
    3560:	00000ce6 	.word	0x00000ce6
    3564:	00000ce6 	.word	0x00000ce6
    3568:	00000ce6 	.word	0x00000ce6
    356c:	00000ce6 	.word	0x00000ce6
    3570:	00000ce6 	.word	0x00000ce6
    3574:	00000ce6 	.word	0x00000ce6
    3578:	00000ce6 	.word	0x00000ce6
    357c:	00000ce6 	.word	0x00000ce6
    3580:	00000ce6 	.word	0x00000ce6
    3584:	00000ce6 	.word	0x00000ce6
    3588:	00000ce6 	.word	0x00000ce6
    358c:	00000ce6 	.word	0x00000ce6
    3590:	00000ce6 	.word	0x00000ce6
    3594:	00000a82 	.word	0x00000a82
    3598:	00000ce6 	.word	0x00000ce6
    359c:	00000ce6 	.word	0x00000ce6
    35a0:	00000ce6 	.word	0x00000ce6
    35a4:	00000ce6 	.word	0x00000ce6
    35a8:	00000ce6 	.word	0x00000ce6
    35ac:	00000ce6 	.word	0x00000ce6
    35b0:	00000ce6 	.word	0x00000ce6
    35b4:	00000ce6 	.word	0x00000ce6
    35b8:	00000ce6 	.word	0x00000ce6
    35bc:	00000ce6 	.word	0x00000ce6
    35c0:	00000ce6 	.word	0x00000ce6
    35c4:	00000ce6 	.word	0x00000ce6
    35c8:	00000ce6 	.word	0x00000ce6
    35cc:	00000ce6 	.word	0x00000ce6
    35d0:	00000ce6 	.word	0x00000ce6
    35d4:	00000a92 	.word	0x00000a92
    35d8:	00000ce6 	.word	0x00000ce6
    35dc:	00000ce6 	.word	0x00000ce6
    35e0:	00000ce6 	.word	0x00000ce6
    35e4:	00000ce6 	.word	0x00000ce6
    35e8:	00000ce6 	.word	0x00000ce6
    35ec:	00000ce6 	.word	0x00000ce6
    35f0:	00000ce6 	.word	0x00000ce6
    35f4:	00000ce6 	.word	0x00000ce6
    35f8:	00000ce6 	.word	0x00000ce6
    35fc:	00000ce6 	.word	0x00000ce6
    3600:	00000ce6 	.word	0x00000ce6
    3604:	00000ce6 	.word	0x00000ce6
    3608:	00000ce6 	.word	0x00000ce6
    360c:	00000ce6 	.word	0x00000ce6
    3610:	00000ce6 	.word	0x00000ce6
    3614:	00000a8a 	.word	0x00000a8a
    3618:	00000aa2 	.word	0x00000aa2
    361c:	00000a6a 	.word	0x00000a6a
    3620:	00000a7a 	.word	0x00000a7a
    3624:	00000a72 	.word	0x00000a72
    3628:	00000002 	.word	0x00000002
    362c:	00000003 	.word	0x00000003
    3630:	00000004 	.word	0x00000004
    3634:	00000005 	.word	0x00000005
    3638:	00000006 	.word	0x00000006
    363c:	00000007 	.word	0x00000007
    3640:	0000000e 	.word	0x0000000e
    3644:	0000000f 	.word	0x0000000f
    3648:	0000000a 	.word	0x0000000a
    364c:	0000000b 	.word	0x0000000b
    3650:	0000ffff 	.word	0x0000ffff
    3654:	0000ffff 	.word	0x0000ffff
    3658:	0000ffff 	.word	0x0000ffff
    365c:	0000ffff 	.word	0x0000ffff
    3660:	0000ffff 	.word	0x0000ffff
    3664:	0000ffff 	.word	0x0000ffff
    3668:	0000ffff 	.word	0x0000ffff
    366c:	0000ffff 	.word	0x0000ffff
    3670:	0000ffff 	.word	0x0000ffff
    3674:	0000ffff 	.word	0x0000ffff
    3678:	42000800 	.word	0x42000800
    367c:	42000c00 	.word	0x42000c00
    3680:	42001000 	.word	0x42001000

00003684 <sensor_analog_inputs>:
    3684:	00080906                                ....

00003688 <_tcc_intflag>:
    3688:	00000001 00000002 00000004 00000008     ................
    3698:	00001000 00002000 00004000 00008000     ..... ...@......
    36a8:	00010000 00020000 00040000 00080000     ................

000036b8 <tc_interrupt_vectors.12355>:
    36b8:	00000e0d                                ....

000036bc <tc_interrupt_vectors.12355>:
    36bc:	00000e0d 000029aa 000029a6 000029a6     .....)...)...)..
    36cc:	00002a08 00002a08 000029be 000029b0     .*...*...)...)..
    36dc:	000029c4 000029f6 00002a90 00002a70     .)...)...*..p*..
    36ec:	00002a70 00002afc 00002a82 00002a9e     p*...*...*...*..
    36fc:	00002a74 00002aac 00002aec              t*...*...*..

00003708 <_init>:
    3708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    370a:	46c0      	nop			; (mov r8, r8)
    370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    370e:	bc08      	pop	{r3}
    3710:	469e      	mov	lr, r3
    3712:	4770      	bx	lr

00003714 <__init_array_start>:
    3714:	000000b5 	.word	0x000000b5

00003718 <_fini>:
    3718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    371e:	bc08      	pop	{r3}
    3720:	469e      	mov	lr, r3
    3722:	4770      	bx	lr

00003724 <__fini_array_start>:
    3724:	0000008d 	.word	0x0000008d
